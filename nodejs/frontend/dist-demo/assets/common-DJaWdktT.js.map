{"version":3,"mappings":"u5DAGO,IAAKA,OACVA,IAAA,MAAQ,GAAR,QACAA,IAAA,MAAQ,GAAR,QACAA,IAAA,KAAO,GAAP,OACAA,IAAA,KAAO,GAAP,OACAA,IAAA,MAAQ,GAAR,QALUA,OAAA,IC2BL,MAAMC,GAAsC,CACjD,GAAI,wBACJ,KAAM,+BACN,QAAS,QACT,SAAU,GACV,iBAAkB,KAClB,SAAU,CACR,YAAa,uDACb,OAAQ,SACR,YAAa,eAEf,YAAaD,EAAS,KAEtB,QAAS,CACP,CACE,KAAM,OACN,QAAS,GACT,MAAOA,EAAS,MAChB,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,QACN,QAAS,GACT,MAAOA,EAAS,MAChB,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,SACN,QAAS,GACT,MAAOA,EAAS,KAChB,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,UACN,QAAS,GACT,MAAOA,EAAS,MAChB,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,cACN,QAAS,GACT,MAAOA,EAAS,KAChB,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,QACN,QAAS,GACT,MAAOA,EAAS,MAChB,mBAAoB,GACpB,kBAAmB,GACrB,EAGF,OAAQ,CACN,QAAS,GACT,SAAU,YACV,OAAQ,OACR,UAAW,GACX,cAAe,EACf,WAAY,IACZ,QAAS,IACT,sBAAuB,GACvB,0BAA2B,GAC3B,uBAAwB,GACxB,iBAAkB,GAClB,mBAAoB,IAGtB,QAAS,CACP,QAAS,GACT,OAAQ,GACR,SAAU,GACV,eAAgB,GAChB,aAAc,GAGhB,cAAe,CACb,cAAe,GACf,aAAc,GACd,eAAgB,GAChB,iBAAkB,GAClB,iBAAkB,KAGpB,YAAa,CACX,QAAS,GACT,aAAc,GACd,gBAAiB,GACjB,kBAAmB,GACnB,cAAe,EAAC,EAGlB,UAAW,CACT,QAAS,GACT,cAAe,IACf,cAAe,IACf,gBAAiB,IAGnB,cAAe,CACb,QAAS,GACT,kBAAmB,GACnB,qBAAsB,GACtB,uBAAwB,GACxB,gBAAiB,KAGnB,QAAS,CACP,QAAS,GACT,kBAAmB,GACnB,gBAAiB,GACjB,eAAgB,IAIlB,UAAqB,CACnB,OAAOE,GAAqB,IAAI,CAClC,EAEA,MAAMC,EAAiD,CACrD,OAAOC,GAAmBD,GAAa,EAAE,CAC3C,EAEA,QAAiB,CACf,MAAqDE,EAAA,KAA7C,QAAAC,EAAQ,SAAAC,EAAU,MAAAC,GAA2BH,EAAjBI,EAAAC,GAAiBL,EAAjB,CAA5B,SAAQ,WAAU,UAC1B,OAAO,KAAK,UAAUI,EAAc,KAAM,CAAC,CAC7C,EAEA,SAASE,EAA4B,CACnC,GAAI,CACF,MAAMC,EAAS,KAAK,MAAMD,CAAI,EAC9B,OAAOP,GAAmBQ,CAAM,CAClC,OAASC,EAAO,CACd,MAAM,IAAI,MAAM,yBAAyBA,CAAK,EAAE,CAClD,CACF,EAEA,SAAmB,CACjB,OAAO,KAAK,WAAW,SAAW,CACpC,EAEA,YAAa,CACX,MAAO,CACL,GAAI,KAAK,GACT,KAAM,KAAK,KACX,QAAS,KAAK,QACd,SAAU,KAAK,SACf,aAAc,KAAK,aACnB,QAAS,KAAK,UACd,iBAAkB,KAAK,WACvB,aAAc,OAAO,KAAK,KAAK,QAAQ,EAE3C,CACF,EAyCO,SAAST,GAAmBD,EAAgD,CACjF,OAAOW,EAAAC,IAAA,GACFd,IACAE,GAFE,CAGL,QAAS,CAAC,GAAGF,GAAsB,QAAS,GAAIE,EAAU,SAAW,EAAG,GAE5E,CAiFO,SAASD,GAAqBc,EAAgC,CACnE,MAAMC,EAAmB,GAEzB,OAAID,EAAO,YAAchB,EAAS,OAASgB,EAAO,YAAchB,EAAS,QACvEiB,EAAO,KAAK,0BAA0B,EAGpCD,EAAO,OAAO,SAAW,CAACA,EAAO,OAAO,UAC1CC,EAAO,KAAK,4DAA4D,EAGtED,EAAO,UAAU,SAAWA,EAAO,UAAU,eAAiB,GAChEC,EAAO,KAAK,oCAAoC,EAG9CD,EAAO,UAAU,SAAWA,EAAO,UAAU,eAAiB,GAChEC,EAAO,KAAK,uCAAuC,EAGjDD,EAAO,YAAY,SAAWA,EAAO,YAAY,cAAgB,GACnEC,EAAO,KAAK,sCAAsC,GAIjDD,EAAO,YAAY,SAAWA,EAAO,YAAY,iBAAmB,GACrEA,EAAO,YAAY,gBAAkB,MAErCC,EAAO,KAAK,4CAA4C,EAGnDA,CACT,CCpVO,MAAMC,EAAa,CAQxB,YAAYC,EAAgB,CAPpBC,EAAA,eACAA,EAAA,oBAA2B,IAC3BA,EAAA,uBAAuC,KACvCA,EAAA,6BAA6C,KAC7CA,EAAA,uBAA4B,IAC5BA,EAAA,uBAGN,KAAK,OAASD,EACd,KAAK,eAAiB,GACxB,CAKO,WAAWE,EAA4B,CAE5C,KAAK,aAAa,KAAKA,CAAU,EAG7B,KAAK,aAAa,OAAS,KAAK,gBAClC,KAAK,aAAa,QAIpB,MAAMC,EAAQD,EAAW,MACnBE,EAAe,KAAK,YAAY,IAAID,CAAK,GAAK,EACpD,KAAK,YAAY,IAAIA,EAAOC,EAAe,CAAC,EAG5C,MAAMC,EAAaH,EAAW,WACxBI,EAAqB,KAAK,kBAAkB,IAAID,CAAU,GAAK,EACrE,KAAK,kBAAkB,IAAIA,EAAYC,EAAqB,CAAC,EAG7D,MAAMC,EAAM,KAAK,MACjB,KAAK,gBAAgB,KAAKA,CAAG,EAG7B,MAAMC,EAAeD,EAAM,IAC3B,KAAK,gBAAkB,KAAK,gBAAgB,OAAOE,GAAaA,EAAYD,CAAY,EAGxF,KAAK,OAAO,MAAM,eAAgB,aAAc,kBAAkBN,EAAW,OAAO,GAAI,CACtF,MAAOA,EAAW,MAClB,WAAYA,EAAW,WACvB,YAAa,KAAK,aAAa,OAC/B,UAAW,KAAK,oBAAmB,CACpC,CACH,CAKQ,oBAA6B,CAEnC,MAAMM,EADM,KAAK,MACU,IAK3B,OAFqB,KAAK,gBAAgB,OAAOC,GAAaA,EAAYD,CAAY,EAElE,MACtB,CAKO,eAAiC,CACtC,MAAME,EAAe,KAAK,aAAa,MAAM,GAAG,EAEhD,MAAO,CACL,YAAa,KAAK,aAAa,OAC/B,cAAe,OAAO,YAAY,KAAK,WAAW,EAClD,eAAgB,OAAO,YAAY,KAAK,iBAAiB,EACzD,aAAAA,EACA,UAAW,KAAK,oBAAmB,CAEvC,CAKO,iBAAiBP,EAA2B,CACjD,OAAO,KAAK,aAAa,OAAOT,GAASA,EAAM,QAAUS,CAAK,CAChE,CAKO,kBAAkBE,EAAgC,CACvD,OAAO,KAAK,aAAa,OAAOX,GAASA,EAAM,aAAeW,CAAU,CAC1E,CAOO,qBAAqBM,EAAkBC,EAA4B,CAGxE,OAAO,KAAK,YACd,CAKO,sBACLC,EAAgB,GAC0C,CAC1D,MAAMC,MAAoB,IAE1B,YAAK,aAAa,QAAQpB,GAAS,CACjC,MAAMqB,EAAM,GAAGrB,EAAM,KAAK,IAAIA,EAAM,OAAO,GACrCsB,EAAWF,EAAc,IAAIC,CAAG,EAElCC,EACFA,EAAS,QAETF,EAAc,IAAIC,EAAK,CAAE,MAAO,EAAG,MAAOrB,EAAM,MAAO,CAE3D,CAAC,EAGM,MAAM,KAAKoB,EAAc,SAAS,EACtC,IAAI,CAAC,CAACC,EAAKE,CAAI,KAAO,CACrB,QAASF,EAAI,MAAM,GAAG,EAAE,CAAC,EACzB,MAAOE,EAAK,MACZ,MAAOA,EAAK,OACZ,EACD,KAAK,CAACC,EAAGC,IAAMA,EAAE,MAAQD,EAAE,KAAK,EAChC,MAAM,EAAGL,CAAK,CACnB,CAKO,eACLO,EAA4B,GACiB,CAC7C,MAAMb,EAAM,KAAK,MACXc,EAAaD,EAAoB,GAAK,IACtCE,EAAY,GAEZC,EAAeF,EAAaC,EAC5BE,EAAsD,GAE5D,QAASC,EAAI,EAAGA,EAAIH,EAAWG,IAAK,CAClC,MAAMC,EAAgBnB,EAAMc,EAAaI,EAAIF,EAIvCI,EAAQ,KAAK,aAAa,OAEhCH,EAAO,KAAK,CACV,UAAWE,EACX,MAAAC,CAAA,CACD,CACH,CAEA,OAAOH,CACT,CAKO,cAAqB,CAC1B,KAAK,aAAe,GACpB,KAAK,YAAY,QACjB,KAAK,kBAAkB,QACvB,KAAK,gBAAkB,GAEvB,KAAK,OAAO,KAAK,eAAgB,eAAgB,eAAgB,uBAAuB,CAC1F,CAKO,kBAAkBI,EAAoB,CAC3C,KAAK,eAAiBA,EAGlB,KAAK,aAAa,OAASA,IAC7B,KAAK,aAAe,KAAK,aAAa,MAAM,CAACA,CAAI,GAGnD,KAAK,OAAO,MACV,eACA,oBACA,oBACA,2BAA2BA,CAAI,GAEnC,CAKO,iBAAuB,CAC5B,MAAO,CACL,WAAY,KAAK,gBACjB,mBAAoB,KAAK,wBACzB,YAAa,KAAK,iBAClB,gBAAiB,IAAI,OAAO,cAC5B,YAAa,KAAK,aAAa,OAEnC,CAKO,gBAAgBC,EAAoB,GAAa,CACtD,OAAO,KAAK,qBAAuBA,CACrC,CAKO,wBAA4D,CACjE,MAAMC,EAAO,KAAK,qBAElB,OAAIA,GAAQ,EAAU,SAClBA,GAAQ,GAAW,UAChB,UACT,CAKO,gBAAuF,CAC5F,MAAMC,EAAc,KAAK,aAAa,OAChCC,EAAc,KAAK,aAAa,OAGhCC,EAAiBF,EAAc,KAErC,MAAO,CACL,YAAAA,EACA,YAAAC,EACA,eAAAC,CAAA,CAEJ,CACF,CC9OO,MAAMC,EAAkC,CAK7C,YAAYrC,EAA+E,CAJnFI,EAAA,sBAAyC,IACzCA,EAAA,kBACAA,EAAA,sBAAyB,KAG3BJ,GAAA,MAAAA,EAAQ,iBACV,KAAK,eAAiBA,EAAO,gBAE3BA,GAAA,MAAAA,EAAQ,iBACV,KAAK,eAAiBD,IAAA,GAAK,KAAK,gBAAmBC,EAAO,gBAE9D,CAEa,QAAiBsC,EAAuD,QAAAC,EAAA,sBACnF,KAAM,CACJ,IAAAC,EACA,OAAAC,EACA,QAAAC,EAAU,GACV,KAAAC,EACA,QAAAC,EAAU,KAAK,eACf,OAAAC,EACA,YAAAC,CAAA,EACER,EAEES,EAA8B,CAClC,OAAAN,EACA,QAAS1C,MAAA,CACP,eAAgB,oBACb,KAAK,gBACJ,KAAK,WAAa,CAAE,cAAe,UAAU,KAAK,SAAS,KAC5D2C,GAEL,KAAMC,EAAO,KAAK,UAAUA,CAAI,EAAI,OACpC,OAAQE,GAAU,YAAY,QAAQD,CAAO,EAC7C,YAAaE,GAAe,eAG9B,GAAI,CACF,MAAME,EAAW,MAAM,MAAMR,EAAKO,CAAc,EAEhD,IAAIE,EACJ,GAAI,CACFA,EAAe,MAAMD,EAAS,MAChC,OAAQE,EAAA,CACND,EAAe,EACjB,CAEA,MAAME,EAAgC,CACpC,KAAMF,EACN,OAAQD,EAAS,OACjB,WAAYA,EAAS,WACrB,QAAS,KAAK,eAAeA,EAAS,OAAO,EAC7C,GAAIA,EAAS,GACb,IAAKA,EAAS,KAGhB,GAAI,CAACA,EAAS,GAAI,CAChB,MAAMnD,EAAmB,IAAI,MAAM,QAAQmD,EAAS,MAAM,KAAKA,EAAS,UAAU,EAAE,EACpF,MAAAnD,EAAM,OAASmD,EAAS,OACxBnD,EAAM,WAAamD,EAAS,WAC5BnD,EAAM,SAAWsD,EACjBtD,EAAM,QAAUyC,EACVzC,CACR,CAEA,OAAOsD,CACT,OAAStD,EAAO,CACd,GAAIA,aAAiB,OAASA,EAAM,OAAS,aAAc,CACzD,MAAMuD,EAA0B,IAAI,MAAM,iBAAiB,EAC3D,MAAAA,EAAa,QAAUd,EACjBc,CACR,CACA,MAAMvD,CACR,CACF,GAEa,IACX2C,EACAF,EAC0B,QAAAC,EAAA,sBAC1B,OAAO,KAAK,QAAWxC,EAAA,CAAE,IAAAyC,EAAK,OAAQ,OAAUF,EAAS,CAC3D,GAEa,KACXE,EACApB,EACAkB,EAC0B,QAAAC,EAAA,sBAC1B,OAAO,KAAK,QAAWxC,EAAA,CAAE,IAAAyC,EAAK,OAAQ,OAAQ,KAAMpB,GAASkB,EAAS,CACxE,GAEa,IACXE,EACApB,EACAkB,EAC0B,QAAAC,EAAA,sBAC1B,OAAO,KAAK,QAAWxC,EAAA,CAAE,IAAAyC,EAAK,OAAQ,MAAO,KAAMpB,GAASkB,EAAS,CACvE,GAEa,OACXE,EACAF,EAC0B,QAAAC,EAAA,sBAC1B,OAAO,KAAK,QAAWxC,EAAA,CAAE,IAAAyC,EAAK,OAAQ,UAAaF,EAAS,CAC9D,GAEO,kBAAkBI,EAAuC,CAC9D,KAAK,eAAiB3C,IAAA,GAAK,KAAK,gBAAmB2C,EACrD,CAEO,aAAaW,EAAqB,CACvC,KAAK,UAAYA,CACnB,CAEO,gBAAuB,CAC5B,KAAK,UAAY,MACnB,CAEO,WAAWT,EAAuB,CACvC,KAAK,eAAiBA,CACxB,CAEa,eAAeJ,EAA+B,QAAAD,EAAA,sBACzD,GAAI,CAEF,OADiB,MAAM,KAAK,IAAIC,CAAG,GACnB,EAClB,OAAQ,GACN,MAAO,EACT,CACF,GAEQ,eAAeE,EAA0C,CAC/D,MAAMY,EAA2C,GACjD,OAAAZ,EAAQ,QAAQ,CAACa,EAAOrC,IAAQ,CAC9BoC,EAAiBpC,CAAG,EAAIqC,CAC1B,CAAC,EACMD,CACT,CACF,CC1EO,MAAME,GAAoC,CAC/C,QAAS,wBACT,WAAY,KACZ,QAAS,IACT,cAAe,EACf,WAAY,IACZ,QAAS,CACP,OAAQ,gBACR,MAAO,kBACP,MAAO,kBACP,UAAW,wBAEb,MAAO,CACL,MAAO,mBACP,OAAQ,oBACR,OAAQ,qBAEV,OAAQ,cACR,KAAM,CACJ,aAAc,YACd,cAAe,kBACf,SAAU,IAEZ,UAAW,CACT,qBAAsB,IACtB,SAAU,IAEd,EAKaC,GAAqC,CAChD,QAAS,qCACT,WAAY,KACZ,QAAS,KACT,cAAe,EACf,WAAY,IACZ,QAAS,CACP,OAAQ,gBACR,MAAO,kBACP,MAAO,kBACP,UAAW,wBAEb,MAAO,CACL,MAAO,mBACP,OAAQ,oBACR,OAAQ,qBAEV,OAAQ,cACR,KAAM,CACJ,aAAc,YACd,cAAe,kBACf,SAAU,IAEZ,UAAW,CACT,qBAAsB,IACtB,SAAU,IAEd,EAKO,SAASC,IAAkC,CAKhD,OADE,OAAO,SAAY,YACEF,GAAqBC,EAC9C,CAaO,SAASE,GAAcC,EAA0D,CACtF,MAAM5D,EAAS0D,GAAA,EACf,MAAO,GAAG1D,EAAO,OAAO,GAAGA,EAAO,QAAQ4D,CAAI,CAAC,EACjD,CAaO,SAASC,IAAuB,CACrC,MAAM7D,EAAS0D,GAAA,EACf,MAAO,GAAG1D,EAAO,OAAO,GAAGA,EAAO,MAAM,EAC1C,CClKO,MAAM8D,EAAgB,CAU3B,YAAY9D,EAAyB,CAT7BI,EAAA,eACAA,EAAA,gBAAoB,IACpBA,EAAA,kBACN,IACMA,EAAA,yBAA6B,IAC7BA,EAAA,mBACAA,EAAA,uBAA0B,GAC1BA,EAAA,0BAA6B,KAGnC,KAAK,OAASJ,EACd,KAAK,WAAa,IAAIqC,GAAW,CAC/B,eAAgBrC,EAAO,QACvB,eAAgBD,EAAA,CACd,eAAgB,oBACZC,EAAO,QAAU,CAAE,cAAe,UAAUA,EAAO,MAAM,IAC/D,CACD,EACD,KAAK,6BACP,CAKO,aAAa+D,EAA2C,CAC7D,KAAK,OAAShE,IAAA,GAAK,KAAK,QAAWgE,EACrC,CAKQ,6BAAoC,CACtC,OAAO,QAAW,cACpB,OAAO,iBAAiB,SAAU,IAAM,CACtC,KAAK,SAAW,GAChB,KAAK,mBACP,CAAC,EAED,OAAO,iBAAiB,UAAW,IAAM,CACvC,KAAK,SAAW,EAClB,CAAC,EAEL,CAKa,QAAQC,EAAgD,QAAAzB,EAAA,sBACnE,GAAI,CAAC,KAAK,OAAO,SAAW,CAAC,KAAK,SAChC,YAAK,gBAAgB,CAAE,KAAMyB,EAAU,SAAU,EAAG,KAAM,MAAO,EAC1D,CAAE,QAAS,GAAO,QAAS,sCAGpC,GAAI,CAMF,OALiB,MAAM,KAAK,YAAY,OAAQ,CAC9C,OAAQ,OACR,KAAMA,CAAA,CACP,CAGH,OAASnE,EAAO,CAKd,MAHI,KAAK,iBAAiBA,CAAK,GAC7B,KAAK,gBAAgB,CAAE,KAAMmE,EAAU,SAAU,EAAG,KAAM,MAAO,EAE/DnE,aAAiB,MACbA,EAEF,IAAI,MAAM,OAAOA,CAAK,CAAC,CAC/B,CACF,GAKa,SAASoE,EAA8C,QAAA1B,EAAA,sBAClE,GAAI,CAAC,KAAK,OAAO,SAAW,CAAC,KAAK,SAChC,YAAK,gBAAgB,CAAE,KAAM0B,EAAM,SAAU,EAAG,KAAM,QAAS,EACxD,CAAE,QAAS,GAAO,QAAS,sCAIpC,MAAMC,EAAU,KAAK,iBAAiBD,EAAM,KAAK,OAAO,SAAS,EAC3DE,EAA+B,GAErC,UAAWC,KAASF,EAClB,GAAI,CACF,MAAMG,EAAgC,CACpC,KAAMD,EACN,UAAW,KAAK,eAChB,UAAW,IAAI,OAAO,cACtB,QAAS,SAGLpB,EAAW,MAAM,KAAK,YAAY,SAAU,CAChD,OAAQ,OACR,KAAMqB,CAAA,CACP,EAEDF,EAAQ,KAAKnB,CAAQ,CACvB,OAASnD,EAAO,CAEV,KAAK,iBAAiBA,CAAK,GAC7B,KAAK,gBAAgB,CAAE,KAAMuE,EAAO,SAAU,EAAG,KAAM,QAAS,EAElE,MAAME,EAAezE,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC1EsE,EAAQ,KAAK,CAAE,QAAS,GAAO,QAAS,uBAAwB,MAAOG,EAAc,CACvF,CAIF,MAAMC,EAAgBJ,EAAQ,MAAM,GAAK,EAAE,OAAO,EAC5CK,EAAYL,EAAQ,OAAO,CAACM,EAAKC,IAAA,OAAM,OAAAD,KAAOpF,EAAAqF,EAAE,SAAF,YAAArF,EAAU,SAAU,IAAI,CAAC,EAE7E,MAAO,CACL,QAASkF,EACT,QAAS,aAAaC,CAAS,YAAYN,EAAQ,MAAM,WACzD,OAAQC,EAAQ,WAAa,EAAE,QAAU,EAAE,EAE/C,GAKa,cAAcQ,EAAsD,QAAApC,EAAA,sBAC/E,GAAI,CAAC,KAAK,OAAO,SAAW,CAAC,KAAK,SAChC,YAAK,gBAAgB,CAAE,KAAMoC,EAAW,SAAU,EAAG,KAAM,YAAa,EACjE,CAAE,QAAS,GAAO,QAAS,sCAGpC,GAAI,CAMF,OALiB,MAAM,KAAK,YAAY,cAAe,CACrD,OAAQ,OACR,KAAMA,CAAA,CACP,CAGH,OAAS9E,EAAO,CAEd,MAAI,KAAK,iBAAiBA,CAAK,GAC7B,KAAK,gBAAgB,CAAE,KAAM8E,EAAW,SAAU,EAAG,KAAM,YAAa,EAEpE9E,CACR,CACF,GAKc,YACZ+E,EACAtC,EAC4B,QAAAC,EAAA,sBAC5B,IAAIC,EAGJ,OAAQoC,EAAA,CACN,IAAK,OACHpC,EAAMmB,GAAc,QAAQ,EAC5B,MACF,IAAK,SACHnB,EAAMmB,GAAc,OAAO,EAC3B,MACF,IAAK,cACHnB,EAAMmB,GAAc,WAAW,EAC/B,MACF,IAAK,UACHnB,EAAMqB,GAAA,EACN,MACF,QACErB,EAAM,GAAG,KAAK,OAAO,QAAQ,GAAGoC,CAAQ,GAI5C,MAAM,KAAK,mBAEX,GAAI,CACF,MAAM5B,EAAW,MAAM,KAAK,WAAW,KAAKR,EAAKF,EAAQ,IAAI,EAW7D,MARuC,CACrC,QAASU,EAAS,GAClB,QAASA,EAAS,WAClB,OAAQA,EAAS,KAAK,OACtB,MAAOA,EAAS,GAAK,OAAYA,EAAS,KAAK,MAC/C,WAAYA,EAAS,KAAK,WAI9B,OAASnD,EAAO,CACd,MAAIA,aAAiB,OAASA,EAAM,OAAS,aACrC,IAAI,MAAM,iBAAiB,EAE7BA,CACR,CACF,GAKc,kBAAkC,QAAA0C,EAAA,sBAE9C,MAAMsC,EADM,KAAK,MACkB,KAAK,gBAExC,GAAIA,EAAuB,KAAK,mBAAoB,CAClD,MAAMC,EAAQ,KAAK,mBAAqBD,EACxC,MAAM,KAAK,MAAMC,CAAK,CACxB,CAEA,KAAK,gBAAkB,KAAK,KAC9B,GAKQ,iBAAoBC,EAAYC,EAA0B,CAChE,MAAMd,EAAiB,GAEvB,QAAS,EAAI,EAAG,EAAIa,EAAM,OAAQ,GAAKC,EACrCd,EAAQ,KAAKa,EAAM,MAAM,EAAG,EAAIC,CAAS,CAAC,EAG5C,OAAOd,CACT,CAKQ,gBAAgBe,EAIf,CAEc,KAAK,WAAW,KACnC9D,GACEA,EAAS,OAAS8D,EAAK,MAAQ,KAAK,UAAU9D,EAAS,IAAI,IAAM,KAAK,UAAU8D,EAAK,IAAI,KAI3F,KAAK,WAAW,KAAKA,CAAI,EAGzB,KAAK,sBAGA,KAAK,mBACR,KAAK,oBAGX,CAKc,mBAAmC,QAAA1C,EAAA,sBAC/C,GAAI,OAAK,mBAAqB,KAAK,WAAW,SAAW,GAAK,CAAC,KAAK,UAIpE,MAAK,kBAAoB,GAEzB,GAAI,CACF,KAAO,KAAK,WAAW,OAAS,GAAG,CACjC,MAAM0C,EAAO,KAAK,WAAW,QAC7B,GAAKA,EAGL,IAAIA,EAAK,UAAY,EAAG,CAEtB,QAAQ,KACN,wDAAwDA,EAAK,IAAI,mBAEnE,QACF,CAEA,GAAI,CACF,IAAIjC,EAEJ,OAAQiC,EAAK,MACX,IAAK,MACHjC,EAAW,MAAM,KAAK,QAAQiC,EAAK,IAAI,EACvC,MACF,IAAK,QACHjC,EAAW,MAAM,KAAK,SAASiC,EAAK,IAAI,EACxC,MACF,IAAK,YACHjC,EAAW,MAAM,KAAK,cAAciC,EAAK,IAAI,EAC7C,MACF,QACE,SAGJ,GAAIjC,EAAS,QAEX,SAIFiC,EAAK,WACL,KAAK,WAAW,KAAKA,CAAI,EAGzB,MAAM,KAAK,MAAM,GAAI,CACvB,OAASpF,EAAO,CAEdoF,EAAK,WACL,KAAK,WAAW,KAAKA,CAAI,EAGzB,MAAM,KAAK,MAAM,GAAI,CACvB,EACF,CACF,SACE,KAAK,kBAAoB,EAC3B,EACF,GAKQ,MAAMC,EAA2B,CACvC,OAAO,IAAI,QAAQC,GAAW,WAAWA,EAASD,CAAE,CAAC,CACvD,CAKQ,cAAuB,CAC7B,OAAI,OAAO,gBAAmB,aACrB,eAAe,QAAQ,mBAAmB,GAAK,SAG1D,CAKO,qBAAkF,CACvF,MAAO,CACL,KAAM,KAAK,WAAW,OACtB,aAAc,KAAK,kBACnB,SAAU,KAAK,SAEnB,CAKO,iBAAwB,CAC7B,KAAK,WAAa,EACpB,CAKO,mBAA4B,CACjC,OAAO,KAAK,WAAW,MACzB,CAKQ,qBAA4B,CAG9B,KAAK,WAAW,OAAS,MAE3B,KAAK,WAAa,KAAK,WAAW,MAAM,KAAgB,CAAC,EAEzD,QAAQ,KACN,gEAA4E,KAAK,WAAW,MAAM,UAGxG,CAKa,mBAAmC,QAAA3C,EAAA,sBAC9C,MAAM,KAAK,mBACb,GAKa,gBAAmC,QAAAA,EAAA,sBAC9C,GAAI,CAAC,KAAK,OAAO,QACf,MAAO,GAGT,GAAI,CAEF,OADiB,MAAM,KAAK,YAAY,UAAW,CAAE,OAAQ,MAAO,KAAM,OAAW,GACrE,OAClB,OAAS1C,EAAO,CACd,MAAO,EACT,CACF,GAKa,iBAAmF,QAAA0C,EAAA,sBAG9F,MAAO,CACL,OAHa,MAAM,KAAK,iBAIxB,SAAU,KAAK,OAAO,SACtB,cAAe,IAAK,CAExB,GAMQ,iBAAiB1C,EAAqB,CAO5C,MALI,EAAAA,EAAM,QAAUA,EAAM,QAAU,KAAOA,EAAM,OAAS,KAKtDA,EAAM,QAAUA,EAAM,QAAU,KAAOA,EAAM,SAAW,IAM9D,CACF,CCrbO,MAAMuF,EAAN,MAAMA,CAAgB,CAqBnB,YAAYpF,EAAgC,CAnB5CI,EAAA,eAGAA,EAAA,gBAA4E,IAC5EA,EAAA,yBAA6B,IAC7BA,EAAA,sBAAgC,MAChCA,EAAA,sBAAwC,MAGxCA,EAAA,iBAA6B,IAC7BA,EAAA,8BAAyD,KACzDA,EAAA,qBACAA,EAAA,qBAGAA,EAAA,mBAAsB,GACtBA,EAAA,uBAA0B,GAC1BA,EAAA,2BAA8B,KAGpC,KAAK,OAASL,IAAA,GAAKd,IAA0Be,GAG7C,MAAMqF,EAAkB,CACtB,MAAO,CAAC7E,EAAoB8E,EAAoBC,EAAiBnE,IAC/D,KAAK,MAAMZ,EAAY8E,EAAYC,EAASnE,CAAI,EAClD,MAAO,CAACZ,EAAoB8E,EAAoBC,EAAiBnE,IAC/D,KAAK,MAAMZ,EAAY8E,EAAYC,EAASnE,CAAI,GAGpD,KAAK,aAAe,IAAIlB,GAAamF,CAAe,EACpD,KAAK,aAAe,IAAIvB,GAAgB,KAAK,OAAO,MAAM,EAG1D,KAAK,gCAGL,KAAK,oCAGL,KAAK,mBACP,CAKA,OAAc,YAAY9D,EAAiD,CACzE,OAAKoF,EAAgB,WACnBA,EAAgB,SAAW,IAAIA,EAAgBpF,CAAM,GAEhDoF,EAAgB,QACzB,CAKQ,+BAAsC,CAE5C,GAAI,OAAO,QAAW,aAAe,KAAK,OAAO,UAAU,QACzD,GAAI,CACF,KAAK,eAAiB,IAAI,OACxB,IAAI,gBACF,IAAI,KAAK,CACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAcD,EACH,EAGF,KAAK,eAAe,UAAYlC,GAAK,CAC/BA,EAAE,KAAK,OAAS,aAClB,KAAK,mBAAmBA,EAAE,KAAK,KAAK,CAExC,CACF,OAASrD,EAAO,CACd,QAAQ,KAAK,kEAAkE,CACjF,CAIF,KAAK,sBACP,CAKQ,sBAA6B,CAC/B,KAAK,OAAO,UAAU,UACxB,KAAK,eAAiB,YAAY,IAAM,CACtC,KAAK,iBACP,EAAG,KAAK,OAAO,UAAU,aAAa,EAGlC,OAAO,QAAW,aACpB,OAAO,iBAAiB,eAAgB,IAAM,CAC5C,KAAK,iBACP,CAAC,EAGP,CAKQ,mCAA0C,CAC3C,KAAK,OAAO,YAAY,UAG7B,KAAK,+BAGD,KAAK,OAAO,YAAY,mBAC1B,KAAK,gCAET,CAKQ,8BAAqC,CACvC,WAAY,aACd,YAAY,IAAM,CAChB,MAAMa,EAAM,KAAK,MACjB,GAAIA,EAAM,KAAK,iBAAmB,KAAK,oBAAqB,CAC1D,MAAM8E,EAAU,YAAoB,OACpC,KAAK,YAAc,KAAK,MAAMA,EAAO,eAAiB,OAAO,EAE7D,KAAK,mBAAmB,IAAI,SAAU,CACpC,MAAO,CACL,KAAM,KAAK,YACX,MAAO,KAAK,MAAMA,EAAO,gBAAkB,OAAO,EAClD,MAAO,KAAK,MAAMA,EAAO,gBAAkB,OAAO,GAEpD,UAAW9E,CAAA,CACZ,EAED,KAAK,gBAAkBA,EAGvB,MAAM+E,EAAsBD,EAAO,eAAiBA,EAAO,gBAAmB,IAC1EC,EAAqB,KAAK,OAAO,YAAY,iBAC/C,KAAK,SACH,cACA,gBACA,sBAAsBA,EAAmB,QAAQ,CAAC,CAAC,IACnD,CACE,YAAaA,EACb,UAAW,KAAK,OAAO,YAAY,iBAErCzG,EAAS,KACT,EAGN,CACF,EAAG,GAAI,CAEX,CAKQ,+BAAsC,CAC5C,GAAI,eAAgB,UAAW,CAC7B,MAAM0G,EAAc,UAAkB,WACtC,KAAK,mBAAmB,IAAI,UAAW,CACrC,MAAO,CACL,cAAeA,EAAW,cAC1B,SAAUA,EAAW,SACrB,IAAKA,EAAW,KAElB,UAAW,KAAK,KAAI,CACrB,CACH,CACF,CAKQ,mBAA0B,CAC5B,KAAK,OAAO,UAAU,SACxB,YAAY,IAAM,CAChB,KAAK,gBACP,EAAG,KAAK,OAAO,UAAU,aAAa,CAE1C,CAKQ,SACNlF,EACA8E,EACAC,EACAnE,EACAd,EAAkBtB,EAAS,KAC3B2G,EAAmB,EACb,CACN,GAAI,CAAC,KAAK,UAAUnF,EAAYF,CAAK,EAAG,OAExC,MAAMsF,EAAQ,KAAK,sBAAsBpF,EAAYF,EAAOiF,EAASnE,EAAMkE,CAAU,EAGrF,KAAK,SAAS,KAAK,CACjB,MAAAM,EACA,SAAAD,EACA,UAAW,KAAK,KAAI,CACrB,EAGD,KAAK,SAAS,KAAK,CAACtE,EAAGC,IAAMA,EAAE,SAAWD,EAAE,QAAQ,EAGhDsE,GAAY,GACd,KAAK,sBAAsBC,CAAK,EAI7B,KAAK,mBACR,KAAK,oBAIP,KAAK,UAAU,KAAKA,CAAK,CAC3B,CAKQ,sBACNpF,EACAF,EACAiF,EACAnE,EACAkE,EACU,CAgBV,MAfwB,CACtB,MAAOtG,EAASsB,CAAK,EACrB,WAAAE,EACA,QAAA+E,EACA,KAAM,KAAK,oBAAoBnE,CAAI,EACnC,WAAAkE,EAEA,YACYtG,EAAS,MAEf,QAEN,YAAasB,GAAStB,EAAS,KAAO,KAAK,sCAAwC,OAIvF,CAKQ,oBAAoBoC,EAAgB,CAC1C,GAAIA,GAAS,KAA4B,OAAOA,EAEhD,GAAI,CAEF,GAAI,OAAOA,GAAS,SAAU,CAE5B,GAAI,MAAM,QAAQA,CAAI,EACpB,OAAOA,EACJ,MAAM,EAAG,EAAE,EACX,IAAI6D,GACH,OAAOA,GAAS,UAAYA,IAAS,KAAO,KAAK,oBAAoBA,CAAI,EAAIA,CAAA,EAInF,MAAMY,EAAiB,GACjBC,EAAO,OAAO,KAAK1E,CAAI,EAAE,MAAM,EAAG,EAAE,EAE1C,UAAWF,KAAO4E,EACZ,KAAK,eAAe5E,EAAKE,EAAKF,CAAG,CAAC,IAChC,OAAOE,EAAKF,CAAG,GAAM,UAAYE,EAAKF,CAAG,IAAM,KAEjD2E,EAAU3E,CAAG,EAAI,KAAK,oBAAoBE,EAAKF,CAAG,CAAC,EAEnD2E,EAAU3E,CAAG,EAAIE,EAAKF,CAAG,GAK/B,OAAO2E,CACT,CAEA,OAAOzE,CACT,OAASvB,EAAO,CACd,MAAO,CAAE,MAAO,2BAA4B,aAAc,OAAOuB,CAAI,EACvE,CACF,CAKQ,eAAeF,EAAaqC,EAAqB,CACvD,OAAO,OAAOA,GAAU,YAAc,OAAOA,GAAU,UAAY,CAAC,KAAK,iBAAiBrC,CAAG,CAC/F,CAKQ,iBAAiB6E,EAA4B,CAEnD,MADwB,CAAC,WAAY,QAAS,MAAO,SAAU,OAAQ,YAAY,EAC5D,KAAKC,GAASD,EAAU,cAAc,SAASC,CAAK,CAAC,CAC9E,CAKQ,sBAA+B,CACrC,GAAI,CACF,MAAMC,EAAQ,IAAI,QAAQ,MAC1B,OAAOA,EAAQA,EAAM,MAAM;AAAA,CAAI,EAAE,MAAM,EAAG,CAAC,EAAE,KAAK;AAAA,CAAI,EAAI,2BAC5D,OAAQ/C,EAAA,CACN,MAAO,2BACT,CACF,CAKQ,qCAA2C,CACjD,MAAMgD,EAAe,GAGrB,OAAI,KAAK,YAAc,IACrBA,EAAQ,OAAS,KAAK,aAGjBA,CACT,CAKQ,sBAAsBN,EAAuB,CAEnD,GAAIA,EAAM,QAAU,SAAW,KAAK,OAAO,QAAQ,QAAS,CAC1D,MAAMO,EAAmB,KAAK,iBAAiBP,CAAK,EACpD,QAAQ,MAAMO,CAAgB,CAChC,CAGIP,EAAM,QAAU,SAAW,KAAK,OAAO,OAAO,uBAChD,KAAK,aAAa,QAAQA,CAAK,EAAE,MAAM,IAAM,CAE7C,CAAC,CAEL,CAKc,mBAAmC,QAAArD,EAAA,sBAC/C,GAAI,OAAK,mBAAqB,KAAK,SAAS,SAAW,GAEvD,MAAK,kBAAoB,GAEzB,GAAI,CAEF,MAAMyC,EAAY,KAAK,IAAI,GAAI,KAAK,SAAS,MAAM,EAC7CZ,EAAQ,KAAK,SAAS,OAAO,EAAGY,CAAS,EAG/C,GAAI,KAAK,eACP,UAAWC,KAAQb,EACjB,KAAK,eAAe,YAAY,CAC9B,MAAOa,EAAK,MACZ,SAAUA,EAAK,SAChB,MAIH,WAAWA,KAAQb,EACjB,KAAK,mBAAmBa,EAAK,KAAK,CAGxC,SACE,KAAK,kBAAoB,GAGrB,KAAK,SAAS,OAAS,GACzB,WAAW,IAAM,KAAK,oBAAqB,CAAC,CAEhD,EACF,GAKQ,mBAAmBW,EAAuB,CAE5C,KAAK,OAAO,QAAQ,SACtB,KAAK,uBAAuBA,CAAK,EAI/B,KAAK,OAAO,UAAU,OAG5B,CAOQ,iBAAiBA,EAAyB,CAChD,MAAMhF,EAAY,IAAI,OAAO,cACvBwF,EAAYR,EAAM,YAAc,UAChCN,EAAaM,EAAM,YAAc,UACjCL,EAAUK,EAAM,SAAW,GAG3BS,EAAa,KAAK,iBAAiBT,EAAM,KAAK,EAC9CU,EAAa,UAGnB,IAAIC,EAAa,GACjB,GAAIX,EAAM,OAAS,QAAaA,EAAM,OAAS,KAC7C,GAAI,CAEF,MAAMY,EAAW,CAACC,EAAclD,IAC1B,OAAOA,GAAU,WACZ,aAEL,OAAOA,GAAU,SACZ,WAELA,aAAiB,MACZ,CACL,KAAMA,EAAM,KACZ,QAASA,EAAM,QACf,MAAOA,EAAM,OAGVA,EAGTgD,EAAa,KAAK,UAAUX,EAAM,KAAMY,EAAU,CAAC,CACrD,OAAS3G,EAAO,CACd0G,EAAa,uCAAuC1G,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,CAAC,GAC5G,CAMF,MAFyB,IAAIe,CAAS,KAAKyF,CAAU,IAAIT,EAAM,KAAK,IAAIU,CAAU,KAAKF,CAAS,IAAId,CAAU,KAAKC,CAAO,GAAGgB,EAAa;AAAA,EAAOA,EAAa,EAAE,EAGlK,CAKQ,iBAAiBjG,EAAuB,CAC9C,OAAQA,EAAA,CACN,IAAK,QACH,MAAO,WACT,IAAK,OACH,MAAO,WACT,IAAK,OACH,MAAO,WACT,IAAK,QACH,MAAO,WACT,IAAK,QACH,MAAO,WACT,QACE,MAAO,WAEb,CAKQ,uBAAuBsF,EAAuB,CACpD,MAAMO,EAAmB,KAAK,iBAAiBP,CAAK,EAEpD,OAAQA,EAAM,OACZ,IAAK,QACH,QAAQ,MAAMO,CAAgB,EAC9B,MACF,IAAK,OACH,QAAQ,KAAKA,CAAgB,EAC7B,MACF,IAAK,OACH,QAAQ,KAAKA,CAAgB,EAC7B,MACF,IAAK,QACH,QAAQ,MAAMA,CAAgB,EAC9B,MACF,QACE,QAAQ,IAAIA,CAAgB,EAElC,CAKc,iBAAiC,QAAA5D,EAAA,sBAC7C,GAAI,KAAK,SAAS,SAAW,EAAG,OAEhC,MAAMmE,EAAa,KAAK,SACrB,OAAOzB,GAAQA,EAAK,MAAM,QAAU,SAAWA,EAAK,UAAY,CAAC,EACjE,IAAIA,GAAQA,EAAK,KAAK,EAEzB,GAAIyB,EAAW,OAAS,EACtB,GAAI,CACF,MAAM,KAAK,aAAa,SAASA,CAAU,CAC7C,OAAS7G,EAAO,CAEd6G,EAAW,QAAQC,GAAO,CACxB,KAAK,SAAS,KAAK,CACjB,MAAOA,EACP,SAAU,EACV,UAAW,KAAK,KAAI,CACrB,CACH,CAAC,CACH,CAEJ,GAKQ,gBAAuB,CAC7B,GAAI,KAAK,UAAU,OAAS,EAAG,CAC7B,MAAMD,EAAa,CAAC,GAAG,KAAK,SAAS,EACrC,KAAK,UAAY,GAEjB,KAAK,aAAa,SAASA,CAAU,EAAE,MAAM7G,GAAS,CACpD,KAAK,KAAK,SAAU,iBAAkB,gCAAiC,CAAE,MAAAA,EAAO,CAClF,CAAC,CACH,CACF,CAKQ,UAAUW,EAAoBF,EAA0B,OAC9D,GAAIA,EAAQ,KAAK,OAAO,YAAa,MAAO,GAE5C,MAAMsG,GAAevH,EAAA,KAAK,OAAO,UAAZ,YAAAA,EAAqB,KAAKwH,GAAOA,EAAI,OAASrG,GACnE,GAAIoG,GAAgB,CAACA,EAAa,QAAS,MAAO,GAElD,MAAME,GAAcF,GAAA,YAAAA,EAAc,QAAS5H,EAAS,MACpD,OAAOsB,GAASwG,CAClB,CAOO,MAAMtG,EAAoB8E,EAAoBC,EAAiBnE,EAAkB,CACtF,KAAK,SAASZ,EAAY8E,EAAYC,EAASnE,EAAMpC,EAAS,MAAO,CAAC,CACxE,CAKO,KAAKwB,EAAoB8E,EAAoBC,EAAiBnE,EAAkB,CACrF,KAAK,SAASZ,EAAY8E,EAAYC,EAASnE,EAAMpC,EAAS,KAAM,CAAC,CACvE,CAKO,KAAKwB,EAAoB8E,EAAoBC,EAAiBnE,EAAkB,CACrF,KAAK,SAASZ,EAAY8E,EAAYC,EAASnE,EAAMpC,EAAS,KAAM,CAAC,CACvE,CAKO,MAAMwB,EAAoB8E,EAAoBC,EAAiBnE,EAAkB,CACtF,KAAK,SAASZ,EAAY8E,EAAYC,EAASnE,EAAMpC,EAAS,MAAO,CAAC,CACxE,CAKO,MAAMwB,EAAoB8E,EAAoBC,EAAiBnE,EAAkB,CACtF,KAAK,SAASZ,EAAY8E,EAAYC,EAASnE,EAAMpC,EAAS,MAAO,CAAC,CACxE,CAKO,eACL+H,EACAxD,EACAyD,EAAe,GACfC,EACM,CACF,KAAK,OAAO,YAAY,SAC1B,KAAK,mBAAmB,IAAIF,EAAY,CACtC,MAAO,CAAE,MAAAxD,EAAO,KAAAyD,EAAM,SAAAC,CAAA,EACtB,UAAW,KAAK,KAAI,CACrB,CAEL,CAKO,uBAAwD,CAC7D,OAAO,IAAI,IAAI,KAAK,kBAAkB,CACxC,CAKO,oBAAsC,CAC3C,OAAO,KAAK,aAAa,eAC3B,CAKa,WAA2B,QAAA1E,EAAA,sBACtC,MAAM,KAAK,kBACX,KAAK,gBACP,GAKO,IAAI/B,EAAoB8E,EAAoBC,EAAiBnE,EAAkB,CACpF,KAAK,KAAKZ,EAAY8E,EAAYC,EAASnE,CAAI,CACjD,CAKO,aAAa8F,EAAmB9F,EAAkB,CACvD,KAAK,KAAK,YAAa8F,EAAW,eAAeA,CAAS,GAAI9F,CAAI,CACpE,CAKO,SAAgB,CACjB,KAAK,iBACP,KAAK,eAAe,YACpB,KAAK,eAAiB,MAGpB,KAAK,iBACP,cAAc,KAAK,cAAc,EACjC,KAAK,eAAiB,MAGxB,KAAK,SAAW,GAChB,KAAK,UAAY,EACnB,CAKO,gBAA0D,CAC/D,MAAO,CACL,KAAM,KAAK,SAAS,OACpB,aAAc,KAAK,kBAEvB,CACF,EAzqBEhB,EADWgF,EACI,YADV,IAAM+B,EAAN/B,EA6qBe+B,EAAgB,cC/qB/B,MAAMC,EAAN,MAAMA,CAAO,CAMlB,OAAc,YAAYpH,EAAwC,CAChE,OAAKoH,EAAO,WACVA,EAAO,SAAWD,EAAgB,YAAYnH,CAAM,GAE/CoH,EAAO,QAChB,CAOO,MAAM5G,EAAoB8E,EAAoBC,EAAiBnE,EAAkB,CACtFgG,EAAO,SAAS,MAAM5G,EAAY8E,EAAYC,EAASnE,CAAI,CAC7D,CAKO,KAAKZ,EAAoB8E,EAAoBC,EAAiBnE,EAAkB,CACrFgG,EAAO,SAAS,KAAK5G,EAAY8E,EAAYC,EAASnE,CAAI,CAC5D,CAKO,KAAKZ,EAAoB8E,EAAoBC,EAAiBnE,EAAkB,CACrFgG,EAAO,SAAS,KAAK5G,EAAY8E,EAAYC,EAASnE,CAAI,CAC5D,CAKO,MAAMZ,EAAoB8E,EAAoBC,EAAiBnE,EAAkB,CACtFgG,EAAO,SAAS,MAAM5G,EAAY8E,EAAYC,EAASnE,CAAI,CAC7D,CAKO,MAAMZ,EAAoB8E,EAAoBC,EAAiBnE,EAAkB,CACtFgG,EAAO,SAAS,MAAM5G,EAAY8E,EAAYC,EAASnE,CAAI,CAC7D,CAKO,eACL2F,EACAxD,EACAyD,EAAe,GACfC,EACM,CACNG,EAAO,SAAS,eAAeL,EAAYxD,EAAOyD,EAAMC,CAAQ,CAClE,CAKO,uBAAwD,CAC7D,OAAOG,EAAO,SAAS,uBACzB,CAKO,oBAAsC,CAC3C,OAAOA,EAAO,SAAS,oBACzB,CAKO,SAAgB,CACrBA,EAAO,SAAS,SAClB,CAKO,gBAA0D,CAC/D,OAAOA,EAAO,SAAS,gBACzB,CAKO,WAAkB,CACvBA,EAAO,SAAS,WAClB,CAKO,IAAI5G,EAAoB8E,EAAoBC,EAAiBnE,EAAkB,CACpFgG,EAAO,SAAS,IAAI5G,EAAY8E,EAAYC,EAASnE,CAAI,CAC3D,CAKO,aAAa8F,EAAmB9F,EAAkB,CACvDgG,EAAO,SAAS,aAAaF,EAAW9F,CAAI,CAC9C,CACF,EA7GEhB,EADWgH,EACI,YADV,IAAMC,EAAND,EAiHA,MAAMjH,EAASkH,EAAO,cC1GtB,MAAMC,EAAS,CAKpB,YAAYtH,EAAwB,CAJ5BI,EAAA,aACAA,EAAA,cAAiBiH,EAAO,eACxBjH,EAAA,eAGN,KAAK,OAASJ,EACd,KAAK,OAAO,MAAM,WAAY,cAAe,iCAAkC,CAC7E,OAAQA,EAAO,OAChB,EAGD,MAAMuH,EAAoD,CACxD,KAAMC,OACN,MAAO,OAAO,WACd,OAAQ,OAAO,YACf,OAAQ,iBACR,gBAAiB,UACjB,MAAO,GACP,QAAS,CACP,QAAS,SACT,OAAQ,CACN,QAAS,CAAE,EAAG,EAAG,EAAG,GACpB,MAAO,GACT,EAEF,MAAO,CACL,KAAMC,QAAa,OACnB,WAAYA,QAAa,YACzB,MAAO,OAAO,WACd,OAAQ,OAAO,YACjB,EAIIC,EAAe3H,IAAA,GAAKwH,GAAwBvH,EAAO,cAEzD,KAAK,OAAO,KAAK,WAAY,cAAe,gCAAiC,CAC3E,MAAO0H,EAAa,MACpB,OAAQA,EAAa,OACtB,EAED,KAAK,KAAO,IAAIC,OAAYD,CAAY,CAC1C,CAKA,WAA4B,CAC1B,OAAO,KAAK,MACd,CAKA,SAAuB,CACrB,OAAO,KAAK,IACd,CAKA,SAASE,EAA2B,CAElC,MAAMC,EAAWD,EAAM,IAAI,SAAS,IACpC,KAAK,KAAK,MAAM,IAAIC,EAAUD,CAAK,CACrC,CAKA,WAAWC,EAAwB,CACjC,KAAK,KAAK,MAAM,MAAMA,CAAQ,CAChC,CAKA,SAAgB,CACV,KAAK,OACP,KAAK,OAAO,KAAK,WAAY,UAAW,iCAAiC,EACzE,KAAK,KAAK,QAAQ,EAAI,EACtB,KAAK,OAAO,MAAM,WAAY,UAAW,6CAA6C,EAE1F,CACF,CCLO,MAAMC,EAAN,MAAMA,CAAoB,CAIvB,aAAc,CAFd1H,EAAA,yBAA+C,IAIvD,CAKA,OAAc,aAAmC,CAC/C,OAAK0H,EAAoB,WACvBA,EAAoB,SAAW,IAAIA,GAE9BA,EAAoB,QAC7B,CAKO,eAAeC,EAAmB/H,EAA4B,CACnE,KAAK,cAAc,IAAI+H,EAAW/H,CAAM,EACxCG,EAAO,KACL,sBACA,iBACA,iBACA,oDAEJ,CAKO,WAAW4H,EAA4B,CAC5C,MAAM/H,EAAS,KAAK,cAAc,IAAI+H,CAAS,EAE/C,GAAI,CAAC/H,EACH,OAAAG,EAAO,KACL,sBACA,aACA,aACA,kEAEK,GAGT,GAAI,CAKF,OAAAA,EAAO,KACL,sBACA,aACA,iDACA,CACE,YAAaH,EAAO,YACpB,eAAgBA,EAAO,QAAQ,QAC/B,cAAeA,EAAO,OAAO,QAC7B,YAAaA,EAAO,QAAQ,OAC9B,EAGK,EACT,OAASH,EAAO,CACd,OAAAM,EAAO,MACL,sBACA,aACA,yDACAN,CAAA,EAEK,EACT,CACF,CAKO,qBAAgC,CACrC,OAAO,MAAM,KAAK,KAAK,cAAc,MAAM,CAC7C,CAKO,UAAUkI,EAA4B,CAC3C,OAAO,KAAK,cAAc,IAAIA,CAAS,CACzC,CAKO,UAAUA,EAA6C,CAC5D,OAAO,KAAK,cAAc,IAAIA,CAAS,CACzC,CAKO,gBAAuB,CAC5B,GAAI,CA0BF5H,EAAO,KACL,sBACA,iBACA,iBACA,wCAEJ,OAASN,EAAO,CACdM,EAAO,MACL,sBACA,iBACA,kDACAN,CAAA,CAEJ,CACF,CACF,EA7IEO,EADW0H,EACI,YADV,IAAME,GAANF,EC1CA,MAAMG,EAAN,MAAMA,CAAuB,CAc1B,aAAc,CAZd7H,EAAA,yBAAmD,IAc3D,CAKA,OAAc,aAAsC,CAClD,OAAK6H,EAAuB,WAC1BA,EAAuB,SAAW,IAAIA,GAEjCA,EAAuB,QAChC,CAKO,eAAeF,EAAmB/H,EAAgC,CACvE,KAAK,cAAc,IAAI+H,EAAW/H,CAAM,EACxCG,EAAO,KACL,yBACA,iBACA,iBACA,uDAEJ,CAKO,WAAW4H,EAA4C,CAC5D,MAAM/H,EAAS,KAAK,cAAc,IAAI+H,CAAS,EAE/C,OAAK/H,GAULG,EAAO,KACL,yBACA,aACA,aACA,oDAEKH,IAfLG,EAAO,KACL,yBACA,aACA,aACA,sDAEK,KAUX,CAKO,UAAU4H,EAA4B,CAC3C,OAAO,KAAK,cAAc,IAAIA,CAAS,CACzC,CAKO,qBAAgC,CACrC,OAAO,MAAM,KAAK,KAAK,cAAc,MAAM,CAC7C,CAKA,OAAc,kBAAkB/H,EAAoC,CAClE,OAAKA,EAAO,mBACL,OAAO,KAAKA,EAAO,kBAAkB,EADL,EAEzC,CAKA,OAAc,aAAaA,EAAoC,CAC7D,MAAMkI,MAAgB,IAGtB,OAAIlI,EAAO,SACTA,EAAO,QAAQ,QAAQmI,GAAUD,EAAU,IAAIC,EAAO,EAAE,CAAC,EAIvDnI,EAAO,oBACT,OAAO,OAAOA,EAAO,kBAAkB,EAAE,QAAQoI,GAAqB,CACpEA,EAAkB,QAAQD,GAAUD,EAAU,IAAIC,EAAO,EAAE,CAAC,CAC9D,CAAC,EAGI,MAAM,KAAKD,CAAS,CAC7B,CAKA,OAAc,wBAAwBlI,EAA0BqI,EAA8B,CAC5F,GAAI,CAACrI,EAAO,mBAAoB,OAAO,KAGvC,MAAMsI,EAAoB,OAAO,QAAQtI,EAAO,kBAAkB,EAC/D,IAAI,CAAC,CAACkB,EAAKqH,CAAO,IAAM,SACvB,MAAMC,IAAWC,GAAApJ,EAAAkJ,EAAQ,CAAC,IAAT,YAAAlJ,EAAY,sBAAZ,YAAAoJ,EAAiC,WAAY,EAC9D,MAAO,CAAE,IAAAvH,EAAK,SAAAsH,CAAA,CAChB,CAAC,EACA,KAAK,CAACnH,EAAGC,IAAMD,EAAE,SAAWC,EAAE,QAAQ,EAGzC,QAAS,EAAIgH,EAAkB,OAAS,EAAG,GAAK,EAAG,IAAK,CACtD,MAAMI,EAAaJ,EAAkB,CAAC,EACtC,GAAID,GAASK,EAAW,SACtB,OAAOA,EAAW,GAEtB,CAEA,OAAO,IACT,CAKA,OAAc,sBAAsB1I,EAA0BqI,EAAoB,CAEhF,GAAIrI,EAAO,mBAAoB,CAC7B,MAAM2I,EAAoB,KAAK,wBAAwB3I,EAAQqI,CAAK,EACpE,GAAIM,GAAqB3I,EAAO,mBAAmB2I,CAAiB,EAClE,MAAO,CACL,WAAYA,EACZ,QAAS3I,EAAO,mBAAmB2I,CAAiB,EACpD,QAAS3I,EAAO,SAAW,EAAC,CAGlC,CAIA,OAAO,IACT,CAKA,OAAc,gBACZA,EACA4I,EACAP,EACY,CAEZ,GAAIrI,EAAO,QAAS,CAClB,MAAM6I,EAAgB7I,EAAO,QAAQ,KAAKmI,GAAUA,EAAO,KAAOS,CAAQ,EAC1E,GAAIC,EACF,OAAOA,EAAc,gBAEzB,CAGA,GAAI7I,EAAO,mBAAoB,CAC7B,MAAM2I,EAAoB,KAAK,wBAAwB3I,EAAQqI,CAAK,EACpE,GAAIM,GAAqB3I,EAAO,mBAAmB2I,CAAiB,EAAG,CACrE,MAAMR,EAASnI,EAAO,mBAAmB2I,CAAiB,EAAE,KAC1DR,GAAUA,EAAO,KAAOS,CAAA,EAE1B,GAAIT,EACF,OAAOA,EAAO,gBAElB,CACF,CAEA,OAAO,IACT,CAKA,OAAc,kCACZnI,EACA4I,EACkC,CAClC,MAAML,EAA4C,GAGlD,GAAIvI,EAAO,QAAS,CAClB,MAAM6I,EAAgB7I,EAAO,QAAQ,KAAKmI,GAAUA,EAAO,KAAOS,CAAQ,EACtEC,IACFN,EAAQ,QAAUM,EAAc,iBAEpC,CAGA,OAAI7I,EAAO,oBACT,OAAO,QAAQA,EAAO,kBAAkB,EAAE,QAAQ,CAAC,CAAC8I,EAAeC,CAAY,IAAM,CACnF,MAAMZ,EAASY,EAAa,KAAKZ,GAAUA,EAAO,KAAOS,CAAQ,EAC7DT,IACFI,EAAQO,CAAa,EAAIX,EAAO,iBAEpC,CAAC,EAGII,CACT,CAKA,OAAc,0BAA0BvI,EAA0B4I,EAA2B,CAE3F,OAAI5I,EAAO,SAAWA,EAAO,QAAQ,KAAKmI,GAAUA,EAAO,KAAOS,CAAQ,EACjE,GAIL5I,EAAO,mBACF,OAAO,OAAOA,EAAO,kBAAkB,EAAE,QAC9CuI,EAAQ,KAAKJ,GAAUA,EAAO,KAAOS,CAAQ,GAI1C,EACT,CAKA,OAAc,kBAAkB5I,EAI9B,CACA,MAAMgJ,EAAc,KAAK,kBAAkBhJ,CAAM,EAC3CkI,EAAY,KAAK,aAAalI,CAAM,EAE1C,MAAO,CACL,YAAAgJ,EACA,YAAad,EAAU,OACvB,WAAY,CAAC,CAAClI,EAAO,SAAWA,EAAO,QAAQ,OAAS,EAE5D,CAKA,OAAc,iBAAiBqI,EAAqC,CAClE,OAAOA,GAAS,KAAO,UAAY,QACrC,CAKA,OAAc,wBAAyB,CACrC,OAAOtI,EAAA,GAAK,KAAK,qBACnB,CAKA,OAAc,eAAeC,EAI3B,CACA,MAAMC,EAAmB,GACnBgJ,EAAqB,GAG3B,OAAKjJ,EAAO,mBAIV,OAAO,QAAQA,EAAO,kBAAkB,EAAE,QAAQ,CAAC,CAAC8I,EAAeP,CAAO,IAAM,CACzE,MAAM,QAAQA,CAAO,EAGxBA,EAAQ,QAAQ,CAACJ,EAAQe,IAAU,CAC5Bf,EAAO,IACVlI,EAAO,KAAK,mBAAmBiJ,CAAK,mBAAmBJ,CAAa,cAAc,EAE/EX,EAAO,qBACVlI,EAAO,KACL,mBAAmBiJ,CAAK,mBAAmBJ,CAAa,iCAGvDX,EAAO,kBACVlI,EAAO,KACL,mBAAmBiJ,CAAK,mBAAmBJ,CAAa,6BAG9D,CAAC,EAhBD7I,EAAO,KAAK,eAAe6I,CAAa,oBAAoB,CAkBhE,CAAC,EAvBD7I,EAAO,KAAK,qCAAqC,EA2B/CD,EAAO,SAAW,CAAC,MAAM,QAAQA,EAAO,OAAO,GACjDC,EAAO,KAAK,qCAAqC,EAG5C,CACL,QAASA,EAAO,SAAW,EAC3B,OAAAA,EACA,SAAAgJ,CAAA,CAEJ,CAKF,EAjUE7I,EADW6H,EACI,YAIf7H,EALW6H,EAKa,uBAAuB,CAC7C,GAAI,CAAE,SAAU,EAAG,SAAU,IAAK,KAAM,eACxC,GAAI,CAAE,SAAU,IAAK,SAAU,IAAK,KAAM,SAC1C,GAAI,CAAE,SAAU,IAAK,SAAU,IAAK,KAAM,UAC1C,GAAI,CAAE,SAAU,IAAK,SAAU,KAAM,KAAM,SAC3C,GAAI,CAAE,SAAU,KAAM,SAAU,KAAM,KAAM,eAC5C,IAAK,CAAE,SAAU,KAAM,SAAU,OAAW,KAAM,oBAAoB,GAXnE,IAAMkB,GAANlB,EChDA,IAAKmB,QACVA,EAAA,UAAY,YACZA,EAAA,MAAQ,QACRA,EAAA,KAAO,OACPA,EAAA,OAAS,SACTA,EAAA,qBAAuB,uBACvBA,EAAA,MAAQ,QANEA,QAAA,IAmDL,MAAMC,EAAN,MAAMA,CAAwB,CAI3B,aAAc,CAFdjJ,EAAA,yBAA8C,IAItD,CAKA,OAAc,aAAuC,CACnD,OAAKiJ,EAAwB,WAC3BA,EAAwB,SAAW,IAAIA,GAElCA,EAAwB,QACjC,CAKO,eAAetB,EAAmB/H,EAA2B,CAClE,KAAK,cAAc,IAAI+H,EAAW/H,CAAM,EACxCG,EAAO,KACL,0BACA,iBACA,iBACA,4CAEJ,CAKO,WAAW4H,EAAuC,CACvD,MAAM/H,EAAS,KAAK,cAAc,IAAI+H,CAAS,EAE/C,OAAK/H,GAULG,EAAO,KACL,0BACA,aACA,aACA,yCAEKH,IAfLG,EAAO,KACL,0BACA,aACA,aACA,2CAEK,KAUX,CAKO,UAAU4H,EAA4B,CAC3C,OAAO,KAAK,cAAc,IAAIA,CAAS,CACzC,CAKO,qBAAgC,CACrC,OAAO,MAAM,KAAK,KAAK,cAAc,MAAM,CAC7C,CAKO,eAAeA,EAAmBa,EAAgD,CACvF,MAAM5I,EAAS,KAAK,cAAc,IAAI+H,CAAS,EAC/C,GAAK/H,EAEL,OAAO,KAAK,wBAAwBA,EAAO,YAAa4I,CAAQ,CAClE,CAKQ,wBACNU,EACAV,EAC8B,CAC9B,UAAW/B,KAAOyC,EAAS,CACzB,GAAIzC,EAAI,KAAO+B,EAAU,OAAO/B,EAEhC,GAAIA,EAAI,SAAS,OAAS,EAAG,CAC3B,MAAM0C,EAAQ,KAAK,wBAAwB1C,EAAI,SAAU+B,CAAQ,EACjE,GAAIW,EAAO,OAAOA,CACpB,CACF,CAEF,CAKO,kBAAkBxB,EAAuC,CAC9D,MAAM/H,EAAS,KAAK,cAAc,IAAI+H,CAAS,EAC/C,OAAO/H,EAASA,EAAO,YAAc,EACvC,CACF,EAxGEI,EADWiJ,EACI,YADV,IAAMG,GAANH,EC/CA,IAAKI,OACVA,EAAA,MAAQ,QACRA,EAAA,MAAQ,QACRA,EAAA,OAAS,SACTA,EAAA,KAAO,OACPA,EAAA,MAAQ,QACRA,EAAA,KAAO,OACPA,EAAA,IAAM,MACNA,EAAA,KAAO,OACPA,EAAA,OAAS,SACTA,EAAA,OAAS,SAVCA,OAAA,IAgBAC,OACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,OAAS,SACTA,EAAA,OAAS,SACTA,EAAA,OAAS,SACTA,EAAA,SAAW,WANDA,OAAA,IAYAC,OACVA,EAAA,SAAW,WACXA,EAAA,KAAO,OACPA,EAAA,OAAS,SACTA,EAAA,IAAM,MACNA,EAAA,WAAa,aALHA,OAAA,ICzBAC,OACVA,EAAA,MAAQ,QACRA,EAAA,GAAK,KACLA,EAAA,MAAQ,QACRA,EAAA,QAAU,UACVA,EAAA,KAAO,OACPA,EAAA,OAAS,SANCA,OAAA,IAYAC,OACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,OAAS,SACTA,EAAA,OAAS,SACTA,EAAA,SAAW,WALDA,OAAA,ICVL,MAAMC,EAAwB,CAmBnC,YAAYC,EAAiBC,EAAkBC,EAAsBC,EAA0B,CAlBtF9J,EAAA,gBACAA,EAAA,iBACAA,EAAA,kBAETA,EAAA,mBACAA,EAAA,oBACAA,EAAA,kBACAA,EAAA,kBACAA,EAAA,sBACAA,EAAA,8BACAA,EAAA,yBACAA,EAAA,sBAEiBA,EAAA,cAAiBiH,EAAO,eAMvC,KAAK,QAAU0C,EACf,KAAK,SAAWC,EAChB,KAAK,UAAYC,EACjB,KAAK,YAAcC,EAGnB,KAAK,WAAaR,EAAW,QAC7B,KAAK,UAAY,KACjB,KAAK,UAAY,EACjB,KAAK,cAAgB,EACrB,KAAK,sBAAwB,KAAK,MAClC,KAAK,iBAAmB,EACxB,KAAK,cAAgB,GAErB,KAAK,OAAO,MAAM,QAAS,cAAe,kBAAkBK,CAAO,GAAI,CACrE,SAAAC,EACA,UAAAC,EACA,SAAUC,EAAY,SACvB,CACH,CAKA,cAAcC,EAAyB,CACrC,MAAMC,EAAgB,KAAK,WAC3B,YAAK,WAAaD,EAElB,KAAK,OAAO,MAAM,QAAS,gBAAiB,kBAAkBC,CAAa,MAAMD,CAAK,GAAI,CACxF,QAAS,KAAK,QACd,SAAU,KAAK,SAChB,EAEM,IACT,CAKA,eAAenK,EAA2B,CACxC,YAAK,YAAcA,EAEnB,KAAK,OAAO,MAAM,QAAS,iBAAkB,wBAAyB,CACpE,QAAS,KAAK,QACd,SAAU,KAAK,SACf,SAAUA,EAAO,SACjB,QAASA,EAAO,QACjB,EAEM,IACT,CAKA,aAAaoB,EAAqB,CAChC,YAAK,UAAYA,EACjB,KAAK,sBAAwB,KAAK,MAClC,KAAK,mBAEL,KAAK,OAAO,MAAM,QAAS,eAAgB,eAAgB,CACzD,QAAS,KAAK,QACd,SAAU,KAAK,SACf,SAAU,OAAOA,EACjB,YAAa,KAAK,iBACnB,EAEM,IACT,CAKA,aAAaW,EAAoB,CAC/B,YAAK,UAAYA,EAEjB,KAAK,OAAO,MAAM,QAAS,eAAgB,eAAgB,CACzD,QAAS,KAAK,QACd,SAAU,KAAK,SACf,KAAAA,CAAA,CACD,EAEM,IACT,CAKA,iBAAiBsI,EAAoB,CACnC,YAAK,cAAgBA,EAErB,KAAK,OAAO,MAAM,QAAS,mBAAoB,oBAAqB,CAClE,QAAS,KAAK,QACd,SAAU,KAAK,SACf,SAAUA,CAAA,CACX,EAEM,IACT,CAKA,yBAAyBA,EAAoB,CAC3C,YAAK,sBAAwBA,EAE7B,KAAK,OAAO,MAAM,QAAS,2BAA4B,6BAA8B,CACnF,QAAS,KAAK,QACd,SAAU,KAAK,SACf,aAAcA,CAAA,CACf,EAEM,IACT,CAKA,oBAAoBvI,EAAqB,CACvC,YAAK,iBAAmBA,EAExB,KAAK,OAAO,MAAM,QAAS,sBAAuB,uBAAwB,CACxE,QAAS,KAAK,QACd,SAAU,KAAK,SACf,YAAaA,CAAA,CACd,EAEM,IACT,CAKA,iBAAiBmF,EAAyC,CACxD,YAAK,cAAgBlH,IAAA,GAAK,KAAK,eAAkBkH,GAEjD,KAAK,OAAO,MAAM,QAAS,mBAAoB,mBAAoB,CACjE,QAAS,KAAK,QACd,SAAU,KAAK,SACf,aAAc,OAAO,KAAKA,CAAQ,EACnC,EAEM,IACT,CAKA,eAA4B,CAC1B,OAAO,KAAK,UACd,CAKA,gBAA8B,CAC5B,OAAO,KAAK,WACd,CAKA,cAAwB,CACtB,YAAK,sBAAwB,KAAK,MAClC,KAAK,mBAEL,KAAK,OAAO,MAAM,QAAS,eAAgB,gBAAiB,CAC1D,QAAS,KAAK,QACd,SAAU,KAAK,SACf,YAAa,KAAK,iBACnB,EAEM,KAAK,SACd,CAKA,cAAuB,CACrB,OAAO,KAAK,SACd,CAKA,kBAA2B,CACzB,OAAO,KAAK,aACd,CAKA,0BAAmC,CACjC,OAAO,KAAK,qBACd,CAKA,qBAA8B,CAC5B,OAAO,KAAK,gBACd,CAKA,kBAA4C,CAC1C,OAAO,KAAK,aACd,CAKM,WAA2B,QAAA1E,EAAA,sBAC/B,GAAI,KAAK,aAAemH,EAAW,OACjC,YAAK,OAAO,MAAM,QAAS,YAAa,uBAAwB,CAC9D,QAAS,KAAK,QACd,SAAU,KAAK,SAChB,EACM,KAGT,GAAI,KAAK,aAAeA,EAAW,QACjC,YAAK,OAAO,KAAK,QAAS,YAAa,wBAAyB,CAC9D,QAAS,KAAK,QACd,SAAU,KAAK,SAChB,EACM,KAGT,GAAI,CACF,KAAK,cAAcA,EAAW,OAAO,EACrC,MAAMY,EAAY,KAAK,MAEvB,KAAK,OAAO,KAAK,QAAS,YAAa,sBAAuB,CAC5D,QAAS,KAAK,QACd,SAAU,KAAK,SACf,UAAW,KAAK,UAChB,KAAM,KAAK,YAAY,KACxB,EAGD,MAAM,KAAK,kBAEX,MAAMC,EAAW,KAAK,MAAQD,EAC9B,YAAK,iBAAiBC,CAAQ,EAC9B,KAAK,cAAcb,EAAW,MAAM,EAEpC,KAAK,OAAO,KAAK,QAAS,YAAa,4BAA6B,CAClE,QAAS,KAAK,QACd,SAAU,KAAK,SACf,SAAAa,CAAA,CACD,EAEM,IACT,OAAS1K,EAAO,CACd,WAAK,cAAc6J,EAAW,MAAM,EAEpC,KAAK,OAAO,MAAM,QAAS,YAAa,oBAAqB,CAC3D,QAAS,KAAK,QACd,SAAU,KAAK,SACf,MAAO7J,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEKA,CACR,CACF,GAKM,aAA6B,QAAA0C,EAAA,sBACjC,GAAI,KAAK,aAAemH,EAAW,QACjC,YAAK,OAAO,MAAM,QAAS,cAAe,mBAAoB,CAC5D,QAAS,KAAK,QACd,SAAU,KAAK,SAChB,EACM,KAGT,GAAI,CACF,YAAK,OAAO,KAAK,QAAS,cAAe,kBAAmB,CAC1D,QAAS,KAAK,QACd,SAAU,KAAK,SAChB,EAGD,KAAK,UAAY,KACjB,KAAK,UAAY,EACjB,KAAK,cAAgB,EACrB,KAAK,cAAcA,EAAW,OAAO,EAErC,KAAK,OAAO,KAAK,QAAS,cAAe,8BAA+B,CACtE,QAAS,KAAK,QACd,SAAU,KAAK,SAChB,EAEM,IACT,OAAS7J,EAAO,CACd,WAAK,OAAO,MAAM,QAAS,cAAe,sBAAuB,CAC/D,QAAS,KAAK,QACd,SAAU,KAAK,SACf,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEKA,CACR,CACF,GAKA,eAAyB,CACvB,OAAO,KAAK,aAAe6J,EAAW,MACxC,CAKA,eAAyB,CACvB,OAAO,KAAK,aAAeA,EAAW,MACxC,CAKA,oBAA8B,CAC5B,OAAO,KAAK,YAAY,OAC1B,CAKA,aAAsB,CACpB,OAAO,KAAK,YAAY,IAC1B,CAKA,YAAqB,CACnB,MAAMc,EAAc,IAAIV,GACtB,GAAG,KAAK,OAAO,UAAU,KAAK,KAAK,GACnC,GAAG,KAAK,QAAQ,SAChB,KAAK,UACL/J,EAAA,GAAK,KAAK,YAAY,EAIxB,OAAAyK,EAAY,iBAAiB,KAAK,aAAa,EAE/C,KAAK,OAAO,MAAM,QAAS,aAAc,eAAgB,CACvD,WAAY,KAAK,QACjB,SAAUA,EAAY,QACtB,SAAU,KAAK,SAChB,EAEMA,CACT,CAKA,cAAqB,CACnB,KAAK,OAAO,KAAK,QAAS,eAAgB,kBAAmB,CAC3D,QAAS,KAAK,QACd,SAAU,KAAK,SAChB,EAGD,KAAK,UAAY,KACjB,KAAK,UAAY,EACjB,KAAK,cAAgB,EACrB,KAAK,iBAAmB,EACxB,KAAK,cAAgB,GACrB,KAAK,cAAcd,EAAW,QAAQ,CACxC,CAKc,iBAAiC,QAAAnH,EAAA,sBAC7C,OAAQ,KAAK,WACX,KAAKkH,EAAU,MACb,MAAM,KAAK,iBACX,MACF,KAAKA,EAAU,MACb,MAAM,KAAK,iBACX,MACF,KAAKA,EAAU,OACb,MAAM,KAAK,kBACX,MACF,KAAKA,EAAU,KACb,MAAM,KAAK,gBACX,MACF,KAAKA,EAAU,MACb,MAAM,KAAK,iBACX,MACF,KAAKA,EAAU,KACb,MAAM,KAAK,gBACX,MACF,KAAKA,EAAU,IACb,MAAM,KAAK,eACX,MACF,KAAKA,EAAU,KACb,MAAM,KAAK,gBACX,MACF,KAAKA,EAAU,OACb,MAAM,KAAK,kBACX,MACF,KAAKA,EAAU,OACb,MAAM,KAAK,kBACX,MACF,QACE,MAAM,IAAI,MAAM,2BAA2B,KAAK,SAAS,EAAE,EAEjE,GAKc,gBAAgC,QAAAlH,EAAA,sBAE5C,MAAM,IAAI,QAAQ4C,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGrD,KAAK,UAAY,CACf,KAAM,QACN,IAAK,KAAK,YAAY,KACtB,MAAO,KACP,OAAQ,KACR,OAAQ,OAGV,KAAK,UAAY,KAAO,IAC1B,GAKc,gBAAgC,QAAA5C,EAAA,sBAE5C,MAAM,IAAI,QAAQ4C,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGrD,KAAK,UAAY,CACf,KAAM,QACN,IAAK,KAAK,YAAY,KACtB,SAAU,GACV,OAAQ,OAGV,KAAK,UAAY,IAAM,IACzB,GAKc,iBAAiC,QAAA5C,EAAA,sBAE7C,MAAM,IAAI,QAAQ4C,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGrD,KAAK,UAAY,CACf,KAAM,SACN,IAAK,KAAK,YAAY,KACtB,OAAQ,GACR,WAAY,GACZ,YAAa,IAGf,KAAK,UAAY,IAAM,IACzB,GAKc,eAA+B,QAAA5C,EAAA,sBAE3C,MAAM,IAAI,QAAQ4C,GAAW,WAAWA,EAAS,EAAE,CAAC,EAGpD,KAAK,UAAY,CACf,KAAM,OACN,IAAK,KAAK,YAAY,KACtB,OAAQ,QACR,OAAQ,UAGV,KAAK,UAAY,GAAK,IACxB,GAKc,gBAAgC,QAAA5C,EAAA,sBAE5C,MAAM,IAAI,QAAQ4C,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGrD,KAAK,UAAY,CACf,KAAM,QACN,IAAK,KAAK,YAAY,KACtB,SAAU,GACV,MAAO,KACP,OAAQ,KACR,OAAQ,OAGV,KAAK,UAAY,GAAK,KAAO,IAC/B,GAKc,eAA+B,QAAA5C,EAAA,sBAE3C,MAAM,IAAI,QAAQ4C,GAAW,WAAWA,EAAS,EAAE,CAAC,EAGpD,KAAK,UAAY,CACf,KAAM,OACN,IAAK,KAAK,YAAY,KACtB,KAAM,CAAE,KAAM,OAAO,EAGvB,KAAK,UAAY,EAAI,IACvB,GAKc,cAA8B,QAAA5C,EAAA,sBAE1C,MAAM,IAAI,QAAQ4C,GAAW,WAAWA,EAAS,EAAE,CAAC,EAGpD,KAAK,UAAY,CACf,KAAM,MACN,IAAK,KAAK,YAAY,KACtB,KAAM,kCAGR,KAAK,UAAY,EAAI,IACvB,GAKc,eAA+B,QAAA5C,EAAA,sBAE3C,MAAM,IAAI,QAAQ4C,GAAW,WAAWA,EAAS,EAAE,CAAC,EAGpD,KAAK,UAAY,CACf,KAAM,OACN,IAAK,KAAK,YAAY,KACtB,QAAS,qBAGX,KAAK,UAAY,GACnB,GAKc,iBAAiC,QAAA5C,EAAA,sBAE7C,MAAM,IAAI,QAAQ4C,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGrD,KAAK,UAAY,CACf,KAAM,SACN,IAAK,KAAK,YAAY,KACtB,KAAM,MAGR,KAAK,UAAY,IACnB,GAKc,iBAAiC,QAAA5C,EAAA,sBAE7C,MAAM,IAAI,QAAQ4C,GAAW,WAAWA,EAAS,EAAE,CAAC,EAGpD,KAAK,UAAY,CACf,KAAM,SACN,IAAK,KAAK,YAAY,KACtB,WAAY,KAAK,cAAc,YAAc,WAG/C,KAAK,UAAY,EAAI,IACvB,GACF,CC5lBO,MAAMsF,EAAsC,CAcjD,YAAYC,EAAmBC,EAAwC,CAb9DvK,EAAA,kBAETA,EAAA,sBACAA,EAAA,0BACAA,EAAA,wBAEiBA,EAAA,cAAiBiH,EAAO,eACxBjH,EAAA,6BAA0D,KAC1DA,EAAA,qBAA0B,IAMzC,KAAK,UAAYsK,EAGjB,KAAK,cAAgB3K,EAAA,CACnB,iBAAkB,GAClB,cAAe,GACf,cAAe,GACf,gBAAiB4J,EAAc,OAC/B,eAAgB,GAChB,aAAc,GACd,SAAU,IACPgB,GAIL,KAAK,kBAAoB,CACvB,aAAc,EACd,cAAe,GACf,YAAa,EACb,gBAAiB,EACjB,eAAgB,EAChB,mBAAoB,EACpB,iBAAkB,GAGpB,KAAK,gBAAkB,GAGvB,KAAK,qCAEL,KAAK,OAAO,MAAM,eAAgB,cAAe,oBAAoBD,CAAS,GAAI,CAChF,UAAAA,EACA,iBAAkB,KAAK,cAAc,iBACrC,cAAe,KAAK,cAAc,cAClC,gBAAiB,KAAK,cAAc,gBACrC,CACH,CAKA,iBAAiB1K,EAA6B,CAC5C,YAAK,cAAgBA,EAErB,KAAK,OAAO,MAAM,eAAgB,mBAAoB,wBAAyB,CAC7E,UAAW,KAAK,UAChB,iBAAkBA,EAAO,iBACzB,cAAeA,EAAO,cACtB,gBAAiBA,EAAO,gBACzB,EAEM,IACT,CAKA,mBAAmBiH,EAAyC,CAC1D,YAAK,gBAAkBlH,IAAA,GAAK,KAAK,iBAAoBkH,GAErD,KAAK,OAAO,MAAM,eAAgB,qBAAsB,mBAAoB,CAC1E,UAAW,KAAK,UAChB,aAAc,OAAO,KAAKA,CAAQ,EACnC,EAEM,IACT,CAKA,kBAAkC,CAChC,OAAO,KAAK,aACd,CAKA,sBAA0C,CACxC,OAAO,KAAK,iBACd,CAKA,oBAA8C,CAC5C,OAAO,KAAK,eACd,CAKM,YAAY3E,EAAgD,QAAAC,EAAA,sBAChE,MAAM+H,EAAY,KAAK,MAEvB,GAAI,CASF,GARA,KAAK,OAAO,KAAK,eAAgB,cAAe,iBAAkB,CAChE,UAAW,KAAK,UAChB,UAAWhI,EAAQ,UACnB,SAAUA,EAAQ,SAClB,UAAWA,EAAQ,UACpB,EAGG,CAAC,KAAK,qBAAqBA,EAAQ,SAAS,EAC9C,MAAM,IAAI,MAAM,2BAA2BA,EAAQ,SAAS,EAAE,EAIhE,MAAMsI,EAAU,KAAK,kBAAkB,IAAItI,EAAQ,SAAS,EAC5D,GAAI,CAACsI,EACH,MAAM,IAAI,MAAM,yCAAyCtI,EAAQ,SAAS,EAAE,EAI9E,MAAMuI,EAAQ,MAAMD,EAAQtI,CAAO,EAGnC,YAAK,yBAAyBA,EAAQ,UAAWgI,CAAS,EAE1D,KAAK,OAAO,KAAK,eAAgB,cAAe,6BAA8B,CAC5E,UAAW,KAAK,UAChB,QAASO,EAAM,QACf,SAAUA,EAAM,SAChB,UAAWA,EAAM,UACjB,aAAc,KAAK,MAAQP,CAAA,CAC5B,EAEMO,CACT,OAAShL,EAAO,CACd,WAAK,kBAAkB,qBAEvB,KAAK,OAAO,MAAM,eAAgB,cAAe,wBAAyB,CACxE,UAAW,KAAK,UAChB,UAAWyC,EAAQ,UACnB,SAAUA,EAAQ,SAClB,MAAOzC,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEKA,CACR,CACF,GAKM,sBAAsBG,EAAsC,QAAAuC,EAAA,sBAChE,MAAM+H,EAAY,KAAK,MAEvB,GAAI,CASF,GARA,KAAK,OAAO,KAAK,eAAgB,wBAAyB,6BAA8B,CACtF,UAAW,KAAK,UAChB,UAAWtK,EAAO,KAClB,SAAUA,EAAO,IACjB,UAAWA,EAAO,KACnB,EAGG,KAAK,cAAc,kBAEjB,EADY,MAAM,KAAK,oBAAoBA,CAAM,GAEnD,MAAM,IAAI,MAAM,wCAAwCA,EAAO,GAAG,EAAE,EAKxE,MAAMsC,EAAgC,CACpC,UAAWtC,EAAO,KAClB,SAAUA,EAAO,IACjB,UAAWA,EAAO,KAClB,SAAUA,EAAO,SACjB,QAASA,EAAO,QAChB,MAAOA,EAAO,MACd,SAAUA,EAAO,UAIb6K,EAAQ,MAAM,KAAK,YAAYvI,CAAO,EAE5C,YAAK,OAAO,KACV,eACA,wBACA,yCACA,CACE,UAAW,KAAK,UAChB,QAASuI,EAAM,QACf,SAAUA,EAAM,SAChB,aAAc,KAAK,MAAQP,CAAA,CAC7B,EAGKO,CACT,OAAShL,EAAO,CACd,WAAK,OAAO,MACV,eACA,wBACA,oCACA,CACE,UAAW,KAAK,UAChB,SAAUG,EAAO,IACjB,MAAOH,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGIA,CACR,CACF,GAKM,WAAWgL,EAAeC,EAAkC,QAAAvI,EAAA,sBAChE,MAAM+H,EAAY,KAAK,MAEvB,GAAI,CACF,KAAK,OAAO,KAAK,eAAgB,aAAc,gBAAiB,CAC9D,UAAW,KAAK,UAChB,gBAAiBO,EAAM,QACvB,iBAAkBA,EAAM,SACxB,OAAAC,CAAA,CACD,EAGD,MAAMN,EAAcK,EAAM,aAG1B,OAAIC,GAGF,KAAK,OAAO,KAAK,eAAgB,aAAc,kCAAmC,CAChF,UAAW,KAAK,UAChB,YAAaD,EAAM,SACnB,aAAcC,CAAA,CACf,EAIH,KAAK,kBAAkB,cACvB,KAAK,kBAAkB,iBAAmB,KAAK,MAE/C,KAAK,OAAO,KAAK,eAAgB,aAAc,4BAA6B,CAC1E,UAAW,KAAK,UAChB,gBAAiBD,EAAM,QACvB,cAAeL,EAAY,QAC3B,UAAW,KAAK,MAAQF,CAAA,CACzB,EAEME,CACT,OAAS3K,EAAO,CACd,WAAK,OAAO,MAAM,eAAgB,aAAc,uBAAwB,CACtE,UAAW,KAAK,UAChB,gBAAiBgL,EAAM,QACvB,MAAOhL,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEKA,CACR,CACF,GAKM,eAAegL,EAAe7K,EAA+C,QAAAuC,EAAA,sBACjF,GAAI,CACF,KAAK,OAAO,KAAK,eAAgB,iBAAkB,oBAAqB,CACtE,UAAW,KAAK,UAChB,QAASsI,EAAM,QACf,SAAUA,EAAM,SAChB,WAAY,OAAO,KAAK7K,CAAM,EAC/B,EAGD,MAAM+K,EAAgBF,EAAM,iBACtB9G,EAAyBhE,IAAA,GAC1BgL,GACA/K,GAIL,GAAI,KAAK,cAAc,kBAEjB,EADY,MAAM,KAAK,oBAAoB+D,CAAS,GAEtD,MAAM,IAAI,MAAM,wCAAwC8G,EAAM,QAAQ,EAAE,EAK5E,OAAAA,EAAM,eAAe9G,CAAS,EAG9B,KAAK,kBAAkB,kBAEvB,KAAK,OAAO,KAAK,eAAgB,iBAAkB,gCAAiC,CAClF,UAAW,KAAK,UAChB,QAAS8G,EAAM,QACf,SAAUA,EAAM,SACjB,EAEMA,CACT,OAAShL,EAAO,CACd,WAAK,OAAO,MAAM,eAAgB,iBAAkB,6BAA8B,CAChF,UAAW,KAAK,UAChB,QAASgL,EAAM,QACf,MAAOhL,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEKA,CACR,CACF,GAKM,oBAAoBG,EAAuC,QAAAuC,EAAA,sBAC/D,GAAI,CAQF,OAPA,KAAK,OAAO,MAAM,eAAgB,sBAAuB,0BAA2B,CAClF,UAAW,KAAK,UAChB,SAAUvC,EAAO,IACjB,UAAWA,EAAO,KACnB,EAGG,CAACA,EAAO,KAAO,OAAOA,EAAO,KAAQ,UACvC,KAAK,OAAO,KAAK,eAAgB,sBAAuB,oBAAqB,CAC3E,UAAW,KAAK,UAChB,IAAKA,EAAO,IACb,EACD,KAAK,kBAAkB,qBAChB,IAGL,CAACA,EAAO,MAAQ,OAAOA,EAAO,MAAS,UACzC,KAAK,OAAO,KAAK,eAAgB,sBAAuB,qBAAsB,CAC5E,UAAW,KAAK,UAChB,KAAMA,EAAO,KACd,EACD,KAAK,kBAAkB,qBAChB,IAGJ,OAAO,OAAOyJ,CAAS,EAAE,SAASzJ,EAAO,IAAI,EAS7C,OAAO,OAAO2J,CAAa,EAAE,SAAS3J,EAAO,QAAQ,EAStD,OAAOA,EAAO,SAAY,WAC5B,KAAK,OAAO,KAAK,eAAgB,sBAAuB,wBAAyB,CAC/E,UAAW,KAAK,UAChB,QAASA,EAAO,QACjB,EACD,KAAK,kBAAkB,qBAChB,IAGL,OAAOA,EAAO,OAAU,WAC1B,KAAK,OAAO,KAAK,eAAgB,sBAAuB,sBAAuB,CAC7E,UAAW,KAAK,UAChB,MAAOA,EAAO,MACf,EACD,KAAK,kBAAkB,qBAChB,KAIT,KAAK,kBAAkB,iBAEvB,KAAK,OAAO,MAAM,eAAgB,sBAAuB,iCAAkC,CACzF,UAAW,KAAK,UAChB,SAAUA,EAAO,IAClB,EAEM,KAlCL,KAAK,OAAO,KAAK,eAAgB,sBAAuB,yBAA0B,CAChF,UAAW,KAAK,UAChB,SAAUA,EAAO,SAClB,EACD,KAAK,kBAAkB,qBAChB,KAdP,KAAK,OAAO,KAAK,eAAgB,sBAAuB,qBAAsB,CAC5E,UAAW,KAAK,UAChB,KAAMA,EAAO,KACd,EACD,KAAK,kBAAkB,qBAChB,GAuCX,OAASH,EAAO,CACd,YAAK,kBAAkB,qBAEvB,KAAK,OAAO,MAAM,eAAgB,sBAAuB,iCAAkC,CACzF,UAAW,KAAK,UAChB,SAAUG,EAAO,IACjB,MAAOH,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEM,EACT,CACF,GAKA,yBAAyBoK,EAAsBW,EAAiC,CAC9E,YAAK,kBAAkB,IAAIX,EAAWW,CAAO,EAE7C,KAAK,OAAO,MAAM,eAAgB,2BAA4B,gCAAiC,CAC7F,UAAW,KAAK,UAChB,UAAAX,CAAA,CACD,EAEM,IACT,CAKA,2BAA2BA,EAA4B,CAGrD,OAFgB,KAAK,kBAAkB,OAAOA,CAAS,EAGrD,KAAK,OAAO,MACV,eACA,6BACA,kCACA,CACE,UAAW,KAAK,UAChB,UAAAA,CAAA,CACF,EAGF,KAAK,OAAO,KACV,eACA,6BACA,+BACA,CACE,UAAW,KAAK,UAChB,UAAAA,CAAA,CACF,EAIG,IACT,CAKA,qBAAqBA,EAA+B,CAClD,OAAO,KAAK,kBAAkB,IAAIA,CAAS,CAC7C,CAKA,wBAAsC,CACpC,OAAO,MAAM,KAAK,KAAK,kBAAkB,MAAM,CACjD,CAKA,oBAAoBA,EAA+C,CACjE,OAAO,KAAK,kBAAkB,IAAIA,CAAS,GAAK,IAClD,CAKM,aAAa3H,EAAoD,QAAAC,EAAA,sBACrE,KAAK,OAAO,KAAK,eAAgB,eAAgB,2BAA4B,CAC3E,UAAW,KAAK,UAChB,MAAOD,EAAQ,OAChB,EAED,MAAM0I,EAAmB1I,EAAQ,OAAc,KAAK,YAAY2I,CAAM,CAAC,EACjEC,EAAS,MAAM,QAAQ,WAAWF,CAAgB,EAElDG,EAA6B,GAC7BC,EAA0BF,EAAO,UAAiBG,EAAO,SAAW,UAAU,EAAE,OAEtF,UAAWA,KAAUH,EACfG,EAAO,SAAW,aACpBF,EAAiB,KAAKE,EAAO,KAAK,EAItC,YAAK,OAAO,KAAK,eAAgB,eAAgB,qCAAsC,CACrF,UAAW,KAAK,UAChB,MAAO/I,EAAQ,OACf,WAAY6I,EAAiB,OAC7B,OAAQC,CAAA,CACT,EAEMD,CACT,GAKM,wBAAwBG,EAA2C,QAAA/I,EAAA,sBACvE,KAAK,OAAO,KACV,eACA,0BACA,wCACA,CACE,UAAW,KAAK,UAChB,MAAO+I,EAAQ,OACjB,EAGF,MAAMN,EAAmBM,EAAQ,OAAc,KAAK,sBAAsBtL,CAAM,CAAC,EAC3EkL,EAAS,MAAM,QAAQ,WAAWF,CAAgB,EAElDG,EAA6B,GAC7BC,EAA0BF,EAAO,UAAiBG,EAAO,SAAW,UAAU,EAAE,OAEtF,UAAWA,KAAUH,EACfG,EAAO,SAAW,aACpBF,EAAiB,KAAKE,EAAO,KAAK,EAItC,YAAK,OAAO,KACV,eACA,0BACA,kDACA,CACE,UAAW,KAAK,UAChB,MAAOC,EAAQ,OACf,WAAYH,EAAiB,OAC7B,OAAQC,CAAA,CACV,EAGKD,CACT,GAKA,uBAKE,CACA,MAAMI,EAAe,KAAK,kBAAkB,aACtCC,EAAgBD,EAAe,KAAK,kBAAkB,mBACtDE,EAAcD,EAAgB,EAAKD,EAAeC,EAAiB,IAAM,IAEzEE,EACJ,KAAK,cAAc,OAAS,EACxB,KAAK,cAAc,OAAO,CAACjH,EAAK4F,IAAS5F,EAAM4F,EAAM,CAAC,EAAI,KAAK,cAAc,OAC7E,EAEAsB,EAAkB,KAAK,0BAE7B,MAAO,CACL,aAAAJ,EACA,YAAAE,EACA,oBAAAC,EACA,gBAAAC,CAAA,CAEJ,CAKA,cAAqB,CACnB,YAAK,OAAO,KAAK,eAAgB,eAAgB,mBAAoB,CACnE,UAAW,KAAK,UACjB,EAGD,KAAK,kBAAoB,CACvB,aAAc,EACd,cAAe,GACf,YAAa,EACb,gBAAiB,EACjB,eAAgB,EAChB,mBAAoB,EACpB,iBAAkB,GAIpB,KAAK,cAAc,OAAS,EAG5B,KAAK,gBAAkB,GAEvB,KAAK,OAAO,KAAK,eAAgB,eAAgB,kBAAmB,CAClE,UAAW,KAAK,UACjB,EAEM,IACT,CAKA,cAAcC,EAAyB,CAGrC,KAAK,OAAO,MAAM,eAAgB,gBAAiB,kBAAmB,CACpE,UAAW,KAAK,UAChB,UAAAA,CAAA,CACD,CACH,CAKQ,oCAA2C,CAEjD,MAAMC,EAAa,OAAO,OAAOpC,CAAS,EAE1C,UAAWQ,KAAa4B,EACtB,KAAK,yBAAyB5B,EAAW,KAAK,mBAAmB,KAAK,IAAI,CAAC,EAG7E,KAAK,OAAO,MACV,eACA,qCACA,0CACA,CACE,UAAW,KAAK,UAChB,eAAgB4B,EAAW,OAC7B,CAEJ,CAKc,mBAAmBvJ,EAAgD,QAAAC,EAAA,sBAC/E,MAAM2H,EAA2B,CAC/B,IAAK5H,EAAQ,SACb,KAAMA,EAAQ,UACd,KAAMA,EAAQ,UACd,SAAUA,EAAQ,UAAY,KAAK,cAAc,gBACjD,QAASA,EAAQ,UAAY,OAAYA,EAAQ,QAAU,KAAK,cAAc,eAC9E,MAAOA,EAAQ,QAAU,OAAYA,EAAQ,MAAQ,KAAK,cAAc,aACxE,SAAUA,EAAQ,UAAY,EAAC,EAG3ByH,EAAU,GAAG,KAAK,SAAS,IAAIzH,EAAQ,QAAQ,IAAI,KAAK,KAAK,GACnE,OAAO,IAAIwH,GAAMC,EAASzH,EAAQ,SAAUA,EAAQ,UAAW4H,CAAW,CAC5E,GAKQ,yBAAyBD,EAAsBK,EAAyB,CAC9E,MAAMwB,EAAe,KAAK,MAAQxB,EAElC,KAAK,kBAAkB,eACvB,KAAK,kBAAkB,cAAcL,CAAS,GAC3C,KAAK,kBAAkB,cAAcA,CAAS,GAAK,GAAK,EAC3D,KAAK,kBAAkB,iBAAmB,KAAK,MAG/C,KAAK,cAAc,KAAK6B,CAAY,EAChC,KAAK,cAAc,OAAS,KAC9B,KAAK,cAAc,OAEvB,CAKQ,yBAAqC,CAC3C,IAAIH,EAAkBlC,EAAU,MAC5BsC,EAAW,EAEf,SAAW,CAAC9B,EAAWnI,CAAK,IAAK,OAAO,QAAQ,KAAK,kBAAkB,aAAa,EAC9EA,EAAQiK,IACVA,EAAWjK,EACX6J,EAAkB1B,GAItB,OAAO0B,CACT,CACF,CCnsBO,MAAMK,EAAoC,CAe/C,YAAYC,EAAkBC,EAAwBC,EAA4B,CAdzE/L,EAAA,iBACAA,EAAA,mBAETA,EAAA,oBACAA,EAAA,qBACAA,EAAA,qBACAA,EAAA,uBACAA,EAAA,uBAEiBA,EAAA,cAAiBiH,EAAO,eAMvC,KAAK,SAAW4E,EAChB,KAAK,WAAaC,EAClB,KAAK,aAAeC,EAGpB,KAAK,YAActC,EAAY,QAC/B,KAAK,iBAAmB,IACxB,KAAK,eAAiB,CACpB,YAAa,EACb,aAAc,EACd,aAAc,EACd,WAAY,EACZ,uBAAwB,GAE1B,KAAK,eAAiB,GAEtB,KAAK,OAAO,MAAM,cAAe,cAAe,mBAAmBoC,CAAQ,GAAI,CAC7E,WAAAC,EACA,SAAUC,EAAa,SACxB,CACH,CAKA,eAAehC,EAA0B,CACvC,MAAMC,EAAgB,KAAK,YAC3B,YAAK,YAAcD,EAEnB,KAAK,OAAO,MACV,cACA,iBACA,kBAAkBC,CAAa,MAAMD,CAAK,GAC1C,CACE,SAAU,KAAK,SACf,WAAY,KAAK,WACnB,EAGK,IACT,CAKA,gBAAgBnK,EAA4B,CAC1C,YAAK,aAAeA,EAEpB,KAAK,OAAO,MAAM,cAAe,kBAAmB,wBAAyB,CAC3E,SAAU,KAAK,SACf,WAAY,KAAK,WACjB,SAAUA,EAAO,SACjB,QAASA,EAAO,QACjB,EAEM,IACT,CAKA,kBAAkBiH,EAAyC,CACzD,YAAK,eAAiBlH,IAAA,GAAK,KAAK,gBAAmBkH,GAEnD,KAAK,OAAO,MAAM,cAAe,oBAAqB,mBAAoB,CACxE,SAAU,KAAK,SACf,WAAY,KAAK,WACjB,aAAc,OAAO,KAAKA,CAAQ,EACnC,EAEM,IACT,CAKA,gBAA8B,CAC5B,OAAO,KAAK,WACd,CAKA,iBAAgC,CAC9B,OAAO,KAAK,YACd,CAKA,iBAAuC,CACrC,OAAO,KAAK,YACd,CAKA,mBAAoC,CAClC,OAAO,KAAK,cACd,CAKA,mBAA6C,CAC3C,OAAO,KAAK,cACd,CAKA,SAAS4D,EAAqB,CAC5B,YAAK,aAAa,IAAIA,EAAM,SAAUA,CAAK,EAC3C,KAAK,iBAEL,KAAK,OAAO,MAAM,cAAe,WAAY,wBAAyB,CACpE,SAAU,KAAK,SACf,SAAUA,EAAM,SAChB,UAAWA,EAAM,UACjB,YAAa,KAAK,aAAa,KAChC,EAEM,IACT,CAKA,YAAYb,EAAwB,CAElC,OADgB,KAAK,aAAa,OAAOA,CAAQ,GAE/C,KAAK,iBAEL,KAAK,OAAO,MAAM,cAAe,cAAe,4BAA6B,CAC3E,SAAU,KAAK,SACf,SAAAA,EACA,YAAa,KAAK,aAAa,KAChC,GAED,KAAK,OAAO,KAAK,cAAe,cAAe,4BAA6B,CAC1E,SAAU,KAAK,SACf,SAAAA,CAAA,CACD,EAGI,IACT,CAKA,SAASA,EAAiC,CACxC,MAAMa,EAAQ,KAAK,aAAa,IAAIb,CAAQ,GAAK,KAEjD,YAAK,OAAO,MAAM,cAAe,WAAY,8BAA+B,CAC1E,SAAU,KAAK,SACf,SAAAA,EACA,MAAOa,IAAU,KAClB,EAEMA,CACT,CAKA,gBAAgBZ,EAAgC,CAC9C,MAAMiB,EAAS,MAAM,KAAK,KAAK,aAAa,QAAQ,EAAE,OACpDL,GAASA,EAAM,YAAcZ,CAAA,EAG/B,YAAK,OAAO,MAAM,cAAe,kBAAmB,0BAA2B,CAC7E,SAAU,KAAK,SACf,UAAAA,EACA,MAAOiB,EAAO,OACf,EAEMA,CACT,CAKM,YAA4B,QAAA3I,EAAA,sBAChC,GAAI,KAAK,cAAgBsH,EAAY,OACnC,YAAK,OAAO,MAAM,cAAe,aAAc,wBAAyB,CACtE,SAAU,KAAK,SAChB,EACM,KAGT,GAAI,KAAK,cAAgBA,EAAY,QACnC,YAAK,OAAO,KAAK,cAAe,aAAc,yBAA0B,CACtE,SAAU,KAAK,SAChB,EACM,KAGT,GAAI,CACF,KAAK,eAAeA,EAAY,OAAO,EACvC,MAAMS,EAAY,KAAK,MAEvB,KAAK,OAAO,KAAK,cAAe,aAAc,uBAAwB,CACpE,SAAU,KAAK,SACf,WAAY,KAAK,WACjB,YAAa,KAAK,aAAa,KAChC,EAGD,MAAM,KAAK,gBAEX,MAAMC,EAAW,KAAK,MAAQD,EAC9B,YAAK,eAAeT,EAAY,MAAM,EAEtC,KAAK,OAAO,KAAK,cAAe,aAAc,6BAA8B,CAC1E,SAAU,KAAK,SACf,SAAAU,EACA,aAAc,KAAK,eAAe,aAClC,aAAc,KAAK,eAAe,aACnC,EAEM,IACT,OAAS1K,EAAO,CACd,WAAK,eAAegK,EAAY,MAAM,EAEtC,KAAK,OAAO,MAAM,cAAe,aAAc,qBAAsB,CACnE,SAAU,KAAK,SACf,MAAOhK,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEKA,CACR,CACF,GAKM,cAA8B,QAAA0C,EAAA,sBAClC,GAAI,KAAK,cAAgBsH,EAAY,QACnC,YAAK,OAAO,MAAM,cAAe,eAAgB,oBAAqB,CACpE,SAAU,KAAK,SAChB,EACM,KAGT,GAAI,CACF,YAAK,OAAO,KAAK,cAAe,eAAgB,mBAAoB,CAClE,SAAU,KAAK,SACf,YAAa,KAAK,aAAa,KAChC,EAGD,MAAM,KAAK,kBAEX,KAAK,eAAeA,EAAY,OAAO,EACvC,KAAK,gBAEL,KAAK,OAAO,KAAK,cAAe,eAAgB,+BAAgC,CAC9E,SAAU,KAAK,SAChB,EAEM,IACT,OAAShK,EAAO,CACd,WAAK,OAAO,MAAM,cAAe,eAAgB,uBAAwB,CACvE,SAAU,KAAK,SACf,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEKA,CACR,CACF,GAKA,gBAA0B,CACxB,OAAO,KAAK,cAAgBgK,EAAY,MAC1C,CAKA,iBAA2B,CACzB,OAAO,KAAK,cAAgBA,EAAY,OAC1C,CAKA,eAAwB,CACtB,IAAIuC,EAAY,EAChB,UAAWvB,KAAS,MAAM,KAAK,KAAK,aAAa,QAAQ,EACvDuB,GAAavB,EAAM,eAGrB,YAAK,OAAO,MAAM,cAAe,gBAAiB,yBAA0B,CAC1E,SAAU,KAAK,SACf,UAAAuB,CAAA,CACD,EAEMA,CACT,CAKA,qBAA8B,CAC5B,OAAO,KAAK,aAAa,IAC3B,CAKA,aAA4B,CAC1B,MAAMC,EAAe,IAAIL,GAAY,GAAG,KAAK,QAAQ,UAAU,KAAK,KAAK,GAAI,KAAK,WAAYjM,EAAA,GACzF,KAAK,aACT,EAGDsM,EAAa,kBAAkB,KAAK,cAAc,EAGlD,UAAWxB,KAAS,MAAM,KAAK,KAAK,aAAa,QAAQ,EAAG,CAC1D,MAAML,EAAcK,EAAM,aAC1BwB,EAAa,SAAS7B,CAAW,CACnC,CAEA,YAAK,OAAO,MAAM,cAAe,cAAe,gBAAiB,CAC/D,WAAY,KAAK,SACjB,SAAU6B,EAAa,SACvB,WAAY,KAAK,aAAa,KAC/B,EAEMA,CACT,CAKA,eAAsB,CACpB,KAAK,OAAO,KAAK,cAAe,gBAAiB,mBAAoB,CACnE,SAAU,KAAK,SACf,WAAY,KAAK,aAAa,KAC/B,EAGD,UAAWxB,KAAS,MAAM,KAAK,KAAK,aAAa,QAAQ,EACvDA,EAAM,eAIR,KAAK,aAAa,QAClB,KAAK,eAAiB,GACtB,KAAK,gBACL,KAAK,eAAehB,EAAY,QAAQ,CAC1C,CAKc,eAA+B,QAAAtH,EAAA,sBAE3C,MAAM+J,EADS,MAAM,KAAK,KAAK,aAAa,QAAQ,EACxB,OAAa,KAAK,gBAAgBzB,CAAK,CAAC,EAEpE,MAAM,QAAQ,WAAWyB,CAAY,EACrC,KAAK,gBACP,GAKc,iBAAiC,QAAA/J,EAAA,sBAE7C,MAAMgK,EADS,MAAM,KAAK,KAAK,aAAa,QAAQ,EACtB,OAAa,KAAK,kBAAkB1B,CAAK,CAAC,EAExE,MAAM,QAAQ,WAAW0B,CAAc,EACvC,KAAK,gBACP,GAKc,gBAAgB1B,EAA8B,QAAAtI,EAAA,sBAC1D,GAAI,CACF,MAAMsI,EAAM,YACZ,KAAK,OAAO,MAAM,cAAe,kBAAmB,4BAA6B,CAC/E,SAAU,KAAK,SACf,SAAUA,EAAM,SACjB,CACH,OAAShL,EAAO,CACd,KAAK,OAAO,MAAM,cAAe,kBAAmB,oBAAqB,CACvE,SAAU,KAAK,SACf,SAAUgL,EAAM,SAChB,MAAOhL,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,CACH,CACF,GAKc,kBAAkBgL,EAA8B,QAAAtI,EAAA,sBAC5D,GAAI,CACF,MAAMsI,EAAM,cACZ,KAAK,OAAO,MAAM,cAAe,oBAAqB,8BAA+B,CACnF,SAAU,KAAK,SACf,SAAUA,EAAM,SACjB,CACH,OAAShL,EAAO,CACd,KAAK,OAAO,MAAM,cAAe,oBAAqB,sBAAuB,CAC3E,SAAU,KAAK,SACf,SAAUgL,EAAM,SAChB,MAAOhL,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,CACH,CACF,GAKQ,gBAAuB,CAC7B,MAAM2M,EAAc,KAAK,aAAa,KACtC,IAAIC,EAAe,EACfC,EAAe,EAEnB,UAAW7B,KAAS,MAAM,KAAK,KAAK,aAAa,QAAQ,EACnDA,EAAM,gBACR4B,IACS5B,EAAM,kBAAoB,UACnC6B,IAIJ,MAAMC,EAAaH,EAAc,EAAI,KAAK,MAAOC,EAAeD,EAAe,GAAG,EAAI,EAChFI,EAAyB,KAAK,gCAAgCH,EAAcD,CAAW,EAE7F,KAAK,eAAiB,CACpB,YAAAA,EACA,aAAAC,EACA,aAAAC,EACA,WAAAC,EACA,uBAAAC,CAAA,EAGF,KAAK,OAAO,MAAM,cAAe,iBAAkB,mBAAoB,CACrE,SAAU,KAAK,SACf,YAAAJ,EACA,aAAAC,EACA,aAAAC,EACA,WAAAC,CAAA,CACD,CACH,CAKQ,eAAsB,CAC5B,KAAK,eAAiB,CACpB,YAAa,EACb,aAAc,EACd,aAAc,EACd,WAAY,EACZ,uBAAwB,EAE5B,CAKQ,gCAAgCF,EAAsBD,EAA6B,CACzF,OAAIC,IAAiB,GAAKD,IAAgB,EACjC,GAKeA,EAAcC,GADd,GAI1B,CACF,CCpeO,MAAMI,EAAkD,CAc7D,YAAYC,EAAyBC,EAAoD,CAbhF3M,EAAA,wBAETA,EAAA,4BACAA,EAAA,gCACAA,EAAA,8BAEiBA,EAAA,cAAiBiH,EAAO,eACxBjH,EAAA,8BAA6D,KAC7DA,EAAA,qBAA0B,IAMzC,KAAK,gBAAkB0M,EAGvB,KAAK,oBAAsB/M,EAAA,CACzB,iBAAkB,GAClB,cAAe,GACf,cAAe,GACf,gBAAiB4J,EAAc,OAC/B,eAAgB,GAChB,aAAc,GACd,cAAe,IAAM,KAAO,KAC5B,SAAU,IACPoD,GAIL,KAAK,wBAA0B,CAC7B,aAAc,EACd,cAAe,GACf,YAAa,EACb,gBAAiB,EACjB,eAAgB,EAChB,mBAAoB,EACpB,iBAAkB,GAGpB,KAAK,sBAAwB,GAG7B,KAAK,sCAEL,KAAK,OAAO,MACV,qBACA,cACA,2BAA2BD,CAAe,GAC1C,CACE,gBAAAA,EACA,iBAAkB,KAAK,oBAAoB,iBAC3C,cAAe,KAAK,oBAAoB,cACxC,gBAAiB,KAAK,oBAAoB,gBAC1C,cAAe,KAAK,oBAAoB,cAC1C,CAEJ,CAKA,uBAAuB9M,EAAmC,CACxD,YAAK,oBAAsBA,EAE3B,KAAK,OAAO,MAAM,qBAAsB,yBAA0B,wBAAyB,CACzF,gBAAiB,KAAK,gBACtB,iBAAkBA,EAAO,iBACzB,cAAeA,EAAO,cACtB,gBAAiBA,EAAO,gBACxB,cAAeA,EAAO,cACvB,EAEM,IACT,CAKA,yBAAyBiH,EAAyC,CAChE,YAAK,sBAAwBlH,IAAA,GAAK,KAAK,uBAA0BkH,GAEjE,KAAK,OAAO,MAAM,qBAAsB,2BAA4B,mBAAoB,CACtF,gBAAiB,KAAK,gBACtB,aAAc,OAAO,KAAKA,CAAQ,EACnC,EAEM,IACT,CAKA,wBAA8C,CAC5C,OAAO,KAAK,mBACd,CAKA,4BAAsD,CACpD,OAAO,KAAK,uBACd,CAKA,0BAAoD,CAClD,OAAO,KAAK,qBACd,CAKM,aAAa3E,EAAuD,QAAAC,EAAA,sBACxE,MAAM+H,EAAY,KAAK,MAEvB,GAAI,CASF,GARA,KAAK,OAAO,KAAK,qBAAsB,eAAgB,kBAAmB,CACxE,gBAAiB,KAAK,gBACtB,WAAYhI,EAAQ,WACpB,SAAUA,EAAQ,SAClB,WAAYA,EAAQ,WACrB,EAGG,CAAC,KAAK,sBAAsBA,EAAQ,UAAU,EAChD,MAAM,IAAI,MAAM,4BAA4BA,EAAQ,UAAU,EAAE,EAIlE,MAAMsI,EAAU,KAAK,mBAAmB,IAAItI,EAAQ,UAAU,EAC9D,GAAI,CAACsI,EACH,MAAM,IAAI,MAAM,0CAA0CtI,EAAQ,UAAU,EAAE,EAIhF,MAAM0K,EAAS,MAAMpC,EAAQtI,CAAO,EAGpC,YAAK,yBAAyBA,EAAQ,WAAYgI,CAAS,EAE3D,KAAK,OAAO,KAAK,qBAAsB,eAAgB,8BAA+B,CACpF,gBAAiB,KAAK,gBACtB,SAAU0C,EAAO,SACjB,WAAYA,EAAO,WACnB,aAAc,KAAK,MAAQ1C,CAAA,CAC5B,EAEM0C,CACT,OAASnN,EAAO,CACd,WAAK,wBAAwB,qBAE7B,KAAK,OAAO,MAAM,qBAAsB,eAAgB,yBAA0B,CAChF,gBAAiB,KAAK,gBACtB,WAAYyC,EAAQ,WACpB,SAAUA,EAAQ,SAClB,MAAOzC,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEKA,CACR,CACF,GAKM,uBAAuBG,EAA6C,QAAAuC,EAAA,sBACxE,MAAM+H,EAAY,KAAK,MAEvB,GAAI,CAcF,GAbA,KAAK,OAAO,KACV,qBACA,yBACA,8BACA,CACE,gBAAiB,KAAK,gBACtB,WAAYtK,EAAO,WACnB,SAAUA,EAAO,SACjB,WAAYA,EAAO,WACrB,EAIE,KAAK,oBAAoB,kBAEvB,EADY,MAAM,KAAK,qBAAqBA,CAAM,GAEpD,MAAM,IAAI,MAAM,wCAAwCA,EAAO,QAAQ,EAAE,EAK7E,MAAMsC,EAAiC,CACrC,WAAYtC,EAAO,WACnB,SAAUA,EAAO,SACjB,WAAYA,EAAO,WACnB,SAAUA,EAAO,SACjB,QAASA,EAAO,QAChB,MAAOA,EAAO,MACd,OAAQ,GACR,SAAUA,EAAO,UAIbgN,EAAS,MAAM,KAAK,aAAa1K,CAAO,EAE9C,YAAK,OAAO,KACV,qBACA,yBACA,0CACA,CACE,gBAAiB,KAAK,gBACtB,SAAU0K,EAAO,SACjB,aAAc,KAAK,MAAQ1C,CAAA,CAC7B,EAGK0C,CACT,OAASnN,EAAO,CACd,WAAK,OAAO,MACV,qBACA,yBACA,qCACA,CACE,gBAAiB,KAAK,gBACtB,SAAUG,EAAO,SACjB,MAAOH,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGIA,CACR,CACF,GAKM,YAAYmN,EAAsBC,EAAuC,QAAA1K,EAAA,sBAC7E,MAAM+H,EAAY,KAAK,MAEvB,GAAI,CACF,KAAK,OAAO,KAAK,qBAAsB,cAAe,iBAAkB,CACtE,gBAAiB,KAAK,gBACtB,iBAAkB0C,EAAO,SACzB,MAAAC,CAAA,CACD,EAGD,MAAMZ,EAAeW,EAAO,cAG5B,YAAK,wBAAwB,cAC7B,KAAK,wBAAwB,iBAAmB,KAAK,MAErD,KAAK,OAAO,KAAK,qBAAsB,cAAe,6BAA8B,CAClF,gBAAiB,KAAK,gBACtB,iBAAkBA,EAAO,SACzB,eAAgBX,EAAa,SAC7B,UAAW,KAAK,MAAQ/B,CAAA,CACzB,EAEM+B,CACT,OAASxM,EAAO,CACd,WAAK,OAAO,MAAM,qBAAsB,cAAe,wBAAyB,CAC9E,gBAAiB,KAAK,gBACtB,iBAAkBmN,EAAO,SACzB,MAAOnN,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEKA,CACR,CACF,GAKM,gBACJmN,EACAhN,EACuB,QAAAuC,EAAA,sBACvB,GAAI,CACF,KAAK,OAAO,KAAK,qBAAsB,kBAAmB,qBAAsB,CAC9E,gBAAiB,KAAK,gBACtB,SAAUyK,EAAO,SACjB,WAAY,OAAO,KAAKhN,CAAM,EAC/B,EAGD,MAAM+K,EAAgBiC,EAAO,kBACvBjJ,EAA0BhE,IAAA,GAC3BgL,GACA/K,GAIL,GAAI,KAAK,oBAAoB,kBAEvB,EADY,MAAM,KAAK,qBAAqB+D,CAAS,GAEvD,MAAM,IAAI,MAAM,wCAAwCiJ,EAAO,QAAQ,EAAE,EAK7E,OAAAA,EAAO,gBAAgBjJ,CAAS,EAGhC,KAAK,wBAAwB,kBAE7B,KAAK,OAAO,KAAK,qBAAsB,kBAAmB,iCAAkC,CAC1F,gBAAiB,KAAK,gBACtB,SAAUiJ,EAAO,SAClB,EAEMA,CACT,OAASnN,EAAO,CACd,WAAK,OAAO,MAAM,qBAAsB,kBAAmB,8BAA+B,CACxF,gBAAiB,KAAK,gBACtB,SAAUmN,EAAO,SACjB,MAAOnN,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEKA,CACR,CACF,GAKM,qBAAqBG,EAAwC,QAAAuC,EAAA,sBACjE,GAAI,CAQF,OAPA,KAAK,OAAO,MAAM,qBAAsB,uBAAwB,2BAA4B,CAC1F,gBAAiB,KAAK,gBACtB,SAAUvC,EAAO,SACjB,WAAYA,EAAO,WACpB,EAGG,CAACA,EAAO,UAAY,OAAOA,EAAO,UAAa,UACjD,KAAK,OAAO,KAAK,qBAAsB,uBAAwB,oBAAqB,CAClF,gBAAiB,KAAK,gBACtB,SAAUA,EAAO,SAClB,EACD,KAAK,wBAAwB,qBACtB,IAGL,CAACA,EAAO,YAAc,OAAOA,EAAO,YAAe,UACrD,KAAK,OAAO,KAAK,qBAAsB,uBAAwB,sBAAuB,CACpF,gBAAiB,KAAK,gBACtB,WAAYA,EAAO,WACpB,EACD,KAAK,wBAAwB,qBACtB,IAGJ,OAAO,OAAO4J,CAAU,EAAE,SAAS5J,EAAO,UAAU,EASpD,OAAO,OAAO2J,CAAa,EAAE,SAAS3J,EAAO,QAAQ,EAStD,OAAOA,EAAO,SAAY,WAC5B,KAAK,OAAO,KAAK,qBAAsB,uBAAwB,wBAAyB,CACtF,gBAAiB,KAAK,gBACtB,QAASA,EAAO,QACjB,EACD,KAAK,wBAAwB,qBACtB,IAGL,OAAOA,EAAO,OAAU,WAC1B,KAAK,OAAO,KAAK,qBAAsB,uBAAwB,sBAAuB,CACpF,gBAAiB,KAAK,gBACtB,MAAOA,EAAO,MACf,EACD,KAAK,wBAAwB,qBACtB,KAIT,KAAK,wBAAwB,iBAE7B,KAAK,OAAO,MACV,qBACA,uBACA,kCACA,CACE,gBAAiB,KAAK,gBACtB,SAAUA,EAAO,SACnB,EAGK,KAvCL,KAAK,OAAO,KAAK,qBAAsB,uBAAwB,0BAA2B,CACxF,gBAAiB,KAAK,gBACtB,SAAUA,EAAO,SAClB,EACD,KAAK,wBAAwB,qBACtB,KAdP,KAAK,OAAO,KAAK,qBAAsB,uBAAwB,sBAAuB,CACpF,gBAAiB,KAAK,gBACtB,WAAYA,EAAO,WACpB,EACD,KAAK,wBAAwB,qBACtB,GA4CX,OAASH,EAAO,CACd,YAAK,wBAAwB,qBAE7B,KAAK,OAAO,MACV,qBACA,uBACA,kCACA,CACE,gBAAiB,KAAK,gBACtB,SAAUG,EAAO,SACjB,MAAOH,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGK,EACT,CACF,GAKA,0BAA0BqM,EAAwBtB,EAAkC,CAClF,YAAK,mBAAmB,IAAIsB,EAAYtB,CAAO,EAE/C,KAAK,OAAO,MACV,qBACA,4BACA,iCACA,CACE,gBAAiB,KAAK,gBACtB,WAAAsB,CAAA,CACF,EAGK,IACT,CAKA,4BAA4BA,EAA8B,CAGxD,OAFgB,KAAK,mBAAmB,OAAOA,CAAU,EAGvD,KAAK,OAAO,MACV,qBACA,8BACA,mCACA,CACE,gBAAiB,KAAK,gBACtB,WAAAA,CAAA,CACF,EAGF,KAAK,OAAO,KACV,qBACA,8BACA,gCACA,CACE,gBAAiB,KAAK,gBACtB,WAAAA,CAAA,CACF,EAIG,IACT,CAKA,sBAAsBA,EAAiC,CACrD,OAAO,KAAK,mBAAmB,IAAIA,CAAU,CAC/C,CAKA,yBAAwC,CACtC,OAAO,MAAM,KAAK,KAAK,mBAAmB,MAAM,CAClD,CAKA,qBAAqBA,EAAkD,CACrE,OAAO,KAAK,mBAAmB,IAAIA,CAAU,GAAK,IACpD,CAKM,cAAc5J,EAA2D,QAAAC,EAAA,sBAC7E,KAAK,OAAO,KAAK,qBAAsB,gBAAiB,4BAA6B,CACnF,gBAAiB,KAAK,gBACtB,MAAOD,EAAQ,OAChB,EAED,MAAM0I,EAAmB1I,EAAQ,OAAc,KAAK,aAAa2I,CAAM,CAAC,EAClEiC,EAAU,MAAM,QAAQ,WAAWlC,CAAgB,EAEnDmC,EAAoC,GACpC/B,EAA0B8B,EAAQ,UAAiB7B,EAAO,SAAW,UAAU,EAAE,OAEvF,UAAWA,KAAU6B,EACf7B,EAAO,SAAW,aACpB8B,EAAkB,KAAK9B,EAAO,KAAK,EAIvC,YAAK,OAAO,KAAK,qBAAsB,gBAAiB,sCAAuC,CAC7F,gBAAiB,KAAK,gBACtB,MAAO/I,EAAQ,OACf,WAAY6K,EAAkB,OAC9B,OAAQ/B,CAAA,CACT,EAEM+B,CACT,GAKM,yBAAyB7B,EAAkD,QAAA/I,EAAA,sBAC/E,KAAK,OAAO,KACV,qBACA,2BACA,yCACA,CACE,gBAAiB,KAAK,gBACtB,MAAO+I,EAAQ,OACjB,EAGF,MAAMN,EAAmBM,EAAQ,OAAc,KAAK,uBAAuBtL,CAAM,CAAC,EAC5EkN,EAAU,MAAM,QAAQ,WAAWlC,CAAgB,EAEnDmC,EAAoC,GACpC/B,EAA0B8B,EAAQ,UAAiB7B,EAAO,SAAW,UAAU,EAAE,OAEvF,UAAWA,KAAU6B,EACf7B,EAAO,SAAW,aACpB8B,EAAkB,KAAK9B,EAAO,KAAK,EAIvC,YAAK,OAAO,KACV,qBACA,2BACA,mDACA,CACE,gBAAiB,KAAK,gBACtB,MAAOC,EAAQ,OACf,WAAY6B,EAAkB,OAC9B,OAAQ/B,CAAA,CACV,EAGK+B,CACT,GAKM,uBACJjC,EACAgB,EACAD,EACAmB,EACuB,QAAA7K,EAAA,sBACvB,MAAM+H,EAAY,KAAK,MAEvB,GAAI,CACF,KAAK,OAAO,KACV,qBACA,yBACA,8BACA,CACE,gBAAiB,KAAK,gBACtB,WAAA4B,EACA,SAAAD,EACA,WAAAmB,EACA,WAAYlC,EAAO,OACrB,EAIF,MAAM5I,EAAiC,CACrC,WAAA4J,EACA,SAAAD,EACA,WAAAmB,EACA,SAAU,KAAK,oBAAoB,gBACnC,QAAS,KAAK,oBAAoB,eAClC,MAAO,KAAK,oBAAoB,aAChC,OAAAlC,EACA,SAAU,EAAC,EAIP8B,EAAS,MAAM,KAAK,aAAa1K,CAAO,EAG9C,UAAWuI,KAASK,EAClB8B,EAAO,SAASnC,CAAK,EAGvB,YAAK,OAAO,KACV,qBACA,yBACA,0CACA,CACE,gBAAiB,KAAK,gBACtB,SAAUmC,EAAO,SACjB,WAAY9B,EAAO,OACnB,aAAc,KAAK,MAAQZ,CAAA,CAC7B,EAGK0C,CACT,OAASnN,EAAO,CACd,WAAK,OAAO,MACV,qBACA,yBACA,qCACA,CACE,gBAAiB,KAAK,gBACtB,SAAAoM,EACA,WAAYf,EAAO,OACnB,MAAOrL,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGIA,CACR,CACF,GAKA,uBAKE,CACA,MAAM0L,EAAe,KAAK,wBAAwB,aAC5CC,EAAgBD,EAAe,KAAK,wBAAwB,mBAC5DE,EAAcD,EAAgB,EAAKD,EAAeC,EAAiB,IAAM,IAEzEE,EACJ,KAAK,cAAc,OAAS,EACxB,KAAK,cAAc,OAAO,CAACjH,EAAK4F,IAAS5F,EAAM4F,EAAM,CAAC,EAAI,KAAK,cAAc,OAC7E,EAEAsB,EAAkB,KAAK,2BAE7B,MAAO,CACL,aAAAJ,EACA,YAAAE,EACA,oBAAAC,EACA,gBAAAC,CAAA,CAEJ,CAKA,oBAA2B,CACzB,YAAK,OAAO,KAAK,qBAAsB,qBAAsB,0BAA2B,CACtF,gBAAiB,KAAK,gBACvB,EAGD,KAAK,wBAA0B,CAC7B,aAAc,EACd,cAAe,GACf,YAAa,EACb,gBAAiB,EACjB,eAAgB,EAChB,mBAAoB,EACpB,iBAAkB,GAIpB,KAAK,cAAc,OAAS,EAG5B,KAAK,sBAAwB,GAE7B,KAAK,OAAO,KAAK,qBAAsB,qBAAsB,yBAA0B,CACrF,gBAAiB,KAAK,gBACvB,EAEM,IACT,CAKA,oBAAoBC,EAAyB,CAG3C,KAAK,OAAO,MAAM,qBAAsB,sBAAuB,yBAA0B,CACvF,gBAAiB,KAAK,gBACtB,UAAAA,CAAA,CACD,CACH,CAKQ,qCAA4C,CAElD,MAAMyB,EAAc,OAAO,OAAOzD,CAAU,EAE5C,UAAWsC,KAAcmB,EACvB,KAAK,0BAA0BnB,EAAY,KAAK,oBAAoB,KAAK,IAAI,CAAC,EAGhF,KAAK,OAAO,MACV,qBACA,sCACA,2CACA,CACE,gBAAiB,KAAK,gBACtB,eAAgBmB,EAAY,OAC9B,CAEJ,CAKc,oBAAoB/K,EAAuD,QAAAC,EAAA,sBACvF,MAAM4J,EAA6B,CACjC,SAAU7J,EAAQ,SAClB,WAAYA,EAAQ,WACpB,WAAYA,EAAQ,WACpB,SAAUA,EAAQ,UAAY,KAAK,oBAAoB,gBACvD,QACEA,EAAQ,UAAY,OAAYA,EAAQ,QAAU,KAAK,oBAAoB,eAC7E,MAAOA,EAAQ,QAAU,OAAYA,EAAQ,MAAQ,KAAK,oBAAoB,aAC9E,SAAUA,EAAQ,UAAY,EAAC,EAGjC,OAAO,IAAI0J,GAAY1J,EAAQ,SAAUA,EAAQ,WAAY6J,CAAY,CAC3E,GAKQ,yBAAyBD,EAAwB5B,EAAyB,CAChF,MAAMwB,EAAe,KAAK,MAAQxB,EAElC,KAAK,wBAAwB,eAC7B,KAAK,wBAAwB,cAAc4B,CAAU,GAClD,KAAK,wBAAwB,cAAcA,CAAU,GAAK,GAAK,EAClE,KAAK,wBAAwB,iBAAmB,KAAK,MAGrD,KAAK,cAAc,KAAKJ,CAAY,EAChC,KAAK,cAAc,OAAS,KAC9B,KAAK,cAAc,OAEvB,CAKQ,0BAAuC,CAC7C,IAAIH,EAAkB/B,EAAW,MAC7BmC,EAAW,EAEf,SAAW,CAACG,EAAYpK,CAAK,IAAK,OAAO,QAAQ,KAAK,wBAAwB,aAAa,EACrFA,EAAQiK,IACVA,EAAWjK,EACX6J,EAAkBO,GAItB,OAAOP,CACT,CACF,CCjxBO,MAAM2B,EAAsC,CAgBjD,YAAYC,EAAmBC,EAA6C,CAf3DpN,EAAA,cAAiBiH,EAAO,eAEzBjH,EAAA,kBACTA,EAAA,sBACAA,EAAA,qBACAA,EAAA,sBACAA,EAAA,qBACAA,EAAA,oBACAA,EAAA,0BACAA,EAAA,0BACAA,EAAA,uBAA2C,IAE1CA,EAAA,yBAAyC,KACzCA,EAAA,wBAA8C,KAGpD,KAAK,UAAYmN,EAGjB,KAAK,cAAgBxN,EAAA,CACnB,cAAe,GACf,cAAe,GACf,iBAAkB,GAClB,iBAAkB,GAClB,aAAc,IAAM,KAAO,KAC3B,YAAa,GACb,eAAgB,IAChB,cAAe,EACf,WAAY,IACZ,SAAU,IACPyN,GAIL,KAAK,wBAEL,KAAK,OAAO,KAAK,eAAgB,cAAe,wBAAyB,CACvE,UAAW,KAAK,UAChB,cAAe,KAAK,cACrB,CACH,CAKQ,uBAA8B,CAEpC,KAAK,aAAe,IAAI/C,GAAa,uBAAuB,EAC5D,KAAK,cAAgB,IAAIoC,GAAmB,wBAAwB,EAGpE,KAAK,aAAe,CAClB,QAAS,wBACT,YAAa,CAAE,QAAS,KAAK,cAAc,cAC3C,cAAe,GACf,aAAc,IAAM,EACpB,gBAAiB,IAAM,EACvB,WAAY,IAAM,CAAC,EACnB,SAAU,IAAM,GAChB,eAAgB,OAChB,WAAY,IAAM,CAAC,EACnB,kBAAmB,IAAM,CAAC,GAG5B,KAAK,YAAc,CACjB,OAAQ,uBACR,WAAY,CAAE,QAAS,KAAK,cAAc,aAC1C,aAAc,GACd,YAAa,IAAM,EACnB,eAAgB,OAChB,UAAW,IAAM,CAAC,EAClB,kBAAmB,IAAM,CAAC,EAC1B,UAAW,IAAM,CAAC,GAGpB,KAAK,kBAAoB,CACvB,aAAc,6BACd,iBAAkB,CAAE,WAAY,IAChC,mBAAoB,GACpB,oBAAsB7M,GAEb,CAAC,EAAEA,GAAUA,EAAO,KAAOA,EAAO,MAAQA,EAAO,MAE1D,qBAAuBA,GAEd,CAAC,EACNA,GACAA,EAAO,UACPA,EAAO,YACP,MAAM,QAAQA,EAAO,SAAS,GAGlC,cAAe,IAAM,GACrB,eAAgB,IAAM,GACtB,oBAAqB,IAAM,GAC3B,sBAAuB,IAAM,CAAC,GAGhC,KAAK,kBAAoB,CACvB,aAAc,6BACd,iBAAkB,CAAE,eAAgB,IACpC,mBAAoB,GACpB,cAAe,KAAO,CACpB,YAAa,EACb,aAAc,EACd,aAAc,EACd,aAAc,EACd,cAAe,EACf,cAAe,EACf,cAAe,EACf,gBAAiB,EACjB,aAAc,EACd,YAAa,IAEf,iBAAkB,IAAM,CAAC,EACzB,gBAAiB,IAAM,CAAC,EAE5B,CAKA,iBAAiBA,EAAkC,CACjD,YAAK,cAAgBD,IAAA,GAAK,KAAK,eAAkBC,GACjD,KAAK,OAAO,MAAM,eAAgB,mBAAoB,gCAAiC,CACrF,UAAW,KAAK,UAChB,OAAQ,KAAK,cACd,EACM,IACT,CAKA,gBAAgByN,EAA8B,CAC5C,YAAK,aAAeA,EACpB,KAAK,OAAO,MAAM,eAAgB,kBAAmB,oBAAqB,CACxE,UAAW,KAAK,UAChB,UAAWA,EAAQ,UACpB,EACM,IACT,CAKA,iBAAiBA,EAAoC,CACnD,YAAK,cAAgBA,EACrB,KAAK,OAAO,MAAM,eAAgB,mBAAoB,qBAAsB,CAC1E,UAAW,KAAK,UAChB,gBAAiBA,EAAQ,gBAC1B,EACM,IACT,CAKA,gBAAgBC,EAAmC,CACjD,YAAK,aAAeA,EACpB,KAAK,OAAO,MAAM,eAAgB,kBAAmB,oBAAqB,CACxE,UAAW,KAAK,UAChB,eAAgBA,EAAQ,eACzB,EACM,IACT,CAKA,eAAeA,EAAkC,CAC/C,YAAK,YAAcA,EACnB,KAAK,OAAO,MAAM,eAAgB,iBAAkB,mBAAoB,CACtE,UAAW,KAAK,UAChB,cAAeA,EAAQ,cACxB,EACM,IACT,CAKA,qBAAqBA,EAAwC,CAC3D,YAAK,kBAAoBA,EACzB,KAAK,OAAO,MAAM,eAAgB,uBAAwB,yBAA0B,CAClF,UAAW,KAAK,UAChB,oBAAqBA,EAAQ,oBAC9B,EACM,IACT,CAKA,qBAAqBA,EAAwC,CAC3D,YAAK,kBAAoBA,EACzB,KAAK,OAAO,MAAM,eAAgB,uBAAwB,yBAA0B,CAClF,UAAW,KAAK,UAChB,oBAAqBA,EAAQ,oBAC9B,EACM,IACT,CAKA,mBAAmBzG,EAAyC,CAC1D,YAAK,gBAAkBlH,IAAA,GAAK,KAAK,iBAAoBkH,GACrD,KAAK,OAAO,MAAM,eAAgB,qBAAsB,2BAA4B,CAClF,UAAW,KAAK,UAChB,SAAU,KAAK,gBAChB,EACM,IACT,CAKA,kBAAuC,CACrC,OAAOlH,EAAA,GAAK,KAAK,cACnB,CAKA,iBAAiC,CAC/B,OAAO,KAAK,YACd,CAKA,kBAAwC,CACtC,OAAO,KAAK,aACd,CAKA,iBAAsC,CACpC,OAAO,KAAK,YACd,CAKA,gBAAoC,CAClC,OAAO,KAAK,WACd,CAKA,sBAAgD,CAC9C,OAAO,KAAK,iBACd,CAKA,sBAAgD,CAC9C,OAAO,KAAK,iBACd,CAKA,oBAA8C,CAC5C,OAAOA,EAAA,GAAK,KAAK,gBACnB,CAKM,UAAUiK,EAAkB2D,EAAwD,QAAApL,EAAA,sBACxF,GAAI,CACF,MAAMsI,EAAQ,KAAK,cAAc,IAAIb,CAAQ,EAC7C,OAAKa,GASDA,EAAM,kBAKV,MAAMA,EAAM,YAERA,EAAM,gBACR,KAAK,OAAO,KAAK,eAAgB,YAAa,4BAA6B,CACzE,UAAW,KAAK,UAChB,SAAAb,EACA,UAAWa,EAAM,UACjB,UAAWA,EAAM,UAClB,EAED,KAAK,OAAO,MAAM,eAAgB,YAAa,uBAAwB,CACrE,UAAW,KAAK,UAChB,SAAAb,EACA,UAAWa,EAAM,UAClB,GAGIA,IA9BL,KAAK,OAAO,KAAK,eAAgB,YAAa,kBAAmB,CAC/D,UAAW,KAAK,UAChB,SAAAb,CAAA,CACD,EACM,KA2BX,OAASnK,EAAO,CACd,YAAK,OAAO,MAAM,eAAgB,YAAa,sBAAuB,CACpE,UAAW,KAAK,UAChB,SAAAmK,EACA,MAAOnK,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EACM,IACT,CACF,GAKM,iBAAiBoK,EAAsB3H,EAAkD,QAAAC,EAAA,sBAC7F,MAAM2I,EAAS,MAAM,KAAK,KAAK,cAAc,QAAQ,EAAE,OACrDL,GAASA,EAAM,YAAcZ,CAAA,EAEzBwC,EAAyB,GAE/B,UAAW5B,KAASK,EAAQ,CAC1B,MAAM0C,EAAc,MAAM,KAAK,UAAU/C,EAAM,SAAUvI,CAAO,EAC5DsL,GACFnB,EAAa,KAAKmB,CAAW,CAEjC,CAEA,OAAOnB,CACT,GAKM,qBACJ9G,EACArD,EACmB,QAAAC,EAAA,sBACnB,MAAM2I,EAAS,MAAM,KAAK,KAAK,cAAc,QAAQ,EAAE,OACrDL,GAASA,EAAM,YAAY,WAAalF,CAAA,EAEpC8G,EAAyB,GAE/B,UAAW5B,KAASK,EAAQ,CAC1B,MAAM0C,EAAc,MAAM,KAAK,UAAU/C,EAAM,SAAUvI,CAAO,EAC5DsL,GACFnB,EAAa,KAAKmB,CAAW,CAEjC,CAEA,OAAOnB,CACT,GAKM,WACJR,EACA0B,EAC8B,QAAApL,EAAA,sBAC9B,GAAI,CACF,MAAMyK,EAAS,KAAK,aAAa,IAAIf,CAAQ,EAC7C,OAAKe,GASDA,EAAO,mBAKX,MAAMA,EAAO,aAETA,EAAO,iBACT,KAAK,OAAO,KAAK,eAAgB,aAAc,6BAA8B,CAC3E,UAAW,KAAK,UAChB,SAAAf,EACA,WAAYe,EAAO,WACpB,EAED,KAAK,OAAO,MAAM,eAAgB,aAAc,wBAAyB,CACvE,UAAW,KAAK,UAChB,SAAAf,EACA,WAAYe,EAAO,WACpB,GAGIA,IA7BL,KAAK,OAAO,KAAK,eAAgB,aAAc,mBAAoB,CACjE,UAAW,KAAK,UAChB,SAAAf,CAAA,CACD,EACM,KA0BX,OAASpM,EAAO,CACd,YAAK,OAAO,MAAM,eAAgB,aAAc,uBAAwB,CACtE,UAAW,KAAK,UAChB,SAAAoM,EACA,MAAOpM,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EACM,IACT,CACF,GAKM,kBACJqM,EACA5J,EACyB,QAAAC,EAAA,sBACzB,MAAM2K,EAAU,MAAM,KAAK,KAAK,aAAa,QAAQ,EAAE,OACrDF,GAAUA,EAAO,aAAed,CAAA,EAE5B2B,EAAgC,GAEtC,UAAWb,KAAUE,EAAS,CAC5B,MAAMY,EAAe,MAAM,KAAK,WAAWd,EAAO,SAAU1K,CAAO,EAC/DwL,GACFD,EAAc,KAAKC,CAAY,CAEnC,CAEA,OAAOD,CACT,GAKM,YAAY7D,EAAoC,QAAAzH,EAAA,sBACpD,GAAI,CACF,MAAMsI,EAAQ,KAAK,cAAc,IAAIb,CAAQ,EAC7C,OAAKa,GAKL,MAAMA,EAAM,cAERA,EAAM,aAAenB,EAAW,SAClC,KAAK,OAAO,KAAK,eAAgB,cAAe,8BAA+B,CAC7E,UAAW,KAAK,UAChB,SAAAM,CAAA,CACD,EACM,IAGF,IAdE,EAeX,OAASnK,EAAO,CACd,YAAK,OAAO,MAAM,eAAgB,cAAe,wBAAyB,CACxE,UAAW,KAAK,UAChB,SAAAmK,EACA,MAAOnK,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EACM,EACT,CACF,GAKM,aAAaoM,EAAoC,QAAA1J,EAAA,sBACrD,GAAI,CACF,MAAMyK,EAAS,KAAK,aAAa,IAAIf,CAAQ,EAC7C,OAAKe,GAKL,MAAMA,EAAO,eAETA,EAAO,cAAgBnD,EAAY,SACrC,KAAK,OAAO,KAAK,eAAgB,eAAgB,+BAAgC,CAC/E,UAAW,KAAK,UAChB,SAAAoC,CAAA,CACD,EACM,IAGF,IAdE,EAeX,OAASpM,EAAO,CACd,YAAK,OAAO,MAAM,eAAgB,eAAgB,yBAA0B,CAC1E,UAAW,KAAK,UAChB,SAAAoM,EACA,MAAOpM,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EACM,EACT,CACF,GAKA,SAASmK,EAAiC,CACxC,OAAO,KAAK,cAAc,IAAIA,CAAQ,GAAK,IAC7C,CAKA,cAAca,EAAqB,CACjC,YAAK,cAAc,IAAIA,EAAM,SAAUA,CAAK,EAC5C,KAAK,OAAO,MAAM,eAAgB,gBAAiB,mBAAoB,CACrE,UAAW,KAAK,UAChB,SAAUA,EAAM,SAChB,UAAWA,EAAM,UAClB,EACM,IACT,CAKA,gBAAgBb,EAAwB,CAEtC,OADgB,KAAK,cAAc,OAAOA,CAAQ,GAEhD,KAAK,OAAO,MAAM,eAAgB,kBAAmB,qBAAsB,CACzE,UAAW,KAAK,UAChB,SAAAA,CAAA,CACD,EAEI,IACT,CAKA,UAAUiC,EAAuC,CAC/C,OAAO,KAAK,aAAa,IAAIA,CAAQ,GAAK,IAC5C,CAKA,cAAyB,CACvB,OAAO,MAAM,KAAK,KAAK,cAAc,QAAQ,CAC/C,CAKA,eAAgC,CAC9B,OAAO,MAAM,KAAK,KAAK,aAAa,QAAQ,CAC9C,CAKA,gBAAgBhC,EAAgC,CAC9C,OAAO,MAAM,KAAK,KAAK,cAAc,QAAQ,EAAE,OAAOY,GAASA,EAAM,YAAcZ,CAAS,CAC9F,CAKA,oBAAoBtE,EAAmC,CACrD,OAAO,MAAM,KAAK,KAAK,cAAc,QAAQ,EAAE,OAC7CkF,GAASA,EAAM,YAAY,WAAalF,CAAA,CAE5C,CAKA,iBAAiBuG,EAAwC,CACvD,OAAO,MAAM,KAAK,KAAK,aAAa,QAAQ,EAAE,OAC5Cc,GAAUA,EAAO,aAAed,CAAA,CAEpC,CAKA,cAAclC,EAA2B,CACvC,MAAMa,EAAQ,KAAK,cAAc,IAAIb,CAAQ,EAC7C,OAAOa,EAAQA,EAAM,aAAenB,EAAW,OAAS,EAC1D,CAKA,eAAeuC,EAA2B,CACxC,MAAMe,EAAS,KAAK,aAAa,IAAIf,CAAQ,EAC7C,OAAOe,EAASA,EAAO,cAAgBnD,EAAY,OAAS,EAC9D,CAKA,cAAcG,EAA2B,CACvC,MAAMa,EAAQ,KAAK,cAAc,IAAIb,CAAQ,EAC7C,OAAOa,EAAQA,EAAM,aAAenB,EAAW,OAAS,EAC1D,CAKA,eAAeuC,EAA2B,CAExC,MAAMe,EAAS,KAAK,aAAa,IAAIf,CAAQ,EAC7C,OAAOe,EAASA,EAAO,cAAgBnD,EAAY,OAAS,EAC9D,CAKA,cAAcgB,EAAwB,CACpC,GAAI,CAAC,KAAK,cAAc,kBAAoB,CAAC,KAAK,kBAChD,MAAO,GAGT,GAAI,CAGF,YAAK,kBAAkB,cAAcA,CAAK,EACnC,EACT,OAAShL,EAAO,CACd,YAAK,OAAO,MAAM,eAAgB,gBAAiB,yBAA0B,CAC3E,UAAW,KAAK,UAChB,SAAUgL,EAAM,SAChB,MAAOhL,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EACM,EACT,CACF,CAKA,eAAemN,EAA+B,CAC5C,GAAI,CAAC,KAAK,cAAc,kBAAoB,CAAC,KAAK,kBAChD,MAAO,GAGT,GAAI,CAGF,YAAK,kBAAkB,eAAeA,CAAM,EACrC,EACT,OAASnN,EAAO,CACd,YAAK,OAAO,MAAM,eAAgB,iBAAkB,0BAA2B,CAC7E,UAAW,KAAK,UAChB,SAAUmN,EAAO,SACjB,MAAOnN,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EACM,EACT,CACF,CAKA,oBAAoBqK,EAA2B,CAC7C,GAAI,CAAC,KAAK,cAAc,iBACtB,MAAO,GAGT,GAAI,CAEF,MAAO,CAAC,EAAEA,GAAeA,EAAY,KAAOA,EAAY,MAAQA,EAAY,KAC9E,OAASrK,EAAO,CACd,YAAK,OAAO,MAAM,eAAgB,sBAAuB,gCAAiC,CACxF,UAAW,KAAK,UAChB,YAAAqK,EACA,MAAOrK,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EACM,EACT,CACF,CAKA,qBAAqBsM,EAA4B,CAC/C,GAAI,CAAC,KAAK,cAAc,iBACtB,MAAO,GAGT,GAAI,CAEF,MAAO,CAAC,EACNA,GACAA,EAAa,UACbA,EAAa,YACb,MAAM,QAAQA,EAAa,SAAS,EAExC,OAAStM,EAAO,CACd,YAAK,OAAO,MAAM,eAAgB,uBAAwB,iCAAkC,CAC1F,UAAW,KAAK,UAChB,aAAAsM,EACA,MAAOtM,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EACM,EACT,CACF,CAKA,sBAA+C,CAC7C,MAAM2M,EAAc,KAAK,cAAc,KACjCC,EAAe,MAAM,KAAK,KAAK,cAAc,QAAQ,EAAE,OAC3D5B,GAASA,EAAM,aAAenB,EAAW,QACzC,OACIgD,EAAe,MAAM,KAAK,KAAK,cAAc,QAAQ,EAAE,OAC3D7B,GAASA,EAAM,aAAenB,EAAW,QACzC,OACIqE,EAAe,MAAM,KAAK,KAAK,cAAc,QAAQ,EAAE,OAC3DlD,GAASA,EAAM,aAAenB,EAAW,QACzC,OAEIsE,EAAe,KAAK,aAAa,KACjCH,EAAgB,MAAM,KAAK,KAAK,aAAa,QAAQ,EAAE,OAC3Db,GAAUA,EAAO,cAAgBnD,EAAY,QAC7C,OACIoE,EAAgB,MAAM,KAAK,KAAK,aAAa,QAAQ,EAAE,OAC3DjB,GAAUA,EAAO,cAAgBnD,EAAY,QAC7C,OACIqE,EAAgB,MAAM,KAAK,KAAK,aAAa,QAAQ,EAAE,OAC3DlB,GAAUA,EAAO,cAAgBnD,EAAY,QAC7C,OAEIsE,EAAgB,MAAM,KAAK,KAAK,cAAc,QAAQ,EAAE,OAC5D,CAAC1J,EAAKoG,IAAUpG,EAAMoG,EAAM,cAC5B,GAEIuD,EAAkB5B,EAAc,EAAI2B,EAAgB3B,EAAc,EAElEf,EAAce,EAAc,EAAKC,EAAeD,EAAe,IAAM,EACrE6B,EAAe7B,EAAc,EAAKuB,EAAevB,EAAe,IAAM,EAE5E,MAAO,CACL,YAAAA,EACA,aAAAC,EACA,aAAAC,EACA,aAAAqB,EACA,aAAAC,EACA,cAAAH,EACA,cAAAI,EACA,cAAAC,EACA,cAAAC,EACA,gBAAAC,EACA,aAAAC,EACA,YAAA5C,EACA,eAAgB,KAAK,KAAI,CAE7B,CAKA,cAAqB,CACnB,GAAI,CAEF,KAAK,cAAc,QAGnB,KAAK,aAAa,QAElB,KAAK,OAAO,KAAK,eAAgB,eAAgB,kBAAmB,CAClE,UAAW,KAAK,UACjB,CACH,OAAS5L,EAAO,CACd,KAAK,OAAO,MAAM,eAAgB,eAAgB,sBAAuB,CACvE,UAAW,KAAK,UAChB,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,CACH,CAEA,OAAO,IACT,CAKA,cAAc+L,EAAyB,CACrC,GAAI,CAEE,KAAK,cAAc,kBAAoB,KAAK,mBAC9C,KAAK,kBAAkB,wBAAwBA,CAAS,CAE5D,OAAS/L,EAAO,CACd,KAAK,OAAO,MAAM,eAAgB,gBAAiB,uBAAwB,CACzE,UAAW,KAAK,UAChB,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,CACH,CACF,CACF,CCxyBO,IAAKyO,OACVA,EAAA,eAAiB,iBACjBA,EAAA,cAAgB,gBAChBA,EAAA,eAAiB,iBACjBA,EAAA,WAAa,aACbA,EAAA,aAAe,eACfA,EAAA,WAAa,aANHA,OAAA,IAYAC,OACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,WAAa,aACbA,EAAA,UAAY,YACZA,EAAA,OAAS,SACTA,EAAA,UAAY,YANFA,OAAA,ICOAC,QACVA,EAAA,WAAa,aACbA,EAAA,SAAW,WACXA,EAAA,eAAiB,iBACjBA,EAAA,KAAO,OACPA,EAAA,OAAS,SALCA,QAAA,IA0FAC,OACVA,EAAA,OAAS,SACTA,EAAA,QAAU,UACVA,EAAA,WAAa,aACbA,EAAA,SAAW,WAJDA,OAAA,ICvGL,MAAMC,EAAoD,CAuB/D,YACEC,EACAC,EACAC,EACAC,EACAC,EACA,CA5Be3O,EAAA,cAAiBiH,EAAO,eAEzBjH,EAAA,iBACAA,EAAA,gBAETA,EAAA,oBAAkCmO,EAAkB,SACpDnO,EAAA,oBAAkCkO,EAAkB,gBACpDlO,EAAA,sBACAA,EAAA,qBACAA,EAAA,yBACAA,EAAA,wBACAA,EAAA,yBACAA,EAAA,sBAA0C,IAEzCA,EAAA,wBAA2B,GAC3BA,EAAA,sBAAyB,GACzBA,EAAA,qBAA0B,IAC1BA,EAAA,wBAAwC,KACxCA,EAAA,yBAA+C,KAC/CA,EAAA,wBAAgC,KAChCA,EAAA,yBAAiC,KASvC,KAAK,SAAWuO,EAChB,KAAK,QAAUC,EACf,KAAK,aAAeC,EACpB,KAAK,iBAAmBC,EAGxB,KAAK,cAAgB/O,EAAA,CACnB,iBAAkB,GAClB,iBAAkB,GAClB,mBAAoB,GACpB,mBAAoB,EACpB,QAAS,IACT,cAAe,EACf,WAAY,IACZ,SAAU,IACPgP,GAIL,KAAK,gBAAkB,CACrB,YAAa,EACb,aAAc,EACd,aAAc,EACd,aAAc,EACd,cAAe,EACf,cAAe,EACf,WAAY,EACZ,uBAAwB,EACxB,aAAcN,EAAgB,QAIhC,KAAK,iBAAmB,CACtB,QAAS,GACT,OAAQ,GACR,SAAU,GACV,cAAe,GACf,eAAgB,GAChB,cAAe,GACf,eAAgB,EAAC,EAInB,KAAK,iBAEL,KAAK,OAAO,KAAK,yBAA0B,cAAe,oCAAqC,CAC7F,SAAU,KAAK,SACf,QAAS,KAAK,QACd,cAAe,KAAK,cACrB,CACH,CAKA,gBAAgBtE,EAAgC,CAC9C,MAAMC,EAAgB,KAAK,aAC3B,YAAK,aAAeD,EAEpB,KAAK,OAAO,MACV,yBACA,kBACA,0BAA0BC,CAAa,MAAMD,CAAK,GAClD,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QAChB,EAGK,IACT,CAKA,gBAAgB6E,EAAgC,CAC9C,MAAMC,EAAgB,KAAK,aAC3B,YAAK,aAAeD,EAEpB,KAAK,OAAO,MACV,yBACA,kBACA,0BAA0BC,CAAa,MAAMD,CAAK,GAClD,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QAChB,EAGK,IACT,CAKA,iBAAiBhP,EAAkC,CACjD,YAAK,cAAgBA,EAErB,KAAK,OAAO,MACV,yBACA,mBACA,gCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,OAAAA,CAAA,CACF,EAGK,IACT,CAKA,gBAAgB0N,EAA8B,CAC5C,YAAK,aAAeA,EAEpB,KAAK,OAAO,MAAM,yBAA0B,kBAAmB,wBAAyB,CACtF,SAAU,KAAK,SACf,QAAS,KAAK,QACd,UAAWA,EAAQ,UACpB,EAEM,IACT,CAKA,oBAAoB1N,EAAqC,CACvD,YAAK,iBAAmBA,EAExB,KAAK,OAAO,MACV,yBACA,sBACA,oCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,cAAeA,EAAO,QACxB,EAGK,IACT,CAKA,mBAAmBkP,EAAoC,CACrD,YAAK,gBAAkBA,EAEvB,KAAK,OAAO,MAAM,yBAA0B,qBAAsB,2BAA4B,CAC5F,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAAA,CAAA,CACD,EAEM,IACT,CAKA,oBAAoBC,EAAwC,CAC1D,YAAK,iBAAmBA,EAExB,KAAK,OAAO,MACV,yBACA,sBACA,4BACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,QAASA,EAAW,QACpB,WAAYA,EAAW,OAAO,OAC9B,aAAcA,EAAW,SAAS,OACpC,EAGK,IACT,CAKA,kBAAkBlI,EAAyC,CACzD,YAAK,eAAiBA,EAEtB,KAAK,OAAO,MAAM,yBAA0B,oBAAqB,0BAA2B,CAC1F,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAAA,CAAA,CACD,EAEM,IACT,CAKA,iBAAqC,CACnC,OAAO,KAAK,YACd,CAKA,iBAAqC,CACnC,OAAO,KAAK,YACd,CAKA,kBAAuC,CACrC,OAAO,KAAK,aACd,CAKA,iBAAiC,CAC/B,OAAO,KAAK,YACd,CAKA,qBAA6C,CAC3C,OAAO,KAAK,gBACd,CAKA,aAAsB,CACpB,OAAO,KAAK,QACd,CAKA,YAAqB,CACnB,OAAO,KAAK,OACd,CAKQ,oBAAoByB,EAAuD,SACjF,MAAM1I,EAAS,KAAK,iBACdoP,GAAmB3G,GAAApJ,EAAAW,EAAO,aAAP,YAAAX,EAAmB,cAAnB,YAAAoJ,EAAiCC,GAE1D,GAAI,CAAC0G,EACH,MAAO,CAAE,OAAQ,GAAI,QAAS,EAAC,EAGjC,MAAMlE,EAASkE,EAAiB,OAC7B,OAAgBpP,EAAO,OAAO,KAAK6K,GAASA,EAAM,MAAQb,CAAQ,CAAC,EACnE,OAAO,OAAO,EAEXkD,EAAUkC,EAAiB,QAC9B,OAAgBpP,EAAO,QAAQ,KAAKgN,GAAUA,EAAO,WAAaf,CAAQ,CAAC,EAC3E,OAAO,OAAO,EAEjB,MAAO,CAAE,OAAAf,EAAQ,QAAAgC,CAAA,CACnB,CAKQ,uBAA6B,CACnC,MAAMlN,EAAS,KAAK,iBACdmP,EAAa,CACjB,QAAS,GACT,OAAQ,GACR,SAAU,GACV,cAAe,GACf,eAAgB,EAAC,EAInB,OAAKnP,EAAO,UACVmP,EAAW,OAAO,KAAK,sBAAsB,EAC7CA,EAAW,QAAU,KAGnB,CAACnP,EAAO,QAAUA,EAAO,OAAO,SAAW,IAC7CmP,EAAW,SAAS,KAAK,sBAAsB,GAG7C,CAACnP,EAAO,SAAWA,EAAO,QAAQ,SAAW,IAC/CmP,EAAW,SAAS,KAAK,uBAAuB,EAG3CA,CACT,CAKA,oBAAyC,CACvC,OAAO,KAAK,eACd,CAKA,qBAA4C,CAC1C,OAAO,KAAK,gBACd,CAKA,mBAA6C,CAC3C,OAAO,KAAK,cACd,CAKM,iBAAoC,QAAA5M,EAAA,sBACxC,KAAK,OAAO,KAAK,yBAA0B,kBAAmB,+BAAgC,CAC5F,SAAU,KAAK,SACf,QAAS,KAAK,QACf,EAED,GAAI,CACF,YAAK,iBAAmB,KAAK,MAC7B,KAAK,gBAAgBgM,EAAkB,OAAO,EAC9C,KAAK,gBAAgBD,EAAkB,cAAc,EAGrD,KAAK,iBAGD,KAAK,cAAc,mBACrB,MAAM,KAAK,sBAIb,MAAM,KAAK,qBAGP,KAAK,cAAc,mBACrB,KAAK,gBAAgBA,EAAkB,UAAU,EACjD,MAAM,KAAK,uBAIT,KAAK,cAAc,qBACrB,KAAK,gBAAgBA,EAAkB,YAAY,EACnD,MAAM,KAAK,uBAGb,KAAK,gBAAgBA,EAAkB,UAAU,EACjD,KAAK,eAAiB,KAAK,MAC3B,KAAK,gBAAgBC,EAAkB,SAAS,EAEhD,KAAK,OAAO,KACV,yBACA,kBACA,6CACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAU,KAAK,eAAiB,KAAK,iBACrC,aAAc,KAAK,aAAa,KAChC,cAAe,KAAK,cAAc,KACpC,EAGK,EACT,OAAS1O,EAAO,CACd,YAAK,eAAiB,KAAK,MAC3B,KAAK,gBAAgB0O,EAAkB,MAAM,EAC7C,KAAK,cAAc,KAAK1O,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,CAAC,EAE9E,KAAK,OAAO,MAAM,yBAA0B,kBAAmB,6BAA8B,CAC3F,SAAU,KAAK,SACf,QAAS,KAAK,QACd,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC5D,SAAU,KAAK,eAAiB,KAAK,iBACtC,EAEM,EACT,CACF,GAKM,6BAA6B6I,EAAsC,QAAAnG,EAAA,sBACvE,KAAK,OAAO,KACV,yBACA,+BACA,sCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,WAAAmG,CAAA,CACF,EAGF,GAAI,CACF,MAAM2G,EAAmB,KAAK,oBAAoB3G,CAAU,EAG5D,UAAWmC,KAASwE,EAAiB,OACnC,MAAM,KAAK,UAAUxE,EAAM,QAAQ,EAIrC,UAAWmC,KAAUqC,EAAiB,QACpC,MAAM,KAAK,WAAWrC,EAAO,QAAQ,EAGvC,YAAK,OAAO,KACV,yBACA,+BACA,wCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,WAAAtE,EACA,WAAY2G,EAAiB,OAAO,OACpC,YAAaA,EAAiB,QAAQ,OACxC,EAGK,EACT,OAASxP,EAAO,CACd,YAAK,OAAO,MACV,yBACA,+BACA,kCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,WAAA6I,EACA,MAAO7I,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGK,EACT,CACF,GAKM,oBAAuC,QAAA0C,EAAA,sBAC3C,KAAK,OAAO,KAAK,yBAA0B,qBAAsB,0BAA2B,CAC1F,SAAU,KAAK,SACf,QAAS,KAAK,QACf,EAED,GAAI,CAEF,MAAM+M,EADS,KAAK,iBACU,WAAW,SAEzC,UAAWtF,KAAYsF,GACP,MAAM,KAAK,UAAUtF,CAAQ,KAEzC,KAAK,aAAa,IAAIA,CAAQ,EAC9B,KAAK,OAAO,KACV,yBACA,qBACA,gCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAAA,CAAA,CACF,GAKN,YAAK,OAAO,KACV,yBACA,qBACA,oCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,cAAesF,EAAe,OAC9B,OAAQ,KAAK,aAAa,KAC1B,OAAQ,KAAK,aAAa,KAC5B,EAGK,EACT,OAASzP,EAAO,CACd,YAAK,OAAO,MACV,yBACA,qBACA,iCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGK,EACT,CACF,GAKM,oBAAuC,QAAA0C,EAAA,sBAC3C,KAAK,OAAO,KAAK,yBAA0B,qBAAsB,0BAA2B,CAC1F,SAAU,KAAK,SACf,QAAS,KAAK,QACf,EAED,GAAI,CAEF,MAAMgN,EADS,KAAK,iBACU,WAAW,SAEzC,UAAWvF,KAAYuF,GACP,MAAM,KAAK,UAAUvF,CAAQ,KAEzC,KAAK,aAAa,IAAIA,CAAQ,EAC9B,KAAK,OAAO,MACV,yBACA,qBACA,gCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAAA,CAAA,CACF,GAKN,YAAK,OAAO,KACV,yBACA,qBACA,oCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,cAAeuF,EAAe,OAC9B,OAAQ,KAAK,aAAa,KAC1B,OAAQ,KAAK,aAAa,KAC5B,EAGK,EACT,OAAS1P,EAAO,CACd,YAAK,OAAO,MACV,yBACA,qBACA,iCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGK,EACT,CACF,GAKM,UAAUmK,EAA0C,QAAAzH,EAAA,sBACxD,KAAK,OAAO,MAAM,yBAA0B,YAAa,gBAAiB,CACxE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAAyH,CAAA,CACD,EAED,GAAI,CACF,MAAMa,EAAQ,MAAM,KAAK,aAAa,UAAUb,CAAQ,EAExD,OAAIa,GACF,KAAK,aAAa,IAAIb,EAAUa,CAAK,EACrC,KAAK,kBAEL,KAAK,aAAa,IAAIb,CAAQ,EAGzBa,CACT,OAAShL,EAAO,CACd,YAAK,aAAa,IAAImK,CAAQ,EAC9B,KAAK,OAAO,MAAM,yBAA0B,YAAa,uBAAwB,CAC/E,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAAA,EACA,MAAOnK,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEM,IACT,CACF,GAKM,iBAAiBoK,EAAyC,QAAA1H,EAAA,sBAC9D,KAAK,OAAO,MAAM,yBAA0B,mBAAoB,yBAA0B,CACxF,SAAU,KAAK,SACf,QAAS,KAAK,QACd,UAAA0H,CAAA,CACD,EAED,GAAI,CAEF,MAAMuF,EAAiB,KAAK,aAAa,gBAAgBvF,CAAS,EAC5DiB,EAAmB,GAEzB,UAAWuE,KAAiBD,EAAgB,CAC1C,MAAM5B,EAAc,MAAM,KAAK,aAAa,UAAU6B,EAAc,QAAQ,EACxE7B,GACF1C,EAAO,KAAK0C,CAAW,CAE3B,CAEA,UAAW/C,KAASK,EAClB,KAAK,aAAa,IAAIL,EAAM,SAAUA,CAAK,EAG7C,YAAK,iBAEEK,CACT,OAASrL,EAAO,CACd,YAAK,OAAO,MACV,yBACA,mBACA,gCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,UAAAoK,EACA,MAAOpK,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGK,EACT,CACF,GAKM,qBAAqB8F,EAA4C,QAAApD,EAAA,sBACrE,KAAK,OAAO,MACV,yBACA,uBACA,6BACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAAoD,CAAA,CACF,EAGF,GAAI,CAEF,MAAM6J,EAAiB,KAAK,aAAa,oBAAoB7J,CAAQ,EAC/DuF,EAAmB,GAEzB,UAAWuE,KAAiBD,EAAgB,CAC1C,MAAM5B,EAAc,MAAM,KAAK,aAAa,UAAU6B,EAAc,QAAQ,EACxE7B,GACF1C,EAAO,KAAK0C,CAAW,CAE3B,CAEA,UAAW/C,KAASK,EAClB,KAAK,aAAa,IAAIL,EAAM,SAAUA,CAAK,EAG7C,YAAK,iBAEEK,CACT,OAASrL,EAAO,CACd,YAAK,OAAO,MACV,yBACA,uBACA,oCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAA8F,EACA,MAAO9F,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGK,EACT,CACF,GAKM,WAAWoM,EAAgD,QAAA1J,EAAA,sBAC/D,KAAK,OAAO,MAAM,yBAA0B,aAAc,iBAAkB,CAC1E,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAA0J,CAAA,CACD,EAED,GAAI,CACF,MAAMe,EAAS,MAAM,KAAK,aAAa,WAAWf,CAAQ,EAE1D,OAAIe,GACF,KAAK,cAAc,IAAIf,EAAUe,CAAM,EACvC,KAAK,kBAEL,KAAK,cAAc,IAAIf,CAAQ,EAG1Be,CACT,OAASnN,EAAO,CACd,YAAK,cAAc,IAAIoM,CAAQ,EAC/B,KAAK,OAAO,MAAM,yBAA0B,aAAc,wBAAyB,CACjF,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAAA,EACA,MAAOpM,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEM,IACT,CACF,GAKM,kBAAkBqM,EAAiD,QAAA3J,EAAA,sBACvE,KAAK,OAAO,MAAM,yBAA0B,oBAAqB,0BAA2B,CAC1F,SAAU,KAAK,SACf,QAAS,KAAK,QACd,WAAA2J,CAAA,CACD,EAED,GAAI,CAEF,MAAMwD,EAAkB,KAAK,aAAa,iBAAiBxD,CAAU,EAC/DgB,EAA0B,GAEhC,UAAWyC,KAAkBD,EAAiB,CAC5C,MAAM5B,EAAe,MAAM,KAAK,aAAa,WAAW6B,EAAe,QAAQ,EAC3E7B,GACFZ,EAAQ,KAAKY,CAAY,CAE7B,CAEA,UAAWd,KAAUE,EACnB,KAAK,cAAc,IAAIF,EAAO,SAAUA,CAAM,EAGhD,YAAK,iBAEEE,CACT,OAASrN,EAAO,CACd,YAAK,OAAO,MACV,yBACA,oBACA,iCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,WAAAqM,EACA,MAAOrM,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGK,EACT,CACF,GAKM,mBAAsC,QAAA0C,EAAA,sBAC1C,KAAK,OAAO,KAAK,yBAA0B,oBAAqB,yBAA0B,CACxF,SAAU,KAAK,SACf,QAAS,KAAK,QACf,EAED,GAAI,CAEF,UAAWyH,KAAY,MAAM,KAAK,KAAK,aAAa,MAAM,EACxD,MAAM,KAAK,YAAYA,CAAQ,EAIjC,UAAWiC,KAAY,MAAM,KAAK,KAAK,cAAc,MAAM,EACzD,MAAM,KAAK,aAAaA,CAAQ,EAIlC,YAAK,aAAa,QAClB,KAAK,cAAc,QACnB,KAAK,aAAa,QAClB,KAAK,cAAc,QAEnB,KAAK,iBAEL,KAAK,OAAO,KACV,yBACA,oBACA,qCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QAChB,EAGK,EACT,OAASpM,EAAO,CACd,YAAK,OAAO,MACV,yBACA,oBACA,gCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGK,EACT,CACF,GAKM,YAAYmK,EAAoC,QAAAzH,EAAA,sBACpD,KAAK,OAAO,MAAM,yBAA0B,cAAe,kBAAmB,CAC5E,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAAyH,CAAA,CACD,EAED,GAAI,CACF,MAAM4F,EAAU,MAAM,KAAK,aAAa,YAAY5F,CAAQ,EAE5D,OAAI4F,IACF,KAAK,aAAa,OAAO5F,CAAQ,EACjC,KAAK,aAAa,OAAOA,CAAQ,EACjC,KAAK,kBAGA4F,CACT,OAAS/P,EAAO,CACd,YAAK,OAAO,MAAM,yBAA0B,cAAe,yBAA0B,CACnF,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAAmK,EACA,MAAOnK,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEM,EACT,CACF,GAKM,aAAaoM,EAAoC,QAAA1J,EAAA,sBACrD,KAAK,OAAO,MAAM,yBAA0B,eAAgB,mBAAoB,CAC9E,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAA0J,CAAA,CACD,EAED,GAAI,CACF,MAAM2D,EAAU,MAAM,KAAK,aAAa,aAAa3D,CAAQ,EAE7D,OAAI2D,IACF,KAAK,cAAc,OAAO3D,CAAQ,EAClC,KAAK,cAAc,OAAOA,CAAQ,EAClC,KAAK,kBAGA2D,CACT,OAAS/P,EAAO,CACd,YAAK,OAAO,MAAM,yBAA0B,eAAgB,0BAA2B,CACrF,SAAU,KAAK,SACf,QAAS,KAAK,QACd,SAAAoM,EACA,MAAOpM,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEM,EACT,CACF,GAKM,qBAAqD,QAAA0C,EAAA,sBACzD,KAAK,OAAO,KAAK,yBAA0B,sBAAuB,0BAA2B,CAC3F,SAAU,KAAK,SACf,QAAS,KAAK,QACf,EAED,GAAI,CACF,MAAM4M,EAAa,KAAK,wBAGxB,SAAW,CAACnF,EAAUa,CAAK,IAAK,MAAM,KAAK,KAAK,aAAa,SAAS,GAC9D,MAAM,KAAK,aAAa,cAAcA,CAAK,IAC/CsE,EAAW,cAAc,KAAKnF,CAAQ,EAK1C,SAAW,CAACiC,EAAUe,CAAM,IAAK,MAAM,KAAK,KAAK,cAAc,SAAS,GAChE,MAAM,KAAK,aAAa,eAAeA,CAAM,IACjDmC,EAAW,eAAe,KAAKlD,CAAQ,EAK3C,MAAMjM,EAAS,KAAK,iBACpB,UAAW6P,KAAiB7P,EAAO,WAAW,SACvC,KAAK,aAAa,IAAI6P,CAAa,GACtCV,EAAW,cAAc,KAAKU,CAAa,EAI/C,OAAAV,EAAW,QACTA,EAAW,OAAO,SAAW,GAC7BA,EAAW,cAAc,SAAW,GACpCA,EAAW,cAAc,SAAW,EAEtC,KAAK,oBAAoBA,CAAU,EAEnC,KAAK,OAAO,KACV,yBACA,sBACA,oCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,QAASA,EAAW,QACpB,WAAYA,EAAW,OAAO,OAC9B,aAAcA,EAAW,SAAS,OAClC,cAAeA,EAAW,cAAc,OACxC,cAAeA,EAAW,cAAc,OAC1C,EAGKA,CACT,OAAStP,EAAO,CACd,MAAMsP,EAAmC,CACvC,QAAS,GACT,OAAQ,CAACtP,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,CAAC,EAC/D,SAAU,GACV,cAAe,GACf,eAAgB,GAChB,cAAe,GACf,eAAgB,EAAC,EAGnB,YAAK,oBAAoBsP,CAAU,EAEnC,KAAK,OAAO,MACV,yBACA,sBACA,iCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,MAAOtP,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGKsP,CACT,CACF,GAKM,qBAAwC,QAAA5M,EAAA,sBAC5C,KAAK,OAAO,KAAK,yBAA0B,sBAAuB,0BAA2B,CAC3F,SAAU,KAAK,SACf,QAAS,KAAK,QACf,EAED,GAAI,CAQF,YAAK,OAAO,KACV,yBACA,sBACA,sCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QAChB,EAGK,EACT,OAAS1C,EAAO,CACd,YAAK,OAAO,MACV,yBACA,sBACA,mCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QACd,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,EAGK,EACT,CACF,GAKM,eAAkC,QAAA0C,EAAA,sBACtC,KAAK,OAAO,KAAK,yBAA0B,gBAAiB,qBAAsB,CAChF,SAAU,KAAK,SACf,QAAS,KAAK,QACf,EAED,GAAI,CACF,YAAK,gBAAgBgM,EAAkB,SAAS,EAGhD,MAAM,KAAK,oBAEX,KAAK,OAAO,KACV,yBACA,gBACA,iCACA,CACE,SAAU,KAAK,SACf,QAAS,KAAK,QAChB,EAGK,EACT,OAAS1O,EAAO,CACd,YAAK,OAAO,MAAM,yBAA0B,gBAAiB,8BAA+B,CAC1F,SAAU,KAAK,SACf,QAAS,KAAK,QACd,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EAEM,EACT,CACF,GAKM,cAAiC,QAAA0C,EAAA,sBACrC,YAAK,OAAO,KAAK,yBAA0B,eAAgB,kBAAmB,CAC5E,SAAU,KAAK,SACf,QAAS,KAAK,QACf,EAIM,EACT,GAKM,eAAkC,QAAAA,EAAA,sBACtC,YAAK,OAAO,KAAK,yBAA0B,gBAAiB,mBAAoB,CAC9E,SAAU,KAAK,SACf,QAAS,KAAK,QACf,EAIM,EACT,GAKA,mBAA6B,CAC3B,OAAO,KAAK,eAAiBgM,EAAkB,SACjD,CAKA,iBAA2B,CACzB,OAAO,KAAK,eAAiBA,EAAkB,MACjD,CAKA,cAAcvE,EAA2B,CACvC,OAAO,KAAK,aAAa,IAAIA,CAAQ,CACvC,CAKA,eAAeiC,EAA2B,CACxC,OAAO,KAAK,cAAc,IAAIA,CAAQ,CACxC,CAKA,sBAA+B,CAC7B,OAAO,KAAK,aAAa,IAC3B,CAKA,uBAAgC,CAC9B,OAAO,KAAK,cAAc,IAC5B,CAKA,sBAA+B,CAC7B,OAAO,KAAK,aAAa,IAC3B,CAKA,uBAAgC,CAC9B,OAAO,KAAK,cAAc,IAC5B,CAKA,aAAoB,CAClB,YAAK,OAAO,KAAK,yBAA0B,cAAe,kBAAmB,CAC3E,SAAU,KAAK,SACf,QAAS,KAAK,QACf,EAED,KAAK,aAAa,QAClB,KAAK,cAAc,QACnB,KAAK,aAAa,QAClB,KAAK,cAAc,QACnB,KAAK,cAAgB,GACrB,KAAK,iBAAmB,EACxB,KAAK,eAAiB,EAEtB,KAAK,gBAAgBsC,EAAkB,OAAO,EAC9C,KAAK,gBAAgBD,EAAkB,cAAc,EACrD,KAAK,iBAEE,IACT,CAKA,aAAawB,EAA0B,CAKrC,GAHA,KAAK,iBAGD,KAAK,eAAiBvB,EAAkB,SAAW,KAAK,iBAAmB,EAAG,CAChF,MAAMwB,EAAc,KAAK,MAAQ,KAAK,iBAChCC,EAAa,KAAK,gBAAgB,YAAc,KAAK,gBAAgB,aACrEC,EAAiB,KAAK,gBAAgB,aAAe,KAAK,gBAAgB,cAEhF,GAAIA,EAAiB,GAAKD,EAAaC,EAAgB,CACrD,MAAMC,EAAqBH,EAAcE,EACnCE,EAAiBH,EAAaC,EACpC,KAAK,gBAAgB,uBAAyBC,EAAqBC,CACrE,CACF,CACF,CAKQ,4BAA4BnB,EAA2C,CAC7E,OAAQA,EAAA,CACN,KAAKV,EAAkB,eACvB,KAAKA,EAAkB,cACrB,OAAOG,EAAgB,OACzB,KAAKH,EAAkB,eACrB,OAAOG,EAAgB,QACzB,KAAKH,EAAkB,WACrB,OAAOG,EAAgB,WACzB,KAAKH,EAAkB,aACvB,KAAKA,EAAkB,WACrB,OAAOG,EAAgB,SACzB,QACE,OAAOA,EAAgB,OAE7B,CAKQ,gBAAuB,CAC7B,MAAMzO,EAAS,KAAK,iBACdwM,EAAcxM,EAAO,OAAO,OAC5BgO,EAAehO,EAAO,QAAQ,OAC9ByM,EAAe,KAAK,aAAa,KACjCoB,EAAgB,KAAK,cAAc,KACnCnB,EAAe,KAAK,aAAa,KACjCuB,EAAgB,KAAK,cAAc,KAEnC+B,EAAaxD,EAAcwB,EAC3BiC,EAAiBxD,EAAeoB,EAChClB,EAAaqD,EAAa,EAAKC,EAAiBD,EAAc,IAAM,EAE1E,KAAK,gBAAkB,CACrB,YAAAxD,EACA,aAAAC,EACA,aAAAC,EACA,aAAAsB,EACA,cAAAH,EACA,cAAAI,EACA,WAAAtB,EACA,uBAAwB,KAAK,gBAAgB,uBAC7C,aAAc,KAAK,4BAA4B,KAAK,iBAAiB,EAEzE,CACF,CClwCO,MAAMyD,EAAN,MAAMA,CAAwC,CAS3C,aAAc,CAPdhQ,EAAA,sBACAA,EAAA,yBACAA,EAAA,oBACAA,EAAA,qBACAA,EAAA,6BAAwD,KACxDA,EAAA,kBAAkC,KAGxC,KAAK,cAAgB4H,GAAoB,cACzC,KAAK,iBAAmBmB,GAAuB,cAC/C,KAAK,YAAcK,GAAwB,cAC3C,KAAK,aAAe,IAAI8D,GAAa,8BAA8B,CAErE,CAKA,OAAc,aAA6B,CACzC,OAAK8C,EAAc,WACjBA,EAAc,SAAW,IAAIA,GAExBA,EAAc,QACvB,CAKO,qBACLrI,EACAsI,EACAjB,EACAkB,EACApG,EACAqG,EACM,CACN,GAAI,CAEF,KAAK,cAAc,eAAexI,EAAWsI,CAAa,EAC1D,KAAK,iBAAiB,eAAetI,EAAWqH,CAAgB,EAChE,KAAK,YAAY,eAAerH,EAAWuI,CAAW,EAGtD,MAAME,EAAmB,IAAI9B,GAC3B,GAAG3G,CAAS,gBACZA,EACA,KAAK,aACLmC,CAAA,EAEF,KAAK,kBAAkB,IAAInC,EAAWyI,CAAgB,EAGlDD,IACF,KAAK,OAAO,IAAIxI,EAAWwI,CAAW,EACtCpQ,EAAO,MACL,gBACA,uBACA,2CACA,CAAE,UAAA4H,CAAA,CAAU,GAIhB5H,EAAO,MACL,gBACA,uBACA,0CACA,CAAE,UAAA4H,CAAA,CAAU,CAEhB,OAASlI,EAAO,CACdM,EAAO,MACL,gBACA,uBACA,8CACA,CAAE,UAAA4H,EAAW,MAAAlI,CAAA,CAAM,CAEvB,CACF,CAKO,iBAAiBkI,EAMtB,CACA,GAAI,CAEF,MAAM0I,EAAgB,KAAK,cAAc,WAAW1I,CAAS,EAGvDqH,EAAmB,KAAK,iBAAiB,WAAWrH,CAAS,EAC7DuI,EAAc,KAAK,YAAY,WAAWvI,CAAS,EACnDyI,EAAmB,KAAK,kBAAkB,IAAIzI,CAAS,GAAK,KAC5DwI,EAAc,KAAK,OAAO,IAAIxI,CAAS,GAAK,KAE5CsD,EAAS,CACb,QAASoF,EACT,WAAYrB,EACZ,MAAOkB,EACP,MAAOE,EACP,MAAOD,CAAA,EAGT,OAAApQ,EAAO,MAAM,gBAAiB,mBAAoB,kCAAmC,CACnF,UAAA4H,EACA,OAAAsD,CAAA,CACD,EACMA,CACT,OAASxL,EAAO,CACd,OAAAM,EAAO,MAAM,gBAAiB,mBAAoB,0CAA2C,CAC3F,UAAA4H,EACA,MAAAlI,CAAA,CACD,EACM,CACL,QAAS,GACT,WAAY,KACZ,MAAO,KACP,MAAO,KACP,MAAO,KAEX,CACF,CAKO,cAAckI,EAA4B,CAC/C,OACE,KAAK,cAAc,UAAUA,CAAS,GACtC,KAAK,iBAAiB,UAAUA,CAAS,GACzC,KAAK,YAAY,UAAUA,CAAS,GACpC,KAAK,kBAAkB,IAAIA,CAAS,CAGxC,CAKO,oBAA+B,CACpC,MAAM2I,EAAgB,KAAK,cAAc,sBACnCC,EAAmB,KAAK,iBAAiB,sBACzCC,EAAc,KAAK,YAAY,sBAC/BC,EAAc,MAAM,KAAK,KAAK,kBAAkB,MAAM,EAG5D,OAAOH,EAAc,OACnB9I,GACE+I,EAAiB,SAAS/I,CAAK,GAC/BgJ,EAAY,SAAShJ,CAAK,GAC1BiJ,EAAY,SAASjJ,CAAK,EAEhC,CAKO,kBAAwC,CAC7C,OAAO,KAAK,aACd,CAEO,qBAA8C,CACnD,OAAO,KAAK,gBACd,CAEO,gBAA0C,CAC/C,OAAO,KAAK,WACd,CAEO,iBAAiC,CACtC,OAAO,KAAK,YACd,CAEO,oBAAoBG,EAA6C,CACtE,OAAO,KAAK,kBAAkB,IAAIA,CAAS,GAAK,IAClD,CAEO,SAASA,EAAkC,CAChD,OAAO,KAAK,OAAO,IAAIA,CAAS,GAAK,IACvC,CAEO,cAAoC,CACzC,OAAO,IAAI,IAAI,KAAK,MAAM,CAC5B,CACF,EA5LE3H,EADWgQ,EACI,YADV,IAAMU,GAANV,m/BCWA,MAAeW,CAAoD,CAGxE,YAAYC,EAA0B,CAF5B5Q,EAAA,uBAGR,KAAK,eAAiB4Q,CACxB,CAUA,UAAUC,EAA6B,CACrC,OAAO,KAAK,eAAe,SAASA,CAAU,CAChD,CAKA,mBAA8B,CAC5B,OAAO,KAAK,cACd,CAKU,oBACRC,EACAC,EACM,CACN,MAAMnR,EAASmR,EAAM,OAQrB,GALI,MAAOnR,GAAUA,EAAO,IAAM,QAAa,gBAAiBkR,GAC7DA,EAAmB,YAAYlR,EAAO,GAAI,MAAOA,EAASA,EAAO,EAAI,IAAM,CAAC,EAI3E,UAAWA,GAAUA,EAAO,OAASA,EAAO,QAAU,QACpD,YAAakR,EAAY,CAC3B,MAAME,GAAU,WAAYpR,EAASA,EAAO,OAASA,EAAO,QAAUA,EAAO,MAC5EkR,EAAmB,QAAQlR,EAAO,MAAOoR,CAAM,CAClD,CAIFF,EAAW,MAAQ,SAAUlR,EAASA,EAAO,KAAO,SAAcA,EAAO,GAGrE,UAAWA,GAAUA,EAAO,QAAU,QAAa,aAAckR,GAClEA,EAAmB,SAASlR,EAAO,KAAK,EAIvC,YAAaA,GAAUA,EAAO,UAAY,QAAa,eAAgBkR,GACxEA,EAAmB,WAAWlR,EAAO,OAAO,CAEjD,CACF,CC/DO,MAAMqR,WAAkBC,cAAmB,SAAwC,CAyFxF,YACE1J,EACA2J,EACAC,EAAY,EACZC,EAAY,EACZC,EAA4B,KAC5B,CAEA,MAAM9J,EAAO4J,EAAGC,CAAC,EA7FVrR,EAAA,WAGAA,EAAA,eAGAA,EAAA,gBAA0B,IAG1BA,EAAA,qBAA6C,OAG7CA,EAAA,mBAAc,CACrB,YAAa,IACb,SAAU,GACV,aAAc,GACd,SAAU,UACV,oBAAqB,GACrB,oBAAqB,KAIfA,EAAA,oBAAuC,CAC7C,oBAAqB,GACrB,cAAe,UACf,UAAW,WAIbA,EAAA,wBAA2C,CACzC,oBAAqB,GACrB,cAAe,UACf,UAAW,WAIJA,EAAA,eAAU,CACjB,IAAK,GACL,QAAS,CACP,KAAM,EACN,MAAO,EACP,IAAK,EACL,OAAQ,EACV,GA4DQA,EAAA,cAAiBiH,EAAO,eAuDxBjH,EAAA,uBAIC,MAnET,KAAK,GAAKmR,EACV,KAAK,OAASG,EAGd,KAAK,gBACP,CAnDA,IAAI,YAAqB,CACvB,OAAO,KAAK,SAAS,MACvB,CAGA,IAAI,aAAuB,CACzB,OAAO,KAAK,SAAS,OAAS,CAChC,CAGA,IAAI,SAAmB,CACrB,OAAO,KAAK,SAAS,SAAW,CAClC,CAGA,IAAI,UAAoB,CACtB,OAAO,KAAK,MACd,CAGA,IAAI,aAAuB,CACzB,MAAO,CAAC,KAAK,MACf,CAGA,IAAI,MAA0C,CAC5C,MAAO,CAAE,MAAO,KAAK,MAAO,OAAQ,KAAK,OAC3C,CAGA,IAAI,aAAuB,OACzB,QAAOrS,EAAA,KAAK,QAAL,YAAAA,EAAY,UAAW,EAChC,CA2BU,gBAAuB,CAE/B,KAAK,QAAQ,IAAK,GAAG,EACrB,KAAK,gBACP,CAKA,SAASsS,EAAgD,CACvD,KAAK,OAAO,MAAM,YAAa,WAAY,2BAA4B,CACrE,GAAI,KAAK,GACT,SAAUA,CAAA,CACX,EAGD,IAAIC,EAAkB,KAAK,kBAAkBD,CAAgB,EAG7D,KAAK,aAAe5R,EAAA,GAAK6R,GAGzB,KAAK,wBAAwBA,CAAe,EAG5C,KAAK,oBAAoBA,CAAe,EAGxC,KAAK,sBAAsBA,CAAe,EAG1C,KAAK,0BAA0BA,CAAe,EAG9C,KAAK,+BAA+BA,CAAe,CACrD,CAGA,UAAmC,CACjC,OAAO7R,EAAA,GAAK,KAAK,aACnB,CAGA,YAAqB,CACnB,OAAO,KAAK,EACd,CAeA,sBAAsBuL,EAA2E,WAa/F,GAZA,KAAK,OAAO,MAAM,YAAa,aAAc,4CAA6C,CACxF,GAAI,KAAK,GACT,cAAe,CAAC,CAACA,EAAQ,WACzB,SAAU,CAAC,CAACA,EAAQ,MACpB,kBAAmBA,EAAQ,kBAC3B,eAAgBA,EAAQ,WAAa,OAAO,KAAKA,EAAQ,UAAU,EAAI,GACvE,UAAWA,EAAQ,MAAQ,OAAO,KAAKA,EAAQ,KAAK,EAAI,EAAC,CAC1D,EAED,KAAK,gBAAkBA,EAGnBA,EAAQ,aACV,KAAK,OAAO,MAAM,YAAa,aAAc,4CAA6C,CACxF,GAAI,KAAK,GACT,iBAAkBA,EAAQ,WAC1B,WAAY,CAAC,CAACA,EAAQ,WAAW,QACjC,eAAcjM,EAAAiM,EAAQ,WAAW,UAAnB,YAAAjM,EAA4B,SAAU,EACpD,sBAAuB,CAAC,CAACiM,EAAQ,WAAW,mBAC5C,sBAAuBA,EAAQ,WAAW,mBACtC,OAAO,KAAKA,EAAQ,WAAW,kBAAkB,EACjD,EAAC,CACN,EAGGA,EAAQ,WAAW,SAAS,CAC9B,MAAMzC,EAAgByC,EAAQ,WAAW,QAAQ,KAC9CnD,GAAgBA,EAAO,KAAO,KAAK,IAGlCU,GAAA,MAAAA,EAAe,kBACjB,KAAK,OAAO,MAAM,YAAa,aAAc,qCAAsC,CACjF,GAAI,KAAK,GACT,cAAAA,EACA,iBAAkBA,EAAc,iBACjC,EAGD,KAAK,SAASA,EAAc,gBAAgB,GAE5C,KAAK,OAAO,KAAK,YAAa,aAAc,wCAAyC,CACnF,GAAI,KAAK,GACT,iBAAkByC,EAAQ,WAAW,QAAQ,IAAKuG,GAAWA,EAAE,EAAE,EAClE,CAEL,CAIF,GAAIvG,EAAQ,SAAS7C,EAAA6C,EAAQ,aAAR,MAAA7C,EAAoB,SAAS,CAEhD,MAAMI,EAAgByC,EAAQ,WAAW,QAAQ,KAAMnD,GAAgBA,EAAO,KAAO,KAAK,EAAE,GAExF2J,EAAAjJ,GAAA,YAAAA,EAAe,mBAAf,MAAAiJ,EAAiC,UACnC,KAAK,OAAO,MAAM,YAAa,aAAc,uCAAwC,CACnF,GAAI,KAAK,GACT,UAAWxG,EAAQ,MAAM,UACzB,QAASzC,EAAc,iBAAiB,QACxC,sBAAuB,OAAO,KAAKyC,EAAQ,MAAM,cAAgB,EAAE,EACpE,EAGD,KAAK,kBAAkBzC,EAAc,iBAAiB,QAASyC,EAAQ,KAAK,EAEhF,CACF,CAKA,oBAIS,CACP,OAAO,KAAK,eACd,CAKQ,kBAAkByG,EAAmBC,EAAkB,CACzD,CAACD,GAAW,EAACC,GAAA,MAAAA,EAAO,gBAExB,KAAK,OAAO,MAAM,YAAa,oBAAqB,yBAA0B,CAC5E,GAAI,KAAK,GACT,QAAAD,EACA,sBAAuB,OAAO,KAAKC,EAAM,YAAY,EACtD,EAGDD,EAAQ,QAAQ3L,GAAa,CAE3B,IAAI6L,EAAaD,EAAM,aAAa5L,CAAS,EAGzC,CAAC6L,GAAc,CAAC7L,EAAU,WAAW,GAAG,IAC1C6L,EAAaD,EAAM,aAAa,IAAI5L,CAAS,EAAE,GAI7C,CAAC6L,GAAc7L,EAAU,WAAW,GAAG,IACzC6L,EAAaD,EAAM,aAAa5L,EAAU,UAAU,CAAC,CAAC,GAGpD6L,GACF,KAAK,OAAO,MAAM,YAAa,UAAW,uBAAwB,CAChE,GAAI,KAAK,GACT,UAAA7L,EACA,WAAA6L,EACA,gBAAiB7L,EAAU,WAAW,GAAG,EACzC,mBAAoB,CAACA,EAAU,WAAW,GAAG,EAC9C,EAGD,KAAK,aAAerG,IAAA,GAAK,KAAK,cAAiBkS,GAG/C,KAAK,6BAA6BA,CAAU,GAE5C,KAAK,OAAO,KAAK,YAAa,UAAW,wBAAyB,CAChE,GAAI,KAAK,GACT,UAAA7L,EACA,iBAAkB,OAAO,KAAK4L,EAAM,YAAY,EAChD,aAAe5L,EAAU,WAAW,GAAG,EAAsB,KAAlB,IAAIA,CAAS,GACxD,gBAAiBA,EAAU,WAAW,GAAG,EAAIA,EAAU,UAAU,CAAC,EAAI,KACvE,CAEL,CAAC,EACH,CAKQ,wBAAwB8L,EAAqC,CAE/DA,EAAM,WAAa,QACrB,KAAK,OAAO,MAAM,YAAa,0BAA2B,yBAA0B,CAClF,GAAI,KAAK,GACT,SAAUA,EAAM,SACjB,EAOCA,EAAM,YAAc,SACtB,KAAK,EAAI,KAAK,uBAAuBA,EAAM,UAAW,GAAG,EACzD,KAAK,OAAO,MAAM,YAAa,0BAA2B,wBAAyB,CACjF,GAAI,KAAK,GACT,EAAG,KAAK,EACR,cAAeA,EAAM,UACtB,GAICA,EAAM,YAAc,SACtB,KAAK,EAAI,KAAK,uBAAuBA,EAAM,UAAW,GAAG,EACzD,KAAK,OAAO,MAAM,YAAa,0BAA2B,wBAAyB,CACjF,GAAI,KAAK,GACT,EAAG,KAAK,EACR,cAAeA,EAAM,UACtB,GAGCA,EAAM,YAAc,QACtB,KAAK,SAASA,EAAM,SAAS,EAI3BA,EAAM,SAAW,SACnB,KAAK,SAASA,EAAM,MAAM,EAC1B,KAAK,OAAO,MAAM,YAAa,0BAA2B,iBAAkB,CAC1E,GAAI,KAAK,GACT,OAAQA,EAAM,OACf,EAEL,CAMQ,uBACN3O,EAYA4O,EACQ,aAER,GAAI,OAAO5O,GAAU,SACnB,OAAOA,EAIT,GAAI,OAAOA,GAAU,SACnB,OAAQA,EAAA,CACN,IAAK,SAEH,MAES,GAKX,IAAK,OACH,OAAO4O,IAAS,IAAM,EAAI,KAAK,EACjC,IAAK,QACH,OAAIA,IAAS,KAAO,KAAK,UAEH1J,GAAApJ,EAAA,KAAK,QAAe,UAApB,YAAAoJ,EAAA,KAAApJ,KAAmC,CAAE,MAAO,MAC9C,OAAS,KAAK,OAAS,KAEpC8S,IAAS,IAAM,EAAI,KAAK,EACjC,IAAK,MACH,OAAOA,IAAS,IAAM,EAAI,KAAK,EACjC,IAAK,SACH,OAAIA,IAAS,KAAO,KAAK,UAEHC,GAAAN,EAAA,KAAK,QAAe,UAApB,YAAAM,EAAA,KAAAN,KAAmC,CAAE,OAAQ,MAC/C,QAAU,KAAK,QAAU,KAEtCK,IAAS,IAAM,EAAI,KAAK,EACjC,QACE,YAAK,OAAO,KAAK,YAAa,0BAA2B,2BAA4B,CACnF,GAAI,KAAK,GACT,KAAAA,EACA,MAAA5O,CAAA,CACD,EACM4O,IAAS,IAAM,KAAK,EAAI,KAAK,EAK1C,GAAI,OAAO5O,GAAU,UAAY,aAAcA,EAAO,CAEpD,GAAI,KAAK,QAAU,OAAQ,KAAK,OAAe,SAAY,WACzD,GAAI,CACF,OAAQA,EAAc,SAAS,KAAK,MAAM,CAC5C,OAAS1D,EAAO,CACd,KAAK,OAAO,KAAK,YAAa,SAAU,+CAAgD,CACtF,GAAI,KAAK,GACT,KAAAsS,EACA,MAAOtS,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,CACH,MAEA,KAAK,OAAO,KACV,YACA,SACA,gEACA,CACE,GAAI,KAAK,GACT,KAAAsS,EACA,MAAA5O,CAAA,CACF,EAIJ,OAAO4O,IAAS,IAAM,KAAK,EAAI,KAAK,CACtC,CAGA,GAAI,OAAO5O,GAAU,UAAY,mBAAoBA,EAAO,CAC1D,GAAI,CACF,OAAQA,EAA6B,gBACvC,OAAS1D,EAAO,CACd,KAAK,OAAO,KAAK,YAAa,SAAU,sCAAuC,CAC7E,GAAI,KAAK,GACT,KAAAsS,EACA,MAAOtS,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,CACH,CAEA,OAAOsS,IAAS,IAAM,KAAK,EAAI,KAAK,CACtC,CAGA,YAAK,OAAO,KAAK,YAAa,SAAU,8BAA+B,CACrE,GAAI,KAAK,GACT,KAAAA,EACA,MAAA5O,EACA,UAAW,OAAOA,CAAA,CACnB,EAEM4O,IAAS,IAAM,KAAK,EAAI,KAAK,CACtC,CAGQ,oBAAoBD,EAAqC,CAE3DA,EAAM,QAAU,SAClB,KAAK,MAAQ,KAAK,mBAAmBA,EAAM,MAAO,OAAO,EACzD,KAAK,OAAO,MAAM,YAAa,sBAAuB,mBAAoB,CACxE,GAAI,KAAK,GACT,MAAO,KAAK,MACZ,cAAeA,EAAM,MACtB,GAICA,EAAM,SAAW,SACnB,KAAK,OAAS,KAAK,mBAAmBA,EAAM,OAAQ,QAAQ,EAC5D,KAAK,OAAO,MAAM,YAAa,sBAAuB,oBAAqB,CACzE,GAAI,KAAK,GACT,OAAQ,KAAK,OACb,cAAeA,EAAM,OACtB,GAIH,KAAK,sBAAsBA,CAAK,EAGhC,KAAK,uBAAuBA,CAAK,CACnC,CAMQ,mBACN3O,EACA8O,EACQ,CAER,GAAI,OAAO9O,GAAU,SACnB,OAAOA,EAIT,GAAI,OAAOA,GAAU,SACnB,OAAQA,EAAA,CACN,IAAK,OAEH,OAAO8O,IAAc,QAChB,KAAK,MAAM,KAAK,OAAO,MACvB,KAAK,MAAM,KAAK,OAAO,OAC9B,IAAK,OAGH,OAAOA,IAAc,QAAU,IAAM,IACvC,QACE,YAAK,OAAO,KAAK,YAAa,sBAAuB,uBAAwB,CAC3E,GAAI,KAAK,GACT,UAAAA,EACA,MAAA9O,CAAA,CACD,EAC8B,GAAM,CAK3C,GAAI,OAAOA,GAAU,UAAY,aAAcA,EAAO,CAEpD,GAAI,KAAK,QAAU,OAAQ,KAAK,OAAe,SAAY,WACzD,GAAI,CACF,OAAQA,EAAc,SAAS,KAAK,MAAM,CAC5C,OAAS1D,EAAO,CACd,KAAK,OAAO,KAAK,YAAa,SAAU,2CAA4C,CAClF,GAAI,KAAK,GACT,UAAAwS,EACA,MAAOxS,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,CACH,MAEA,KAAK,OAAO,KACV,YACA,SACA,2DACA,CACE,GAAI,KAAK,GACT,UAAAwS,EACA,MAAA9O,CAAA,CACF,EAIJ,MAA+B,IACjC,CAGA,GAAI,OAAOA,GAAU,UAAY,mBAAoBA,EAAO,CAC1D,GAAI,CACF,OAAQA,EAA6B,gBACvC,OAAS1D,EAAO,CACd,KAAK,OAAO,KAAK,YAAa,SAAU,kCAAmC,CACzE,GAAI,KAAK,GACT,UAAAwS,EACA,MAAOxS,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,CACH,CAEA,MAA+B,IACjC,CAGA,YAAK,OAAO,KAAK,YAAa,SAAU,0BAA2B,CACjE,GAAI,KAAK,GACT,UAAAwS,EACA,MAAA9O,EACA,UAAW,OAAOA,CAAA,CACnB,EAE8B,GACjC,CAGQ,sBAAsB2O,EAAqC,CAE7DA,EAAM,SAAW,QACnB,KAAK,OAAO,MAAM,YAAa,wBAAyB,0BAA2B,CACjF,GAAI,KAAK,GACT,OAAQA,EAAM,OACf,EAQiB,CAAC,YAAa,cAAe,eAAgB,YAAY,EACjE,QAAQI,GAAQ,CACtBJ,EAAMI,CAAI,IAAM,QAClB,KAAK,OAAO,MAAM,YAAa,wBAAyB,6BAA8B,CACpF,GAAI,KAAK,GACT,SAAUA,EACV,MAAOJ,EAAMI,CAAI,EAClB,CAGL,CAAC,CACH,CAGQ,uBAAuBJ,EAAqC,CAElE,GAAIA,EAAM,UAAY,OAAW,CAO/B,GANA,KAAK,OAAO,MAAM,YAAa,yBAA0B,2BAA4B,CACnF,GAAI,KAAK,GACT,QAASA,EAAM,QAChB,EAGG,OAAOA,EAAM,SAAY,SAE3B,KAAK,QAAQ,QAAU,CACrB,KAAMA,EAAM,QACZ,MAAOA,EAAM,QACb,IAAKA,EAAM,QACX,OAAQA,EAAM,iBAEP,OAAOA,EAAM,SAAY,UAAY,mBAAoBA,EAAM,QAAS,CAEjF,MAAMK,EAAiBL,EAAM,QAA+B,iBAC5D,KAAK,QAAQ,QAAU,CACrB,KAAMK,EACN,MAAOA,EACP,IAAKA,EACL,OAAQA,CAAA,CAEZ,CAEA,KAAK,OAAO,MAAM,YAAa,yBAA0B,kBAAmB,CAC1E,GAAI,KAAK,GACT,WAAY,KAAK,QAAQ,QAC1B,CACH,CAGqB,CAAC,aAAc,eAAgB,gBAAiB,aAAa,EACrE,QAAQD,GAAQ,OAC3B,GAAIJ,EAAMI,CAAI,IAAM,OAAW,CAC7B,MAAM/O,EACJ,OAAO2O,EAAMI,CAAI,GAAM,SACnBJ,EAAMI,CAAI,IACTjT,EAAA6S,EAAMI,CAAI,IAAV,YAAAjT,EAAoC,mBAAoB,EAG/D,OAAQiT,EAAA,CACN,IAAK,aACH,KAAK,QAAQ,QAAQ,IAAM/O,EAC3B,MACF,IAAK,eACH,KAAK,QAAQ,QAAQ,MAAQA,EAC7B,MACF,IAAK,gBACH,KAAK,QAAQ,QAAQ,OAASA,EAC9B,MACF,IAAK,cACH,KAAK,QAAQ,QAAQ,KAAOA,EAC5B,MAGJ,KAAK,OAAO,MAAM,YAAa,yBAA0B,6BAA8B,CACrF,GAAI,KAAK,GACT,SAAU+O,EACV,MAAA/O,CAAA,CACD,CACH,CACF,CAAC,CACH,CAGQ,sBAAsB2O,EAAqC,CACjE,GAAIA,EAAM,QAAU,QAClB,GAAI,OAAOA,EAAM,OAAU,SACzB,KAAK,SAASA,EAAM,KAAK,UAChB,OAAOA,EAAM,OAAU,UAAY,QAASA,EAAM,OAAS,QAASA,EAAM,MAAO,CAE1F,MAAMM,EAAeN,EAAM,MAA6B,iBACxD,KAAK,SAASM,CAAW,CAC3B,EAGF,GAAIN,EAAM,WAAa,QACrB,GAAI,OAAOA,EAAM,UAAa,SAC5B,KAAK,YAAYA,EAAM,QAAQ,UAE/B,OAAOA,EAAM,UAAa,UAC1B,QAASA,EAAM,UACf,QAASA,EAAM,SACf,CAEA,MAAMM,EAAeN,EAAM,SAAgC,iBAC3D,KAAK,YAAYM,CAAW,CAC9B,EAGEN,EAAM,UAAY,QACpB,KAAK,WAAWA,EAAM,OAAO,EAG3BA,EAAM,cAAgB,SACpBA,EAAM,YACR,KAAK,iBAEL,KAAK,qBAGX,CAGQ,0BAA0BA,EAAqC,CAErE,GAAIA,EAAM,kBAAoB,OAAW,CACvC,KAAK,OAAO,MAAM,YAAa,4BAA6B,4BAA6B,CACvF,GAAI,KAAK,GACT,gBAAiBA,EAAM,gBACxB,EAID,MAAMO,EAAqB,KAAK,UAAU,sBAAsB,EAMhE,GALIA,GACFA,EAAmB,UAIjB,OAAOP,EAAM,iBAAoB,SAAU,CAE7C,MAAMQ,EAAY,KAAK,OAAU,KAAK,MAAM,KAAK,OAAO,MAClDC,EAAa,KAAK,QAAW,KAAK,MAAM,KAAK,OAAO,OAEpDC,EAAiB,KAAK,MAAM,IAAI,UACpC,EACA,EACAF,EACAC,EACAE,UAAe,MAAM,aAAaX,EAAM,eAAe,EAAE,OAI3DU,EAAe,QAAQ,sBAAsB,EAC7C,KAAK,MAAMA,EAAgB,CAAC,EAE5B,KAAK,OAAO,MACV,YACA,4BACA,+BACA,CACE,GAAI,KAAK,GACT,gBAAiBV,EAAM,gBACvB,KAAM,CAAE,MAAOU,EAAe,MAAO,OAAQA,EAAe,OAAO,CACrE,CAEJ,CACF,CAIF,CAGQ,+BAA+BV,EAAkB,CAEvD,KAAK,sBAAsBA,CAAK,EAGhC,KAAK,sBAAsBA,CAAK,EAGhC,KAAK,yBAAyBA,CAAK,EAGnC,KAAK,kBAAkBA,CAAK,EAG5B,KAAK,eAAeA,CAAK,CAC3B,CAGQ,sBAAsBA,EAAkB,CAE9C,MAAMY,EAAiB,KAAK,UAAU,kBAAkB,EAMxD,GALIA,GACFA,EAAe,UAKfZ,EAAM,cAAgB,QACtBA,EAAM,aAAe,QACrBA,EAAM,gBAAkB,QACxBA,EAAM,gBAAkB,QACxBA,EAAM,cAAgB,OACtB,CACA,KAAK,OAAO,MAAM,YAAa,wBAAyB,6BAA8B,CACpF,GAAI,KAAK,GACT,YAAaA,EAAM,YACnB,WAAYA,EAAM,WAClB,cAAeA,EAAM,cACrB,cAAeA,EAAM,cACrB,YAAaA,EAAM,YACpB,EAGD,MAAMa,EAAcb,EAAM,aAAe,UACnCc,EAAad,EAAM,YAAc,EACjCe,EAAgBf,EAAM,eAAiB,EACvCgB,EAAgBhB,EAAM,eAAiB,EACvCiB,EAAcjB,EAAM,cAAgB,OAAYA,EAAM,YAAc,GAGpEkB,EAAa,KAAK,MAAM,IAAI,UAChCH,EACAC,GACC,KAAK,OAAU,KAAK,MAAM,KAAK,OAAO,OAAoBF,EAAa,GACvE,KAAK,QAAW,KAAK,MAAM,KAAK,OAAO,QAAqBA,EAAa,EAC1EH,UAAe,MAAM,aAAaE,CAAW,EAAE,MAC/CI,CAAA,EAIFC,EAAW,QAAQ,kBAAkB,EACrC,KAAK,MAAMA,EAAY,CAAC,EAExB,KAAK,OAAO,MAAM,YAAa,wBAAyB,iBAAkB,CACxE,GAAI,KAAK,GACT,YAAAL,EACA,WAAAC,EACA,aAAc,CAAE,EAAGC,EAAe,EAAGC,CAAA,EACrC,YAAAC,CAAA,CACD,CACH,CACF,CAGQ,sBAAsBjB,EAAkB,CAE9C,MAAMmB,EAAiB,KAAK,UAAU,kBAAkB,EAMxD,GALIA,GACFA,EAAe,UAKfnB,EAAM,cAAgB,QACtBA,EAAM,cAAgB,QACtBA,EAAM,oBAAsB,OAC5B,CACA,MAAMoB,EAAcpB,EAAM,aAAe,UACnCqB,EAAcrB,EAAM,aAAe,EACnCsB,EAAoBtB,EAAM,mBAAqBqB,EAErD,KAAK,OAAO,MAAM,YAAa,wBAAyB,6BAA8B,CACpF,GAAI,KAAK,GACT,YAAAD,EACA,YAAAC,EACA,kBAAAC,CAAA,CACD,EAGD,MAAMC,EAAa,KAAK,MAAM,IAAI,UAChC,EACA,GACC,KAAK,OAAU,KAAK,MAAM,KAAK,OAAO,OAAoBF,EAAc,GACxE,KAAK,QAAW,KAAK,MAAM,KAAK,OAAO,QAAqBC,EAAoB,EACjFX,UAAe,MAAM,aAAaS,CAAW,EAAE,OAI3CI,EAAY,KAAK,MAAM,IAAI,UAC/B,EACA,EACA,KAAK,OAAU,KAAK,MAAM,KAAK,OAAO,MACtC,KAAK,QAAW,KAAK,MAAM,KAAK,OAAO,OACvC,GAIFD,EAAW,QAAQ,kBAAkB,EACrC,KAAK,MAAMA,EAAY,CAAC,EACxB,KAAK,MAAMC,EAAW,CAAC,EAEvB,KAAK,OAAO,MAAM,YAAa,wBAAyB,iBAAkB,CACxE,GAAI,KAAK,GACT,YAAAJ,EACA,YAAAC,EACA,kBAAAC,CAAA,CACD,CACH,CACF,CAGQ,yBAAyBtB,EAAkB,WAEjD,GAAIA,EAAM,QAAU,OAAW,CAC7B,MAAMyB,EACJ,OAAOzB,EAAM,OAAU,SACnBA,EAAM,QACL7S,EAAA6S,EAAM,QAAN,YAAA7S,EAAoC,mBAAoB,EAC/D,KAAK,SAASsU,EAAOA,CAAK,EAE1B,KAAK,OAAO,MAAM,YAAa,2BAA4B,wBAAyB,CAClF,GAAI,KAAK,GACT,MAAAA,CAAA,CACD,CACH,CAYA,GATIzB,EAAM,YAAc,QACtB,KAAK,OAAO,MAAM,YAAa,2BAA4B,qBAAsB,CAC/E,GAAI,KAAK,GACT,UAAWA,EAAM,UAClB,EAKCA,EAAM,SAAW,OAAW,CAC9B,MAAM0B,EACJ,OAAO1B,EAAM,QAAW,SACpBA,EAAM,SACLzJ,EAAAyJ,EAAM,SAAN,YAAAzJ,EAAqC,mBAAoB,EAChE,KAAK,OAASmL,EAEd,KAAK,OAAO,MAAM,YAAa,2BAA4B,kBAAmB,CAC5E,GAAI,KAAK,GACT,OAAAA,CAAA,CACD,CACH,CAEA,GAAI1B,EAAM,SAAW,OAAW,CAC9B,MAAM2B,EACJ,OAAO3B,EAAM,QAAW,SACpBA,EAAM,SACLJ,EAAAI,EAAM,SAAN,YAAAJ,EAAqC,mBAAoB,EAChE,KAAK,OAAS+B,EAEd,KAAK,OAAO,MAAM,YAAa,2BAA4B,kBAAmB,CAC5E,GAAI,KAAK,GACT,OAAAA,CAAA,CACD,CACH,CACF,CAGQ,kBAAkB3B,EAAkB,CAE1C,MAAM4B,EAAe5B,EAAM,cAAgBA,EAAM,kBAE7C4B,IAAiB,SACnB,KAAK,OAAO,MAAM,YAAa,oBAAqB,yBAA0B,CAC5E,GAAI,KAAK,GACT,aAAAA,CAAA,CACD,EAKD,KAAK,OAAO,MACV,YACA,oBACA,6DACA,CACE,GAAI,KAAK,GACT,aAAAA,CAAA,CACF,EAGN,CAGQ,eAAe5B,EAAkB,CACvC,GAAIA,EAAM,YAAc,OAAW,CACjC,KAAK,OAAO,MAAM,YAAa,iBAAkB,sBAAuB,CACtE,GAAI,KAAK,GACT,UAAWA,EAAM,UAClB,EAGD,MAAM6B,EAAY,KAAK,eAAe7B,EAAM,SAAS,EAErD,GAAI6B,EAAW,CAEb,MAAMC,EAAoB,KAAK,UAAU,YAAY,EACjDA,GACFA,EAAkB,UAIpB,MAAMZ,EAAa,KAAK,MAAM,IAAI,UAChCW,EAAU,QACVA,EAAU,SACT,KAAK,OAAU,KAAK,MAAM,KAAK,OAAO,OAAoBA,EAAU,KAAO,GAC3E,KAAK,QAAW,KAAK,MAAM,KAAK,OAAO,QAAqBA,EAAU,KAAO,EAC9ElB,UAAe,MAAM,aAAakB,EAAU,KAAK,EAAE,MACnDA,EAAU,OAIZX,EAAW,QAAQ,YAAY,EAC/B,KAAK,MAAMA,EAAY,CAAC,EAExB,KAAK,OAAO,MAAM,YAAa,iBAAkB,qBAAsB,CACrE,GAAI,KAAK,GACT,UAAAW,CAAA,CACD,CACH,CACF,CACF,CAGQ,eAAeA,EAMd,CACP,GAAI,CAGF,MAAME,EAAQF,EAAU,MAAM,uDAAuD,EAErF,GAAIE,EAAO,CACT,MAAMC,EAAU,SAASD,EAAM,CAAC,CAAC,GAAK,EAChCE,EAAU,SAASF,EAAM,CAAC,CAAC,GAAK,EAChCG,EAAO,SAASH,EAAM,CAAC,CAAC,GAAK,EAGnC,IAAII,EAAQ,UACRC,EAAQ,GAEZ,MAAMC,EAAYN,EAAM,CAAC,EAAE,OAC3B,GAAIM,EAAU,SAAS,MAAM,EAAG,CAE9B,MAAMC,EAAYD,EAAU,MAAM,mDAAmD,EACrF,GAAIC,EAAW,CACb,MAAM9P,EAAI,SAAS8P,EAAU,CAAC,CAAC,EACzBC,EAAI,SAASD,EAAU,CAAC,CAAC,EACzBlT,EAAI,SAASkT,EAAU,CAAC,CAAC,EAC/BF,EAAQE,EAAU,CAAC,EAAI,WAAWA,EAAU,CAAC,CAAC,EAAI,EAClDH,EAAQ,IAAI3P,EAAE,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,CAAC,GAAG+P,EAAE,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,CAAC,GAAGnT,EAAE,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,CAAC,EACjH,CACF,MAAWiT,EAAU,SAAS,GAAG,EAC/BF,EAAQE,EAKV,MAAO,CAAE,QAAAL,EAAS,QAAAC,EAAS,KAAAC,EAAM,MAAAC,EAAO,MAAAC,CAAA,CAC1C,CACF,OAASzU,EAAO,CACd,KAAK,OAAO,KAAK,YAAa,iBAAkB,6BAA8B,CAC5E,GAAI,KAAK,GACT,UAAAkU,EACA,MAAOlU,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,CACH,CAEA,OAAO,IACT,CAMQ,6BAA6B6U,EAA+C,CAElF,KAAK,wBAAwBA,CAAe,EAG5C,KAAK,oBAAoBA,CAAe,EAGxC,KAAK,sBAAsBA,CAAe,EAG1C,KAAK,0BAA0BA,CAAe,EAG9C,KAAK,+BAA+BA,CAAe,CACrD,CAKQ,kBAAkB/C,EAAkE,eAC1F,GAAI,CAAC,KAAK,gBACR,YAAK,OAAO,MACV,YACA,oBACA,wDACA,CAAE,GAAI,KAAK,GAAG,EAETA,EAGT,IAAIC,EAAkB7R,EAAA,GAAK4R,GAG3B,IAAItS,EAAA,KAAK,gBAAgB,aAArB,MAAAA,EAAiC,QAAS,CAE5C,MAAMwJ,EAAgB,KAAK,gBAAgB,WAAW,QAAQ,KAC3DV,GAAgBA,EAAO,KAAO,KAAK,IAGlCU,GAAA,MAAAA,EAAe,mBACjB,KAAK,OAAO,MACV,YACA,oBACA,uCACA,CACE,GAAI,KAAK,GACT,kBAAmBA,EAAc,iBACnC,EAEF+I,EAAkB7R,IAAA,GAAK6R,GAAoB/I,EAAc,kBAE7D,CAGA,IACEJ,EAAA,KAAK,gBAAgB,aAArB,MAAAA,EAAiC,oBACjC,KAAK,gBAAgB,kBACrB,CACA,MAAML,EACJ,KAAK,gBAAgB,WAAW,mBAAmB,KAAK,gBAAgB,iBAAiB,EAE3F,GAAIA,EAAmB,CAErB,MAAMuM,EAAmBvM,EAAkB,KAAMD,GAAgBA,EAAO,KAAO,KAAK,EAAE,EAElFwM,GAAA,MAAAA,EAAkB,mBACpB,KAAK,OAAO,MACV,YACA,oBACA,wCACA,CACE,GAAI,KAAK,GACT,WAAY,KAAK,gBAAgB,kBACjC,qBAAsBA,EAAiB,iBACzC,EAEF/C,EAAkB7R,IAAA,GAAK6R,GAAoB+C,EAAiB,kBAEhE,CACF,CAGA,GAAI/C,EAAgB,WAAWE,EAAA,KAAK,gBAAgB,QAArB,MAAAA,EAA4B,gBACzD,KAAK,OAAO,MAAM,YAAa,oBAAqB,yBAA0B,CAC5E,GAAI,KAAK,GACT,QAASF,EAAgB,QACzB,UAAW,KAAK,gBAAgB,MAAM,UACvC,EAGD,KAAK,kBAAkBA,EAAgB,QAAS,KAAK,gBAAgB,KAAK,EAGtEA,EAAgB,WAAWgD,GAAAxC,EAAA,KAAK,kBAAL,YAAAA,EAAsB,QAAtB,MAAAwC,EAA6B,eAAc,CACxE,MAAMC,EAAe,KAAK,gBAAgB,MAAO,aACjDjD,EAAgB,QAAQ,QAAQxL,GAAa,CAC3C,MAAM6L,EAAa4C,EAAazO,CAAS,EACrC6L,IACF,KAAK,OAAO,MAAM,YAAa,UAAW,iCAAkC,CAC1E,GAAI,KAAK,GACT,UAAA7L,EACA,WAAA6L,CAAA,CACD,EACDL,EAAkB7R,IAAA,GAAK6R,GAAoBK,GAE/C,CAAC,CACH,CAGF,YAAK,OAAO,MAAM,YAAa,UAAW,0BAA2B,CACnE,GAAI,KAAK,GACT,mBAAoBN,EACpB,gBAAAC,CAAA,CACD,EAEMA,CACT,CAKA,SAASkD,EAA0B,CACjC,GAAI,KAAK,SAAS,QAAU,KAAK,YAAY,YAAa,CACxD,KAAK,OAAO,KAAK,YAAa,WAAY,0CAA2C,CACnF,GAAI,KAAK,GACT,aAAc,KAAK,SAAS,OAC5B,SAAU,KAAK,YAAY,YAC5B,EACD,MACF,CAEA,KAAK,SAAS,KAAKA,CAAK,EAGnBA,EAAc,aACjB,KAAK,IAAKA,EAAc,YAAY,EAC3BA,aAAiBxD,cAAmB,YAC7C,KAAK,IAAIwD,CAAK,EAGhB,KAAK,OAAO,MAAM,YAAa,WAAY,2BAA4B,CACrE,GAAI,KAAK,GACT,QAAUA,EAAc,IAAM,UAC9B,WAAY,KAAK,SAAS,OAC3B,CACH,CAGA,YAAYA,EAA0B,CACpC,MAAM5L,EAAQ,KAAK,SAAS,QAAQ4L,CAAK,EACrC5L,IAAU,KACZ,KAAK,SAAS,OAAOA,EAAO,CAAC,EAGxB4L,EAAc,aACjB,KAAK,OAAQA,EAAc,YAAY,EAC9BA,aAAiBxD,cAAmB,YAC7C,KAAK,OAAOwD,CAAK,EAGnB,KAAK,OAAO,MAAM,YAAa,cAAe,+BAAgC,CAC5E,GAAI,KAAK,GACT,QAAUA,EAAc,IAAM,UAC9B,WAAY,KAAK,SAAS,OAC3B,EAEL,CAGA,SAASvD,EAAqC,CAC5C,OAAO,KAAK,SAAS,KAAKuD,GAAUA,EAAc,KAAOvD,CAAE,CAC7D,CAGA,gBAAgC,CAC9B,MAAO,CAAC,GAAG,KAAK,QAAQ,CAC1B,CAGA,eAAsB,CACpB,KAAK,SAAS,OAAS,EACvB,KAAK,YACL,KAAK,OAAO,MAAM,YAAa,gBAAiB,uBAAwB,CAAE,GAAI,KAAK,GAAI,CACzF,CAKA,uBAAuBlJ,EAAe+I,EAAsB,CAC1D,KAAK,OAAO,MAAM,YAAa,yBAA0B,6BAA8B,CACrF,GAAI,KAAK,GACT,cAAe,CAAE,MAAA/I,EAAO,OAAA+I,CAAA,EACxB,kBAAmB,KAAK,KACzB,EAGG,KAAK,mBACP,KAAK,iBAAmBtR,EAAAC,EAAA,GACnB,KAAK,kBADc,CAEtB,MAAAsI,EACA,OAAA+I,CAAA,GAEF,KAAK,SAAS,KAAK,gBAAgB,EAEvC,CAGA,OAAO/I,EAAe+I,EAAsB,CAC1C,KAAK,OAAO,MAAM,YAAa,SAAU,gBAAiB,CACxD,GAAI,KAAK,GACT,cAAe,CAAE,MAAA/I,EAAO,OAAA+I,CAAA,EACxB,kBAAmB,KAAK,KACzB,EAKD,KAAK,WAAW/I,EAAO+I,CAAM,EAG7B,KAAK,0BAA0B/I,EAAO+I,CAAM,EAG5C,KAAK,YAAY/I,EAAO+I,CAAM,CAChC,CAMU,WAAW/I,EAAe+I,EAAsB,CACxD,KAAK,OAAO,MAAM,YAAa,aAAc,gBAAiB,CAC5D,GAAI,KAAK,GACT,cAAe,CAAE,MAAA/I,EAAO,OAAA+I,CAAA,EACxB,kBAAmB,KAAK,KACzB,EAGG,KAAK,mBAEP,KAAK,iBAAmBtR,EAAAC,EAAA,GACnB,KAAK,kBADc,CAEtB,MAAAsI,EACA,OAAA+I,CAAA,GAIF,KAAK,SAAS,KAAK,gBAAgB,EAIvC,CAKU,0BAA0B/I,EAAe+I,EAAsB,CACvE,KAAK,OAAO,MAAM,YAAa,4BAA6B,iCAAkC,CAC5F,GAAI,KAAK,GACT,cAAe,CAAE,MAAA/I,EAAO,OAAA+I,CAAA,EACxB,WAAY,KAAK,SAAS,OAC3B,EAGD,KAAK,SAAS,QAAQ,CAAC0D,EAAY5L,IAAkB,CACnD,GAAI4L,GAAS,OAAOA,EAAM,QAAW,WACnC,GAAI,CACFA,EAAM,OAAOzM,EAAO+I,CAAM,EAC1B,KAAK,OAAO,MAAM,YAAa,4BAA6B,sBAAuB,CACjF,GAAI,KAAK,GACT,UAAW0D,EAAM,MAAQA,EAAM,IAAM,SAAS5L,CAAK,GACnD,UAAW4L,EAAM,YAAY,KAC9B,CACH,OAASjV,EAAO,CACd,KAAK,OAAO,KAAK,YAAa,4BAA6B,yBAA0B,CACnF,GAAI,KAAK,GACT,UAAWiV,EAAM,MAAQA,EAAM,IAAM,SAAS5L,CAAK,GACnD,MAAOrJ,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,CACH,CAEJ,CAAC,CACH,CAMU,YAAYwI,EAAe+I,EAAsB,CACzD,KAAK,OAAO,MAAM,YAAa,cAAe,yBAA0B,CACtE,GAAI,KAAK,GACT,cAAe,CAAE,MAAA/I,EAAO,OAAA+I,CAAA,CAAO,CAChC,CAIH,CAKA,oBAA8B,CAC5B,MAAO,CACL,EAAG,KAAK,EACR,EAAG,KAAK,EACR,MAAO,KAAK,MACZ,OAAQ,KAAK,OAEjB,CAGA,eAAqB,CACnB,MAAO,CACL,GAAI,KAAK,GACT,KAAM,KAAK,cACX,WAAY,KAAK,SAAS,OAE9B,CAGA,kBAAyB,CACvB,KAAK,OAAO,MAAM,YAAa,mBAAoB,qBAAsB,CAAE,GAAI,KAAK,GAAI,CAE1F,CAGA,cAAqB,CACnB,KAAK,OAAO,MAAM,YAAa,eAAgB,kBAAmB,CAAE,GAAI,KAAK,GAAI,CAEnF,CAGA,QAAQ2D,EAA2B,CACjC,KAAK,OAAO,MAAM,YAAa,UAAW,uBAAwB,CAAE,GAAI,KAAK,GAAI,EAGjF,KAAK,gBAGL,MAAM,QAAQA,CAAS,CACzB,CAQA,OAAO,iBACL/U,EACA4H,EACA8J,EACW,CACX,MAAMvR,EAASkH,EAAO,cAEtBlH,EAAO,MAAM,YAAa,mBAAoB,iCAAkC,CAC9E,SAAUH,EAAO,GACjB,WAAYA,EAAO,KACnB,UAAW,CAAC,CAAC0R,EACb,UAAUA,GAAA,YAAAA,EAAQ,OAAQ,OAC3B,EAED,GAAI,CAEF,MAAMsD,EAAY,IAAI3D,GAAUzJ,EAAO5H,EAAO,GAAK,EAAGA,EAAO,GAAK,CAAC,EAWnE,GARIA,EAAO,OACTgV,EAAU,KAAOhV,EAAO,MAIzBgV,EAAkB,GAAKhV,EAAO,GAG1B4H,EAAc,qBAAsB,CACvCzH,EAAO,MACL,YACA,mBACA,yDACA,CACE,SAAUH,EAAO,GACjB,UAAW4H,EAAM,YAAY,KAC/B,EAGF,MAAM0D,EAAW1D,EAAc,qBAAqB5H,EAAO,EAAE,EAC7DG,EAAO,MAAM,YAAa,mBAAoB,8BAA+B,CAC3E,SAAUH,EAAO,GACjB,cAAe,CAAC,EAACsL,GAAA,MAAAA,EAAS,YAC1B,SAAU,CAAC,EAACA,GAAA,MAAAA,EAAS,OACrB,kBAAmBA,GAAA,YAAAA,EAAS,kBAC7B,EAED0J,EAAU,sBAAsB1J,CAAO,CACzC,MACEnL,EAAO,KACL,YACA,mBACA,8CACA,CACE,SAAUH,EAAO,GACjB,UAAW4H,EAAM,YAAY,KAC/B,EAKJ,GAAI5H,EAAO,WAAY,CAYrB,GAVIA,EAAO,WAAW,iBACpBgV,EAAU,SAAS,CACjB,gBAAiBhV,EAAO,WAAW,gBACnC,oBAAqB,GACrB,cAAe,UACf,UAAW,SACZ,EAICA,EAAO,WAAW,OAASA,EAAO,WAAW,OAAQ,CAEvD,IAAIqI,EAAQrI,EAAO,WAAW,MAC1BoR,EAASpR,EAAO,WAAW,OAE3BqI,IAAU,SACZA,EAAQT,EAAM,KAAK,OAAO,OAExBwJ,IAAW,SACbA,EAASxJ,EAAM,KAAK,OAAO,QAG7BoN,EAAU,SAAS,CACjB,MAAA3M,EACA,OAAA+I,EACA,oBAAqB,GACrB,cAAe,UACf,UAAW,SACZ,CACH,CAGIpR,EAAO,WAAW,cAAgB,QACpCgV,EAAU,eAAehV,EAAO,WAAW,WAAW,CAE1D,CAGA,OAAI0R,GACFA,EAAO,IAAIsD,CAAS,EACpB7U,EAAO,MAAM,YAAa,mBAAoB,4BAA6B,CACzE,SAAUH,EAAO,GACjB,SAAU0R,EAAO,MAAQ,UAC1B,IAGD9J,EAAM,IAAI,SAASoN,CAAS,EAC5B7U,EAAO,MAAM,YAAa,mBAAoB,2BAA4B,CACxE,SAAUH,EAAO,GAClB,GAGHG,EAAO,KAAK,YAAa,mBAAoB,6CAA8C,CACzF,SAAUH,EAAO,GACjB,WAAYA,EAAO,KACnB,iBAAkBgV,EAAU,YAAY,KACzC,EAEMA,CACT,OAASnV,EAAO,CACd,MAAAM,EAAO,MAAM,YAAa,mBAAoB,yCAA0C,CACtF,SAAUH,EAAO,GACjB,MAAOH,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EACKA,CACR,CACF,CACF,CCziDO,MAAMoV,WAAyBlE,CAAsB,CAC1D,aAAc,CACZ,MAAM,CAAC,WAAW,CAAC,EACnB5Q,EAAO,MAAM,mBAAoB,cAAe,+BAAgC,CAC9E,eAAgB,KAAK,mBAAkB,CACxC,CACH,CAMA,iBAAiBgR,EAA2D,CAE1E,GAAIA,EAAM,OAAS,YACjB,OAAAhR,EAAO,MACL,mBACA,mBACA,2CACA,CACE,aAAc,YACd,WAAYgR,EAAM,KACpB,EAEK,KAGT,MAAMnR,EAASmR,EAAM,OACfvJ,EAAQuJ,EAAM,MAEpBhR,EAAO,MAAM,mBAAoB,mBAAoB,iCAAkC,CACrF,SAAUH,EAAO,GACjB,WAAYmR,EAAM,KAClB,OAAQ,CACN,EAAGnR,EAAO,EACV,EAAGA,EAAO,EACV,MAAOA,EAAO,MACd,OAAQA,EAAO,OACf,KAAMA,EAAO,KACf,CACD,EAED,GAAI,CAEF,MAAMgV,EAAY,IAAI3D,GACpBzJ,EACA5H,EAAO,GACPA,EAAO,GAAK,EACZA,EAAO,GAAK,EACXmR,EAAM,QAAkB,MAU3B,GAPAhR,EAAO,MAAM,mBAAoB,mBAAoB,mCAAoC,CACvF,SAAUH,EAAO,GACjB,cAAegV,EAAU,YAAY,KACrC,SAAU,CAAE,EAAGA,EAAU,EAAG,EAAGA,EAAU,EAAE,CAC5C,EAGIpN,EAAc,qBAAsB,CACvCzH,EAAO,MACL,mBACA,mBACA,kDACA,CACE,SAAUH,EAAO,GACjB,UAAW4H,EAAM,YAAY,KAC/B,EAGF,MAAM0D,EAAW1D,EAAc,qBAAqB5H,EAAO,EAAE,EAC7DG,EAAO,MAAM,mBAAoB,mBAAoB,8BAA+B,CAClF,SAAUH,EAAO,GACjB,QAAAsL,EACA,cAAe,CAAC,EAACA,GAAA,MAAAA,EAAS,YAC1B,SAAU,CAAC,EAACA,GAAA,MAAAA,EAAS,OACrB,kBAAmBA,GAAA,YAAAA,EAAS,kBAC7B,EAED0J,EAAU,sBAAsB1J,CAAO,EAEvCnL,EAAO,MACL,mBACA,mBACA,yCACA,CACE,SAAUH,EAAO,GACjB,cAAe,CAAC,CAACsL,EAAQ,WACzB,SAAU,CAAC,CAACA,EAAQ,MACpB,kBAAmBA,EAAQ,kBAC7B,CAEJ,MACEnL,EAAO,KACL,mBACA,mBACA,8CACA,CACE,SAAUH,EAAO,GACjB,UAAW4H,EAAM,YAAY,KAC/B,EAqCJ,GAhCA,KAAK,oBAAoBoN,EAAW7D,CAAK,EAGrCnR,EAAO,OAASA,EAAO,QAAU,SACnCG,EAAO,MAAM,mBAAoB,mBAAoB,yBAA0B,CAC7E,SAAUH,EAAO,GACjB,MAAOA,EAAO,MACd,OAAQA,EAAO,QAAUA,EAAO,MACjC,EACDgV,EAAU,QACRhV,EAAO,MACP,OAAOA,EAAO,QAAW,SAAWA,EAAO,OAASA,EAAO,QAK/DgV,EAAU,KAAOhV,EAAO,MAAQA,EAAO,GAGnCA,EAAO,cAAgB,SACzBG,EAAO,MAAM,mBAAoB,mBAAoB,kCAAmC,CACtF,SAAUH,EAAO,GACjB,YAAaA,EAAO,YACrB,EACGA,EAAO,YACTgV,EAAU,iBAEVA,EAAU,sBAKVhV,EAAO,gBAAiB,CAC1BG,EAAO,MAAM,mBAAoB,mBAAoB,qCAAsC,CACzF,SAAUH,EAAO,GACjB,gBAAiBA,EAAO,gBACzB,EAED,MAAMkV,EAAatN,EAAM,IAAI,UAC3B,EACA,EACA,OAAO5H,EAAO,OAAU,SAAWA,EAAO,MAAQ,IAClD,OAAOA,EAAO,QAAW,SAAWA,EAAO,OAAS,IACpD,KAAK,WAAW,OAAOA,EAAO,eAAe,CAAC,GAEhDgV,EAAU,IAAIE,CAAU,EAGxBF,EAAU,QAAQE,EAAW,MAAOA,EAAW,MAAM,EAErD/U,EAAO,MAAM,mBAAoB,mBAAoB,6BAA8B,CACjF,SAAUH,EAAO,GACjB,eAAgB,CAAE,MAAOkV,EAAW,MAAO,OAAQA,EAAW,OAAO,CACtE,CACH,CAEA,OAAA/U,EAAO,KAAK,mBAAoB,mBAAoB,wCAAyC,CAC3F,SAAUH,EAAO,GACjB,cAAegV,EAAU,YAAY,KACrC,cAAeA,EAAU,KACzB,cAAe,CAAC,CAAChV,EAAO,gBACxB,KAAM,CAAE,MAAOgV,EAAU,MAAO,OAAQA,EAAU,OAAO,CAC1D,EAEMA,CACT,OAASnV,EAAO,CACd,OAAAM,EAAO,MACL,mBACA,mBACA,2CACAN,CAAA,EAEK,IACT,CACF,CAKQ,WAAWwU,EAAuB,CACxC,GAAI,CAEF,MAAMc,EAAad,EAAM,WAAW,GAAG,EAAIA,EAAM,MAAM,CAAC,EAAIA,EAGtDe,EAAW,SAASD,EAAY,EAAE,EAExC,OAAAhV,EAAO,MAAM,mBAAoB,aAAc,eAAgB,CAC7D,cAAekU,EACf,WAAAc,EACA,SAAU,KAAKA,CAAU,GACzB,YAAaC,CAAA,CACd,EAEMA,CACT,OAASvV,EAAO,CACd,OAAAM,EAAO,KAAK,mBAAoB,aAAc,uCAAwC,CACpF,MAAAkU,EACA,MAAOxU,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC7D,EACM,OACT,CACF,CACF,CClNO,MAAMwV,WAAqBtE,CAAsB,CAGtD,aAAc,CACZ,MAAM,CAAC,OAAO,CAAC,EAHT3Q,EAAA,cAAiBiH,EAAO,cAIhC,CAKA,iBAAiB8J,EAAuD,CAEtE,MAAMnR,EAAUmR,EAAc,QAAU,GAClCvJ,EAAQuJ,EAAM,MAEpB,GAAI,CAEF,GAAI,CAACnR,EAAO,YAAc,CAAC4H,EAAM,SAAS,OAAO5H,EAAO,UAAU,EAChE,YAAK,OAAO,KACV,eACA,mBACA,gBAAgBA,EAAO,UAAU,0BAA0BA,EAAO,EAAE,GACpE,MAEK,KAGT,MAAMsV,EAAQ1N,EAAM,IAAI,MAAM5H,EAAO,GAAK,EAAGA,EAAO,GAAK,EAAGA,EAAO,UAAU,EAG7E,YAAK,oBAAoBsV,EAAOtV,CAAM,EAGlCA,EAAO,QACL,OAAOA,EAAO,OAAU,SAC1BsV,EAAM,SAAStV,EAAO,KAAK,GAClBA,EAAO,MAAM,IAAM,QAAaA,EAAO,MAAM,IAAM,SAC5DsV,EAAM,SAAStV,EAAO,MAAM,GAAK,EAAGA,EAAO,MAAM,GAAK,CAAC,GAKvDA,EAAO,QACTsV,EAAM,UAAUtV,EAAO,OAAO,GAAK,GAAKA,EAAO,OAAO,GAAK,EAAG,EAI5DA,EAAO,aACTsV,EAAM,iBAGDA,CACT,OAASzV,EAAO,CACd,YAAK,OAAO,MACV,eACA,mBACA,0BAAyBG,GAAA,YAAAA,EAAQ,KAAM,SAAS,KAChDH,CAAA,EAEK,IACT,CACF,CACF,CC9DO,MAAM0V,WAAoBxE,CAAsB,CAGrD,aAAc,CACZ,MAAM,CAAC,MAAM,CAAC,EAHR3Q,EAAA,cAAiBiH,EAAO,cAIhC,CAKA,iBAAiB8J,EAAsD,CAErE,MAAMnR,EAAUmR,EAAc,QAAU,GAClCvJ,EAAQuJ,EAAM,MAEpB,GAAI,CACF,MAAMqE,EAAsD,CAC1D,SAAUxV,EAAO,UAAY,OAC7B,WAAYA,EAAO,YAAc,QACjC,MAAOA,EAAO,OAAS,UACvB,gBAAiBA,EAAO,gBACxB,OAAQA,EAAO,OACf,gBAAiBA,EAAO,iBAAmB,EAC3C,OAAQA,EAAO,OACf,MAAOA,EAAO,OAAS,OACvB,SAAUA,EAAO,UAAY,GAC7B,SAAUA,EAAO,UAGbyV,EAAO7N,EAAM,IAAI,KAAK5H,EAAO,GAAK,EAAGA,EAAO,GAAK,EAAGA,EAAO,SAAW,GAAIwV,CAAU,EAG1F,YAAK,oBAAoBC,EAAMzV,CAAM,EAGjCA,EAAO,QACTyV,EAAK,UAAUzV,EAAO,OAAO,GAAK,EAAGA,EAAO,OAAO,GAAK,CAAC,EAIvDA,EAAO,aACTyV,EAAK,iBAGAA,CACT,OAAS5V,EAAO,CACd,YAAK,OAAO,MACV,cACA,mBACA,yBAAwBG,GAAA,YAAAA,EAAQ,KAAM,SAAS,KAC/CH,CAAA,EAEK,IACT,CACF,CACF,CCvDO,MAAM6V,WAAsB3E,CAAsB,CAGvD,aAAc,CACZ,MAAM,CAAC,QAAQ,CAAC,EAHV3Q,EAAA,cAAiBiH,EAAO,cAIhC,CAKA,iBAAiB8J,EAA2D,CAE1E,MAAMnR,EAAUmR,EAAc,QAAU,GAClCvJ,EAAQuJ,EAAM,MAEpB,GAAI,CAEF,MAAMwE,EAAS/N,EAAM,IAAI,UAAU5H,EAAO,GAAK,EAAGA,EAAO,GAAK,CAAC,EAG/D,KAAK,oBAAoB2V,EAAQ3V,CAAM,EAGvC,MAAMkV,EAAatN,EAAM,IAAI,UAC3B,EACA,EACA5H,EAAO,OAAS,IAChBA,EAAO,QAAU,GACjBA,EAAO,iBAAmB,SAItByV,EAAO7N,EAAM,IAAI,KAAK,EAAG,EAAG5H,EAAO,MAAQ,SAAU,CACzD,SAAUA,EAAO,UAAY,OAC7B,MAAOA,EAAO,WAAa,UAC3B,WAAYA,EAAO,YAAc,QAClC,EAGD,OAAAyV,EAAK,UAAU,EAAG,EAGlBE,EAAO,IAAI,CAACT,EAAYO,CAAI,CAAC,EAGzBzV,EAAO,OAASA,EAAO,QAAU,QACnC2V,EAAO,QAAQ3V,EAAO,MAAOA,EAAO,QAAUA,EAAO,KAAK,EAI5D2V,EAAO,iBAGH3V,EAAO,eACT2V,EAAO,GAAG,cAAe,IAAM,CACzB3V,EAAO,aAAa,OACtB2V,EAAO,SAAS3V,EAAO,aAAa,KAAK,EAEvCA,EAAO,aAAa,MACtBkV,EAAW,aACTrC,UAAe,MAAM,aAAa7S,EAAO,aAAa,IAAI,EAAE,MAGlE,CAAC,EAED2V,EAAO,GAAG,aAAc,IAAM,CACxB3V,EAAO,aAAa,OACtB2V,EAAO,SAAS,CAAC,EAEf3V,EAAO,aAAa,MACtBkV,EAAW,aACTrC,UAAe,MAAM,aAAa7S,EAAO,iBAAmB,SAAS,EAAE,MAG7E,CAAC,GAICA,EAAO,SACT2V,EAAO,GAAG,cAAe3V,EAAO,OAAO,EAGlC2V,CACT,OAAS9V,EAAO,CACd,YAAK,OAAO,MACV,gBACA,mBACA,2BAA0BG,GAAA,YAAAA,EAAQ,KAAM,SAAS,KACjDH,CAAA,EAEK,IACT,CACF,CACF,CC7FO,MAAM+V,WAAqB7E,CAAsB,CAGtD,aAAc,CACZ,MAAM,CAAC,YAAa,SAAU,UAAW,WAAY,SAAS,CAAC,EAHzD3Q,EAAA,cAAiBiH,EAAO,eAI9B,KAAK,OAAO,MAAM,eAAgB,QAAS,2BAA4B,CACrE,eAAgB,KAAK,mBAAkB,CACxC,CACH,CAKA,iBAAiB8J,EAA4D,CAE3E,MAAMnR,EAAUmR,EAAc,QAAU,GAClCvJ,EAAQuJ,EAAM,MAEpB,KAAK,OAAO,MAAM,eAAgB,mBAAoB,6BAA8B,CAClF,SAAUnR,EAAO,GACjB,WAAYA,EAAO,KACnB,OAAQ,CACN,EAAGA,EAAO,EACV,EAAGA,EAAO,EACV,MAAOA,EAAO,MACd,OAAQA,EAAO,OACf,UAAWA,EAAO,UAClB,KAAMA,EAAO,KACf,CACD,EAED,GAAI,CACF,IAAI6V,EAA8C,KAElD,OAAQ7V,EAAO,MACb,IAAK,YACH6V,EAAQ,KAAK,gBAAgBjO,EAAO5H,CAAM,EAC1C,MACF,IAAK,SACH6V,EAAQ,KAAK,aAAajO,EAAO5H,CAAM,EACvC,MACF,IAAK,UACH6V,EAAQ,KAAK,cAAcjO,EAAO5H,CAAM,EACxC,MACF,IAAK,WACH6V,EAAQ,KAAK,eAAejO,EAAO5H,CAAM,EACzC,MACF,IAAK,UACH6V,EAAQ,KAAK,cAAcjO,EAAO5H,CAAM,EACxC,MACF,QACE,YAAK,OAAO,KACV,eACA,mBACA,qCACA,CACE,SAAUA,EAAO,GACjB,eAAgB,KAAK,mBAAkB,CACzC,EAEK,KAGX,OAAI6V,IAEF,KAAK,oBAAoBA,EAAO7V,CAAM,EAGtC6V,EAAM,KAAO7V,EAAO,MAAQA,EAAO,GAEnC,KAAK,OAAO,KAAK,eAAgB,mBAAoB,6BAA8B,CACjF,SAAUA,EAAO,GACjB,UAAWA,EAAO,KAClB,iBAAkB6V,EAAM,YAAY,KACpC,UAAWA,EAAM,KAClB,GAGIA,CACT,OAAShW,EAAO,CACd,YAAK,OAAO,MAAM,eAAgB,mBAAoB,qCAAsC,CAC1F,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC5D,SAAUG,EAAO,GACjB,WAAYA,EAAO,KACpB,EACM,IACT,CACF,CAKQ,gBAAgB4H,EAAqB5H,EAA2C,CACtF,KAAK,OAAO,MAAM,eAAgB,kBAAmB,2BAA4B,CAC/E,SAAUA,EAAO,GACjB,WAAY,CAAE,MAAOA,EAAO,MAAO,OAAQA,EAAO,QAClD,UAAWA,EAAO,UACnB,EAED,MAAM8V,EAAYlO,EAAM,IAAI,UAC1B5H,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,OAAS,IAChBA,EAAO,QAAU,IACjB,KAAK,WAAWA,EAAO,WAAa,QAAQ,GAI9C,OAAA8V,EAAU,UAAU,EAAG,CAAC,EAGpB9V,EAAO,OAASA,EAAO,QAAU,QACnC8V,EAAU,QAAQ9V,EAAO,MAAOA,EAAO,QAAUA,EAAO,KAAK,EAGxD8V,CACT,CAKQ,aAAalO,EAAqB5H,EAAuC,CAC/E,KAAK,OAAO,MAAM,eAAgB,eAAgB,wBAAyB,CACzE,SAAUA,EAAO,GACjB,OAAQA,EAAO,QAAUA,EAAO,MAAQ,EACxC,UAAWA,EAAO,UACnB,EAED,MAAM+V,EAAS/V,EAAO,SAAWA,EAAO,OAAS,KAAO,EAClDgW,EAASpO,EAAM,IAAI,OACvB5H,EAAO,GAAK,EACZA,EAAO,GAAK,EACZ+V,EACA,KAAK,WAAW/V,EAAO,WAAa,QAAQ,GAI9C,OAAAgW,EAAO,UAAU,GAAK,EAAG,EAElBA,CACT,CAKQ,cAAcpO,EAAqB5H,EAAuC,CAChF,KAAK,OAAO,MAAM,eAAgB,gBAAiB,yBAA0B,CAC3E,SAAUA,EAAO,GACjB,WAAY,CAAE,MAAOA,EAAO,MAAO,OAAQA,EAAO,QAClD,UAAWA,EAAO,UACnB,EAED,MAAMiW,EAAUrO,EAAM,IAAI,QACxB5H,EAAO,GAAK,EACZA,EAAO,GAAK,EACZA,EAAO,OAAS,IAChBA,EAAO,QAAU,IACjB,KAAK,WAAWA,EAAO,WAAa,QAAQ,GAI9C,OAAAiW,EAAQ,UAAU,GAAK,EAAG,EAEnBA,CACT,CAKQ,eAAerO,EAAqB5H,EAAuC,CACjF,KAAK,OAAO,MAAM,eAAgB,iBAAkB,0BAA2B,CAC7E,SAAUA,EAAO,GACjB,WAAY,CAAE,MAAOA,EAAO,MAAO,OAAQA,EAAO,QAClD,UAAWA,EAAO,UACnB,EAED,MAAMqI,EAAQrI,EAAO,OAAS,IACxBoR,EAASpR,EAAO,QAAU,IAG1BkW,EAAWtO,EAAM,IAAI,SACzB5H,EAAO,GAAK,EACZA,EAAO,GAAK,EACZ,EACA,CAACoR,EAAS,EACV,CAAC/I,EAAQ,EACT+I,EAAS,EACT/I,EAAQ,EACR+I,EAAS,EACT,KAAK,WAAWpR,EAAO,WAAa,QAAQ,GAI9C,OAAAkW,EAAS,UAAU,GAAK,EAAG,EAEpBA,CACT,CAKQ,cAActO,EAAqB5H,EAAuC,CAChF,KAAK,OAAO,MAAM,eAAgB,gBAAiB,yBAA0B,CAC3E,SAAUA,EAAO,GACjB,OAAQA,EAAO,OACf,UAAWA,EAAO,UACnB,EAGD,MAAMmW,EACJnW,EAAO,QAAU,KAAK,oBAAoBA,EAAO,OAAS,IAAKA,EAAO,QAAU,GAAG,EAE/EoW,EAAUxO,EAAM,IAAI,QACxB5H,EAAO,GAAK,EACZA,EAAO,GAAK,EACZmW,EACA,KAAK,WAAWnW,EAAO,WAAa,QAAQ,GAI9C,OAAAoW,EAAQ,UAAU,GAAK,EAAG,EAEnBA,CACT,CAKQ,oBAAoB/N,EAAe+I,EAA0B,CAGnE,MAAMiF,EAAUhO,EAAQ,EAClBiO,EAAUlF,EAAS,EAEnB+E,EAAmB,GACzB,QAASvU,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAM2U,EAAS3U,EAAI,KAAK,GAAM,EACxB4P,EAAI,EAAU6E,EAAU,KAAK,IAAIE,CAAK,EACtC9E,EAAI,EAAU6E,EAAU,KAAK,IAAIC,CAAK,EAC5CJ,EAAO,KAAK3E,EAAGC,CAAC,CAClB,CAEA,OAAO0E,CACT,CAKQ,WAAW9B,EAAgC,CACjD,GAAI,OAAOA,GAAU,SACnB,OAAOA,EAGT,GAAI,OAAOA,GAAU,SAAU,CAC7B,GAAIA,EAAM,WAAW,GAAG,EACtB,OAAO,SAASA,EAAM,MAAM,CAAC,EAAG,EAAE,EAGpC,GAAIA,EAAM,WAAW,IAAI,EACvB,OAAO,SAASA,EAAO,EAAE,EAI3B,MAAMmC,EAAWnC,EAAM,MAAM,qBAAqB,EAClD,GAAImC,EACF,OAAO,SAASA,EAAS,CAAC,EAAG,EAAE,CAEnC,CAGA,YAAK,OAAO,KAAK,eAAgB,aAAc,uCAAwC,CACrF,MAAAnC,EACA,aAAc,SACf,EAEM,QACT,CACF,CC9QO,MAAMoC,EAAN,MAAMA,CAAyB,CAI5B,aAAc,CAFdrW,EAAA,qBAAiD,KAGvDD,EAAO,MACL,2BACA,UACA,cACA,yCAEF,KAAK,0BACP,CAKA,OAAc,aAAwC,CACpD,OAAKsW,EAAyB,WAC5BA,EAAyB,SAAW,IAAIA,GAEnCA,EAAyB,QAClC,CAKQ,0BAAiC,CACvCtW,EAAO,MACL,2BACA,2BACA,iCAGF,GAAI,CAEF,MAAMuW,EAAmB,IAAIzB,GAC7B,KAAK,gBAAgB,YAAayB,CAAgB,EAClDvW,EAAO,MACL,2BACA,2BACA,+BACA,CACE,eAAgBuW,EAAiB,mBAAkB,CACrD,EAIF,MAAMC,EAAe,IAAItB,GACzB,KAAK,gBAAgB,QAASsB,CAAY,EAC1CxW,EAAO,MACL,2BACA,2BACA,2BACA,CACE,eAAgBwW,EAAa,mBAAkB,CACjD,EAIF,MAAMC,EAAc,IAAIrB,GACxB,KAAK,gBAAgB,OAAQqB,CAAW,EACxCzW,EAAO,MACL,2BACA,2BACA,0BACA,CACE,eAAgByW,EAAY,mBAAkB,CAChD,EAIF,MAAMC,EAAgB,IAAInB,GAC1B,KAAK,gBAAgB,SAAUmB,CAAa,EAC5C1W,EAAO,MACL,2BACA,2BACA,4BACA,CACE,eAAgB0W,EAAc,mBAAkB,CAClD,EAIF,MAAMC,EAAe,IAAIlB,GACzB,KAAK,gBAAgB,QAASkB,CAAY,EAC1C3W,EAAO,MACL,2BACA,2BACA,2BACA,CACE,eAAgB2W,EAAa,mBAAkB,CACjD,EAGF3W,EAAO,KACL,2BACA,2BACA,gDACA,CACE,eAAgB,KAAK,UAAU,KAC/B,aAAc,MAAM,KAAK,KAAK,UAAU,MAAM,EAChD,CAEJ,OAASN,EAAO,CACd,MAAAM,EAAO,MACL,2BACA,2BACA,sCACAN,CAAA,EAEIA,CACR,CACF,CAKO,gBAAgBoR,EAAoBxD,EAAmC,CAC5EtN,EAAO,MAAM,2BAA4B,kBAAmB,sBAAuB,CACjF,WAAA8Q,EACA,YAAaxD,EAAQ,YAAY,KACjC,eAAgBA,EAAQ,mBAAkB,CAC3C,EAED,KAAK,UAAU,IAAIwD,EAAYxD,CAAO,EAEtCtN,EAAO,MAAM,2BAA4B,kBAAmB,kCAAmC,CAC7F,WAAA8Q,EACA,eAAgB,KAAK,UAAU,KAChC,CACH,CAKO,iBAAiBE,EAA4D,OAClFhR,EAAO,MAAM,2BAA4B,mBAAoB,uBAAwB,CACnF,SAAUgR,EAAM,OAAO,GACvB,WAAYA,EAAM,KAClB,UAAW,CAAC,CAACA,EAAM,OACnB,WAAYA,EAAM,OAAS,OAAO,KAAKA,EAAM,MAAM,EAAI,EAAC,CACzD,EAED,GAAI,CACF,GAAI,CAACA,EAAM,QAAU,CAACA,EAAM,KAC1B,OAAAhR,EAAO,KAAK,2BAA4B,mBAAoB,yBAA0B,CACpF,UAAW,CAAC,CAACgR,EAAM,OACnB,UAAWA,EAAM,KACjB,MAAAA,CAAA,CACD,EACM,KAGT,MAAM1D,EAAU,KAAK,kBAAkB0D,EAAM,IAAI,EAEjD,GAAI,CAAC1D,EACH,OAAAtN,EAAO,KACL,2BACA,mBACA,mCACA,CACE,WAAYgR,EAAM,KAClB,mBAAoB,MAAM,KAAK,KAAK,UAAU,MAAM,EACpD,SAAUA,EAAM,OAAO,GACzB,EAEK,KAeT,GAZAhR,EAAO,MACL,2BACA,mBACA,sCACA,CACE,SAAUgR,EAAM,OAAO,GACvB,WAAYA,EAAM,KAClB,YAAa1D,EAAQ,YAAY,KACjC,UAAWA,EAAQ,UAAU0D,EAAM,IAAI,EACzC,EAGE,CAAC1D,EAAQ,UAAU0D,EAAM,IAAI,EAC/B,OAAAhR,EAAO,KACL,2BACA,mBACA,yCACA,CACE,WAAYgR,EAAM,KAClB,YAAa1D,EAAQ,YAAY,KACjC,eAAgBA,EAAQ,oBACxB,SAAU0D,EAAM,OAAO,GACzB,EAEK,KAGT,MAAMD,EAAazD,EAAQ,iBAAiB0D,CAAK,EAEjD,OAAID,EACF/Q,EAAO,MACL,2BACA,mBACA,mCACA,CACE,SAAUgR,EAAM,OAAO,GACvB,WAAYA,EAAM,KAClB,iBAAkBD,EAAW,YAAY,KACzC,eAAgBA,EAAW,KAC7B,EAGF/Q,EAAO,MACL,2BACA,mBACA,uCACA,CACE,SAAUgR,EAAM,OAAO,GACvB,WAAYA,EAAM,KAClB,YAAa1D,EAAQ,YAAY,KACnC,EAIGyD,CACT,OAASrR,EAAO,CACd,OAAAM,EAAO,MACL,2BACA,mBACA,gCAA+Bd,EAAA8R,EAAM,SAAN,YAAA9R,EAAc,EAAE,GAC/CQ,CAAA,EAEK,IACT,CACF,CAKQ,kBAAkBoR,EAAoD,CAC5E,OAAO,KAAK,UAAU,IAAIA,CAAU,CACtC,CAMa,kCACXjR,EACA4H,EACA8J,EAC+C,QAAAnP,EAAA,kCAC/CpC,EAAO,MACL,2BACA,oCACA,2CACA,CACE,SAAUH,EAAO,GACjB,WAAWX,EAAAW,EAAO,UAAP,YAAAX,EAAgB,UAC3B,cAAcoJ,EAAAzI,EAAO,UAAP,YAAAyI,EAAgB,aAChC,EAGF,GAAI,CACF,GAAI,GAACqJ,EAAA9R,EAAO,UAAP,MAAA8R,EAAgB,WACnB,OAAA3R,EAAO,KACL,2BACA,oCACA,oCACA,CACE,SAAUH,EAAO,GACjB,WAAY,CAAC,CAACA,EAAO,QACrB,cAAeA,EAAO,QACxB,EAEK,KAGT,KAAM,CAAE,UAAAoG,EAAW,aAAA2Q,EAAe,oBAAuB/W,EAAO,QAGhE,IAAIgX,EAEJ,OAAQ5Q,EAAA,CACN,IAAK,sBACHjG,EAAO,MACL,2BACA,UACA,oCACA,qCAEF,GAAI,CAIF6W,GAHkC,MAAAC,GAAA,IAAM,2BAAAC,EAAA,WAGE,oBAC1C/W,EAAO,MACL,2BACA,UACA,oCACA,gDAEJ,OAASgX,EAAa,CACpB,OAAAhX,EAAO,MACL,2BACA,oCACA,8CACA,CACE,SAAUH,EAAO,GACjB,MAAOmX,aAAuB,MAAQA,EAAY,QAAU,OAAOA,CAAW,EAChF,EAEK,IACT,CACA,MAEF,IAAK,YACHhX,EAAO,MACL,2BACA,UACA,oCACA,2BAEF,GAAI,CAEF6W,GADwB,MAAAC,GAAA,IAAM,2BAAAG,EAAA,WACE,UAChCjX,EAAO,MACL,2BACA,UACA,oCACA,sCAEJ,OAASgX,EAAa,CACpB,OAAAhX,EAAO,MACL,2BACA,oCACA,oCACA,CACE,SAAUH,EAAO,GACjB,MAAOmX,aAAuB,MAAQA,EAAY,QAAU,OAAOA,CAAW,EAChF,EAEK,IACT,CACA,MAEF,QACE,OAAAhX,EAAO,KACL,2BACA,oCACA,0BAA0BiG,CAAS,GACnC,CACE,SAAUpG,EAAO,GACjB,iBAAkB,CAAC,sBAAuB,WAAW,EACvD,EAEK,KAIX,GAAI,OAAOgX,EAAcD,CAAY,GAAM,WAAY,CACrD5W,EAAO,MACL,2BACA,oCACA,gCACA,CACE,SAAUH,EAAO,GACjB,UAAAoG,EACA,aAAA2Q,CAAA,CACF,EAGF,GAAI,CACF,MAAM1L,EAAS2L,EAAcD,CAAY,EAAE/W,EAAQ4H,EAAO8J,CAAM,EAEhE,OAAAvR,EAAO,MACL,2BACA,oCACA,8CACA,CACE,SAAUH,EAAO,GACjB,UAAW,CAAC,CAACqL,EACb,WAAYA,GAAA,YAAAA,EAAQ,YAAY,KAClC,EAGKA,CACT,OAASgM,EAAa,CACpB,OAAAlX,EAAO,MACL,2BACA,oCACA,yCACA,CACE,SAAUH,EAAO,GACjB,UAAAoG,EACA,aAAA2Q,EACA,MAAOM,aAAuB,MAAQA,EAAY,QAAU,OAAOA,CAAW,EAChF,EAEK,IACT,CACF,KACE,QAAAlX,EAAO,KACL,2BACA,oCACA,mBAAmB4W,CAAY,kBAAkB3Q,CAAS,GAC1D,CACE,SAAUpG,EAAO,GACjB,iBAAkB,OAAO,oBAAoBgX,CAAa,EAAE,OAC1DM,GAAQ,OAAON,EAAcM,CAAI,GAAM,WACzC,CACF,EAEK,IAEX,OAASzX,EAAO,CACd,OAAAM,EAAO,MACL,2BACA,oCACA,2CAA2CH,EAAO,EAAE,IACpD,CACE,MAAOH,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC5D,SAAUG,EAAO,GACjB,WAAWoS,EAAApS,EAAO,UAAP,YAAAoS,EAAgB,UAC7B,EAEK,IACT,CACF,GAKO,WAAWnB,EAA6B,CAC7C,MAAMsG,EAAa,KAAK,UAAU,IAAItG,CAAU,EAChD,OAAA9Q,EAAO,MAAM,2BAA4B,aAAc,6BAA8B,CACnF,WAAA8Q,EACA,WAAAsG,CAAA,CACD,EACMA,CACT,CAKO,oBAA+B,CACpC,MAAMC,EAAQ,MAAM,KAAK,KAAK,UAAU,MAAM,EAC9C,OAAArX,EAAO,MACL,2BACA,qBACA,mCACA,CACE,MAAAqX,EACA,MAAOA,EAAM,OACf,EAEKA,CACT,CAKO,WAAWvG,EAAoD,CACpE,MAAMxD,EAAU,KAAK,UAAU,IAAIwD,CAAU,EAC7C,OAAA9Q,EAAO,MAAM,2BAA4B,aAAc,kBAAmB,CACxE,WAAA8Q,EACA,WAAY,CAAC,CAACxD,EACd,YAAaA,GAAA,YAAAA,EAAS,YAAY,KACnC,EACMA,CACT,CAKO,UAIL,CACA,MAAMgK,EAAQ,CACZ,eAAgB,KAAK,UAAU,KAC/B,gBAAiB,MAAM,KAAK,KAAK,UAAU,MAAM,EACjD,eAAgB,MAAM,KAAK,KAAK,UAAU,SAAS,EAAE,IAAI,CAAC,CAAC7T,EAAM6J,CAAO,KAAO,CAC7E,KAAA7J,EACA,aAAc6J,EAAQ,YAAY,KAClC,eAAgBA,EAAQ,mBAAkB,EAC1C,GAGJ,OAAAtN,EAAO,MAAM,2BAA4B,WAAY,6BAA8BsX,CAAK,EACjFA,CACT,CACF,EA5eErX,EADWqW,EACI,YADV,IAAMiB,GAANjB,ECVA,IAAKkB,OAEVA,EAAA,MAAQ,QACRA,EAAA,WAAa,aAGbA,EAAA,aAAe,eACfA,EAAA,cAAgB,gBAChBA,EAAA,WAAa,aACbA,EAAA,WAAa,aAGbA,EAAA,YAAc,cACdA,EAAA,aAAe,eACfA,EAAA,UAAY,YACZA,EAAA,UAAY,YAGZA,EAAA,eAAiB,iBACjBA,EAAA,gBAAkB,kBAnBRA,OAAA,ICqKAC,QACVA,EAAA,OAAS,SACTA,EAAA,SAAW,WACXA,EAAA,SAAW,WACXA,EAAA,MAAQ,QACRA,EAAA,OAAS,SALCA,QAAA,IAYAC,QACVA,EAAA,QAAU,UACVA,EAAA,OAAS,SACTA,EAAA,OAAS,SACTA,EAAA,KAAO,OAJGA,QAAA,IAsKAC,OACVA,EAAA,KAAO,OACPA,EAAA,OAAS,SACTA,EAAA,MAAQ,QACRA,EAAA,QAAU,UAJAA,OAAA,IA8NAC,OACVA,EAAA,MAAQ,QACRA,EAAA,KAAO,OACPA,EAAA,KAAO,OACPA,EAAA,OAAS,SAJCA,OAAA,IAgBqBhY,EAAA,GAC5BgY,GAkBE,IAAKC,QACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,UAAY,YACZA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,MAAQ,QACRA,EAAA,KAAO,OAPGA,QAAA,IA0YAC,OACVA,EAAA,MAAQ,QACRA,EAAA,OAAS,SACTA,EAAA,aAAe,eACfA,EAAA,KAAO,OACPA,EAAA,KAAO,OACPA,EAAA,KAAO,OANGA,OAAA,IAwEAC,QACVA,EAAA,KAAO,OACPA,EAAA,SAAW,WACXA,EAAA,KAAO,OAHGA,QAAA,IASAC,QACVA,EAAA,OAAS,SACTA,EAAA,OAAS,SACTA,EAAA,IAAM,MACNA,EAAA,SAAW,WACXA,EAAA,SAAW,WALDA,QAAA,IAqLAC,OACVA,EAAA,MAAQ,QACRA,EAAA,YAAc,aACdA,EAAA,GAAK,KACLA,EAAA,UAAY,YAJFA,OAAA,IC/sCL,MAAMC,EAAsC,CAA5C,cAEYjY,EAAA,qBAAqC,KAC9CA,EAAA,2BAAqC,MACrCA,EAAA,gCAAmC2X,EAAc,QACjD3X,EAAA,6BAAiC,IACxBA,EAAA,wBAAwC,KACxCA,EAAA,yBAA8C,KAM/D,IAAI,QAA8B,CAChC,OAAO,KAAK,SACd,CAEA,IAAI,aAA6B,CAC/B,OAAO,KAAK,mBACd,CAEA,IAAI,kBAA8B,CAChC,OAAO,KAAK,wBACd,CAEA,IAAI,eAAyB,CAC3B,OAAO,KAAK,qBACd,CAEA,IAAI,WAAiC,CACnC,OAAO,KAAK,YACd,CAEA,IAAI,YAAuC,CACzC,OAAO,KAAK,aACd,CASM,WAAWkY,EAAsC,QAAA/V,EAAA,sBACrDpC,EAAO,KAAK,eAAgB,aAAc,6BAA8B,CAAE,aAAAmY,EAAc,EAExF,GAAI,CACF,KAAK,sBAAwB,GAEzBA,GAAgB,KAAK,UAAU,IAAIA,CAAY,IACjD,MAAM,KAAK,cAAcA,CAAY,GAGvCnY,EAAO,KAAK,eAAgB,aAAc,wCAAwC,CACpF,OAASN,EAAO,CACd,MAAAM,EAAO,MAAM,eAAgB,aAAc,qCAAsC,CAAE,MAAAN,EAAO,EACpFA,CACR,CACF,GAKA,cAAcmS,EAAqB,CACjC7R,EAAO,KAAK,eAAgB,gBAAiB,oBAAqB,CAAE,QAAS6R,EAAM,GAAI,EAEvF,GAAI,CAEF,KAAK,cAAcA,CAAK,EAGxB,KAAK,UAAU,IAAIA,EAAM,GAAIA,CAAK,EAGlC,KAAK,kBAAkBA,CAAK,EAE5B7R,EAAO,KAAK,eAAgB,gBAAiB,gCAAiC,CAC5E,QAAS6R,EAAM,GAChB,CACH,OAASnS,EAAO,CACd,MAAAM,EAAO,MAAM,eAAgB,gBAAiB,2BAA4B,CACxE,MAAAN,EACA,QAASmS,EAAM,GAChB,EACKnS,CACR,CACF,CAKA,gBAAgB0R,EAAqB,OACnCpR,EAAO,KAAK,eAAgB,kBAAmB,sBAAuB,CAAE,QAASoR,EAAI,EAErF,GAAI,CAEF,QAAIlS,EAAA,KAAK,sBAAL,YAAAA,EAA0B,MAAOkS,GACnCpR,EAAO,KAAK,eAAgB,kBAAmB,iCAAkC,CAC/E,QAASoR,CAAA,CACV,EACM,IAIJ,KAAK,UAAU,IAAIA,CAAE,GAM1B,KAAK,UAAU,OAAOA,CAAE,EAGxB,KAAK,gBAAgBA,CAAE,EAEvBpR,EAAO,KAAK,eAAgB,kBAAmB,kCAAmC,CAChF,QAASoR,CAAA,CACV,EACM,KAbLpR,EAAO,KAAK,eAAgB,kBAAmB,kBAAmB,CAAE,QAASoR,EAAI,EAC1E,GAaX,OAAS1R,EAAO,CACd,OAAAM,EAAO,MAAM,eAAgB,kBAAmB,6BAA8B,CAC5E,MAAAN,EACA,QAAS0R,CAAA,CACV,EACM,EACT,CACF,CAKA,SAASA,EAAgC,CACvC,OAAO,KAAK,UAAU,IAAIA,CAAE,CAC9B,CAKA,eAAe+F,EAAkC,CAC/C,UAAWtF,KAAS,KAAK,UAAU,SACjC,GAAIA,EAAM,OAASsF,EACjB,OAAOtF,CAIb,CAKA,UAAUuG,EAA+C,CACvD,MAAMC,EAAS,MAAM,KAAK,KAAK,UAAU,QAAQ,EACjD,OAAOD,EAASC,EAAO,OAAOD,CAAM,EAAIC,CAC1C,CAKA,gBAAgB5U,EAA2B,CACzC,OAAO,KAAK,UAAUoO,GAASA,EAAM,OAASpO,CAAI,CACpD,CAKA,mBAAmB6U,EAAiC,CAClD,OAAO,KAAK,UAAUzG,GAASA,EAAM,UAAYyG,CAAO,CAC1D,CAKA,SAASC,EAA0B,CACjC,OAAO,KAAK,UAAU,IAAIA,CAAO,CACnC,CASM,cAAcA,EAAgC,QAAAnW,EAAA,sBAClDpC,EAAO,KAAK,eAAgB,gBAAiB,mBAAoB,CAAE,QAAAuY,EAAS,EAE5E,GAAI,CACF,MAAM1G,EAAQ,KAAK,UAAU,IAAI0G,CAAO,EACxC,GAAI,CAAC1G,EACH,MAAM,IAAI,MAAM,oBAAoB0G,CAAO,EAAE,EAI3C,KAAK,sBACP,MAAM,KAAK,gBAAgB,KAAK,oBAAoB,EAAE,GAIxD,KAAK,oBAAsB1G,EAC3B,KAAK,yBAA2BA,EAAM,KAGtC,MAAM,KAAK,gBAAgBA,CAAK,EAGhC,KAAK,qBAAqBA,CAAK,EAE/B7R,EAAO,KAAK,eAAgB,gBAAiB,+BAAgC,CAAE,QAAAuY,EAAS,CAC1F,OAAS7Y,EAAO,CACd,MAAAM,EAAO,MAAM,eAAgB,gBAAiB,2BAA4B,CAAE,MAAAN,EAAO,QAAA6Y,EAAS,EACtF7Y,CACR,CACF,GAKM,gBAAgB6Y,EAAgC,QAAAnW,EAAA,4BACpDpC,EAAO,KAAK,eAAgB,kBAAmB,qBAAsB,CAAE,QAAAuY,EAAS,EAEhF,GAAI,GACErZ,EAAA,KAAK,sBAAL,YAAAA,EAA0B,MAAOqZ,IAEnC,MAAM,KAAK,mBAAmB,KAAK,mBAAmB,EAGtD,KAAK,uBAAuB,KAAK,mBAAmB,EAEpD,KAAK,oBAAsB,MAG7BvY,EAAO,KAAK,eAAgB,kBAAmB,iCAAkC,CAAE,QAAAuY,EAAS,CAC9F,OAAS7Y,EAAO,CACd,MAAAM,EAAO,MAAM,eAAgB,kBAAmB,6BAA8B,CAC5E,MAAAN,EACA,QAAA6Y,CAAA,CACD,EACK7Y,CACR,CACF,GAKM,oBAAoByX,EAA6B,QAAA/U,EAAA,sBACrD,MAAMyP,EAAQ,KAAK,eAAesF,CAAI,EACtC,GAAI,CAACtF,EACH,MAAM,IAAI,MAAM,8BAA8BsF,CAAI,EAAE,EAEtD,MAAM,KAAK,cAActF,EAAM,EAAE,CACnC,GAKA,gBAAgC,CAC9B,OAAO,KAAK,mBACd,CAKA,cAAcT,EAAqB,OACjC,QAAOlS,EAAA,KAAK,sBAAL,YAAAA,EAA0B,MAAOkS,CAC1C,CAKM,iBAAiC,QAAAhP,EAAA,sBACjC,KAAK,2BAA6BwV,EAAc,MAClD,MAAM,KAAK,oBAEX,MAAM,KAAK,oBAEf,GAKM,oBAAoC,QAAAxV,EAAA,sBACxC,MAAMoW,EAAc,KAAK,gBAAgBZ,EAAc,KAAK,EACxDY,EAAY,OAAS,IACvB,MAAM,KAAK,cAAcA,EAAY,CAAC,EAAE,EAAE,EAE9C,GAKM,mBAAmC,QAAApW,EAAA,sBACvC,MAAMqW,EAAa,KAAK,gBAAgBb,EAAc,IAAI,EACtDa,EAAW,OAAS,IACtB,MAAM,KAAK,cAAcA,EAAW,CAAC,EAAE,EAAE,EAE7C,GASA,cAAcxS,EAA4C,OACxD,IAAK/G,EAAA,KAAK,sBAAL,MAAAA,EAA0B,aAI/B,OAAO,KAAK,oBAAoB,aAAa+G,CAAS,CACxD,CAKA,SAASyS,EAAsB,OAC7B,GAAI,GAACxZ,EAAA,KAAK,sBAAL,MAAAA,EAA0B,QAC7B,MAAO,UAIT,MAAMyZ,EAAYD,EAAK,MAAM,GAAG,EAChC,IAAIE,EAAe,KAAK,oBAAoB,OAE5C,UAAWC,KAAQF,EACjB,GAAIC,GAAW,OAAOA,GAAY,UAAYC,KAAQD,EACpDA,EAAUA,EAAQC,CAAI,MAEtB,OAAO,UAIX,OAAO,OAAOD,GAAY,SAAWA,EAAU,SACjD,CAKA,WAAWhX,EAAsB,SAC/B,GAAI,GAAC0G,GAAApJ,EAAA,KAAK,sBAAL,YAAAA,EAA0B,UAA1B,MAAAoJ,EAAmC,OACtC,MAAO,GAGT,MAAMwQ,EACJ,KAAK,oBAAoB,QAAQ,MAC/BlX,CACF,EACF,OAAO,OAAOkX,GAAiB,SAAWA,EAAe,CAC3D,CAKA,YAAYlX,EAAsB,SAChC,GAAI,GAAC0G,GAAApJ,EAAA,KAAK,sBAAL,YAAAA,EAA0B,aAA1B,MAAAoJ,EAAsC,UACzC,MAAO,IAGT,MAAMyQ,EACJ,KAAK,oBAAoB,WAAW,SAClCnX,CACF,EACF,OAAO,OAAOmX,GAAkB,SAAWA,EAAgB,EAC7D,CAKA,gBAAgBnX,EAAsB,OACpC,GAAI,GAAC1C,EAAA,KAAK,sBAAL,MAAAA,EAA0B,cAC7B,MAAO,GAGT,MAAM8Z,EACJ,KAAK,oBAAoB,aACvBpX,CACF,EACF,OAAO,OAAOoX,GAAsB,SAAWA,EAAoB,CACrE,CAKA,UAAUpX,EAAsB,OAC9B,GAAI,GAAC1C,EAAA,KAAK,sBAAL,MAAAA,EAA0B,SAC7B,MAAO,OAGT,MAAM+Z,EACJ,KAAK,oBAAoB,QAAQrX,CAAqD,EACxF,OAAO,OAAOqX,GAAgB,SAAWA,EAAc,MACzD,CAKA,qBAAqBrX,EAAsB,SACzC,GAAI,GAAC0G,GAAApJ,EAAA,KAAK,sBAAL,YAAAA,EAA0B,YAA1B,MAAAoJ,EAAqC,UACxC,MAAO,KAGT,MAAM4Q,EACJ,KAAK,oBAAoB,UAAU,SACjCtX,CACF,EACF,OAAO,OAAOsX,GAAkB,SAAWA,EAAgB,GAC7D,CAKA,mBAAmB3Q,EAAqC,OACtD,OAAKrJ,EAAA,KAAK,sBAAL,MAAAA,EAA0B,YAIxBqJ,KAAc,KAAK,oBAAoB,YAHrC,EAIX,CAaA,gBAAgB4Q,EAAkBlT,EAAyB,CACzD,GAAI,CAACkT,GAAW,OAAOA,GAAY,UAAY,EAAE,UAAWA,GAAU,CACpEnZ,EAAO,KAAK,eAAgB,kBAAmB,2BAA4B,CAAE,UAAAiG,EAAW,EACxF,MACF,CAEA,MAAM6L,EAAa,KAAK,cAAc7L,CAAS,EAC/C,GAAI,CAAC6L,EAAY,CACf9R,EAAO,KAAK,eAAgB,kBAAmB,wBAAyB,CAAE,UAAAiG,EAAW,EACrF,MACF,CAGA,KAAK,qBAAqBkT,EAAwBrH,CAAU,CAC9D,CAKA,iBAAiBqH,EAAkBlT,EAAyB,CAC1D,GAAI,CAACkT,GAAW,OAAOA,GAAY,UAAY,EAAE,UAAWA,GAAU,CACpEnZ,EAAO,KAAK,eAAgB,mBAAoB,2BAA4B,CAAE,UAAAiG,EAAW,EACzF,MACF,CAGA,GAAI,CADe,KAAK,cAAcA,CAAS,EAC9B,CACfjG,EAAO,KAAK,eAAgB,mBAAoB,wBAAyB,CAAE,UAAAiG,EAAW,EACtF,MACF,CAGA,MAAMmT,EAAcD,EACpBC,EAAY,MAAM,QAAU,EAC9B,CASA,YAAYC,EAAgC,CAC1C,KAAK,aAAa,IAAIA,CAAQ,CAChC,CAKA,eAAeA,EAAmC,CAChD,OAAO,KAAK,aAAa,OAAOA,CAAQ,CAC1C,CAKA,gBAAuB,CACrB,KAAK,aAAa,OACpB,CASA,eAAkC,CAChC,MAAO,CACL,YAAa,KAAK,UAAU,KAC5B,aAAc,KAAK,oBAAsB,EAAI,EAC7C,eAAgB,KAAK,UAAU,MAAQ,KAAK,oBAAsB,EAAI,GACtE,cAAe,EACf,kBAAmB,EACnB,kBAAmB,EACnB,eAAgB,EAChB,YAAa,EACb,aAAc,EACd,YAAa,CACX,gBAAiB,EACjB,kBAAmB,EACnB,gBAAiB,GAEnB,WAAY,CACV,MAAO,KAAK,gBAAgBzB,EAAc,KAAK,EAAE,OACjD,KAAM,KAAK,gBAAgBA,EAAc,IAAI,EAAE,OAC/C,KAAM,KAAK,gBAAgBA,EAAc,IAAI,EAAE,OAC/C,OAAQ,KAAK,gBAAgBA,EAAc,MAAM,EAAE,QAErD,cAAe,CACb,QAAS,EACT,QAAS,EACT,UAAW,EACX,QAAS,EACT,QAAS,EACT,MAAO,EACP,KAAM,EACR,CAEJ,CAKA,YAAYW,EAAyB,CACnC,MAAM1G,EAAQ,KAAK,SAAS0G,CAAO,EACnC,GAAI,CAAC1G,EACH,MAAM,IAAI,MAAM,oBAAoB0G,CAAO,EAAE,EAY/C,OAAO,KAAK,UATwB,CAClC,SAAU,CACR,QAAS,QACT,eAAgB,KAChB,WAAY,gBAEd,MAAA1G,CAAA,EAG4B,KAAM,CAAC,CACvC,CAKA,YAAYhS,EAAwB,CAClC,GAAI,CACF,MAAMyZ,EAAoC,KAAK,MAAMzZ,CAAM,EAC3D,YAAK,cAAcyZ,EAAa,KAAK,EAC9BA,EAAa,KACtB,OAAS5Z,EAAO,CACd,MAAM,IAAI,MAAM,2BAA2BA,CAAK,EAAE,CACpD,CACF,CASA,OAAc,CACZ,KAAK,UAAU,QACf,KAAK,oBAAsB,KAC3B,KAAK,yBAA2BkY,EAAc,OAC9C,KAAK,sBAAwB,GAC7B,KAAK,aAAa,QAClB,KAAK,cAAc,OACrB,CAKA,SAAgB,CACd,KAAK,OACP,CASQ,cAAc/F,EAAqB,CACzC,GAAI,CAACA,EAAM,IAAM,CAACA,EAAM,KACtB,MAAM,IAAI,MAAM,6BAA6B,EAG/C,GAAI,CAACA,EAAM,OACT,MAAM,IAAI,MAAM,gCAAgC,EAGlD,GAAI,CAACA,EAAM,WACT,MAAM,IAAI,MAAM,oCAAoC,CAExD,CAKQ,kBAAkBA,EAAqB,CACzCA,EAAM,cACR,OAAO,QAAQA,EAAM,YAAY,EAAE,QAAQ,CAAC,CAAC0H,EAAUzH,CAAU,IAAM,CACrE,KAAK,cAAc,IAAI,GAAGD,EAAM,EAAE,IAAI0H,CAAQ,GAAIzH,CAAU,CAC9D,CAAC,CAEL,CAKQ,gBAAgByG,EAAuB,CAC7C,MAAMiB,EAAyB,GAE/B,KAAK,cAAc,QAAQ,CAACC,EAAG1Y,IAAQ,CACjCA,EAAI,WAAW,GAAGwX,CAAO,GAAG,GAC9BiB,EAAa,KAAKzY,CAAG,CAEzB,CAAC,EAEDyY,EAAa,QAAQzY,GAAO,KAAK,cAAc,OAAOA,CAAG,CAAC,CAC5D,CAKc,gBAAgB8Q,EAA8B,QAAAzP,EAAA,sBAC1D,GAAI,CAEF,KAAK,mBAAmByP,CAAK,EAGzBA,EAAM,cACR,KAAK,kBAAkBA,CAAK,EAG9B7R,EAAO,KAAK,eAAgB,kBAAmB,uBAAwB,CAAE,QAAS6R,EAAM,GAAI,CAC9F,OAASnS,EAAO,CACd,MAAAM,EAAO,MAAM,eAAgB,kBAAmB,+BAAgC,CAC9E,MAAAN,EACA,QAASmS,EAAM,GAChB,EACKnS,CACR,CACF,GAKc,mBAAmBmS,EAA8B,QAAAzP,EAAA,sBAC7D,GAAI,CAEF,KAAK,mBAAmByP,CAAK,EAE7B7R,EAAO,KAAK,eAAgB,qBAAsB,yBAA0B,CAC1E,QAAS6R,EAAM,GAChB,CACH,OAASnS,EAAO,CACd,MAAAM,EAAO,MAAM,eAAgB,qBAAsB,kCAAmC,CACpF,MAAAN,EACA,QAASmS,EAAM,GAChB,EACKnS,CACR,CACF,GAKQ,mBAAmBmS,EAAqB,SAC9C,MAAM6H,EAAO,SAAS,gBAGlB7H,EAAM,QACR,KAAK,qBAAqB6H,EAAM7H,EAAM,OAAQ,eAAe,GAI3D3S,EAAA2S,EAAM,UAAN,MAAA3S,EAAe,OACjB,OAAO,QAAQ2S,EAAM,QAAQ,KAAK,EAAE,QAAQ,CAAC,CAAC9Q,EAAKqC,CAAK,IAAM,CAC5DsW,EAAK,MAAM,YAAY,mBAAmB3Y,CAAG,GAAI,GAAGqC,CAAK,IAAI,CAC/D,CAAC,GAICkF,EAAAuJ,EAAM,aAAN,MAAAvJ,EAAkB,UACpB,OAAO,QAAQuJ,EAAM,WAAW,QAAQ,EAAE,QAAQ,CAAC,CAAC9Q,EAAKqC,CAAK,IAAM,CAClEsW,EAAK,MAAM,YAAY,qBAAqB3Y,CAAG,GAAI,GAAGqC,CAAK,IAAI,CACjE,CAAC,CAEL,CAKQ,qBAAqB+V,EAAsBQ,EAAaC,EAAsB,CACpF,OAAO,QAAQD,CAAM,EAAE,QAAQ,CAAC,CAAC5Y,EAAKqC,CAAK,IAAM,CAC3C,OAAOA,GAAU,SACnB+V,EAAQ,MAAM,YAAY,GAAGS,CAAM,IAAI7Y,CAAG,GAAIqC,CAAK,EAC1C,OAAOA,GAAU,UAAYA,IAAU,MAChD,KAAK,qBAAqB+V,EAAS/V,EAAO,GAAGwW,CAAM,IAAI7Y,CAAG,EAAE,CAEhE,CAAC,CACH,CAKQ,kBAAkB8Q,EAAqB,CAC7C,MAAMrP,EAAO,SAAS,KAGtBA,EAAK,UAAU,IAAI,SAASqP,EAAM,EAAE,EAAE,EAGlCA,EAAM,cACR,OAAO,KAAKA,EAAM,YAAY,EAAE,QAAQ0H,GAAY,CAClD,MAAMtT,EAAYsT,EAAS,QAAQ,IAAK,EAAE,EAC1C/W,EAAK,UAAU,IAAIyD,CAAS,CAC9B,CAAC,CAEL,CAKQ,mBAAmB4L,EAAqB,CAC9C,MAAMrP,EAAO,SAAS,KAGtBA,EAAK,UAAU,OAAO,SAASqP,EAAM,EAAE,EAAE,EAGrCA,EAAM,cACR,OAAO,KAAKA,EAAM,YAAY,EAAE,QAAQ0H,GAAY,CAClD,MAAMtT,EAAYsT,EAAS,QAAQ,IAAK,EAAE,EAC1C/W,EAAK,UAAU,OAAOyD,CAAS,CACjC,CAAC,CAEL,CAKQ,qBAAqB4L,EAAqB,CAChD,KAAK,aAAa,QAAQwH,GAAY,OACpC,GAAI,EACFna,EAAAma,EAAS,mBAAT,MAAAna,EAAA,KAAAma,EAA4BxH,EAAO,KAAK,oBAC1C,OAASnS,EAAO,CACdM,EAAO,MAAM,eAAgB,uBAAwB,0BAA2B,CAC9E,MAAAN,EACA,QAASmS,EAAM,GAChB,CACH,CACF,CAAC,CACH,CAKQ,uBAAuBA,EAAqB,CAClD,KAAK,aAAa,QAAQwH,GAAY,OACpC,GAAI,EACFna,EAAAma,EAAS,qBAAT,MAAAna,EAAA,KAAAma,EAA8BxH,EAAO,KACvC,OAASnS,EAAO,CACdM,EAAO,MAAM,eAAgB,yBAA0B,0BAA2B,CAChF,MAAAN,EACA,QAASmS,EAAM,GAChB,CACH,CACF,CAAC,CACH,CAKQ,qBAAqBsH,EAAsBrH,EAA+B,CAE5EA,EAAW,kBACbqH,EAAQ,MAAM,gBAAkBrH,EAAW,iBAEzCA,EAAW,QACbqH,EAAQ,MAAM,MAAQrH,EAAW,OAE/BA,EAAW,UACbqH,EAAQ,MAAM,QAAU,GAAGrH,EAAW,OAAO,MAE3CA,EAAW,SACbqH,EAAQ,MAAM,OAAS,GAAGrH,EAAW,MAAM,MAEzCA,EAAW,eACbqH,EAAQ,MAAM,aAAe,GAAGrH,EAAW,YAAY,MAErDA,EAAW,oBACbqH,EAAQ,MAAM,aAAe,GAAGrH,EAAW,iBAAiB,MAE1DA,EAAW,WACbqH,EAAQ,MAAM,SAAW,GAAGrH,EAAW,QAAQ,MAE7CA,EAAW,aACbqH,EAAQ,MAAM,WAAarH,EAAW,WAAW,YAE/CA,EAAW,YACbqH,EAAQ,MAAM,UAAYrH,EAAW,WAEnCA,EAAW,UACbqH,EAAQ,MAAM,QAAUrH,EAAW,SAEjCA,EAAW,gBACbqH,EAAQ,MAAM,cAAgBrH,EAAW,eAEvCA,EAAW,aACbqH,EAAQ,MAAM,WAAarH,EAAW,YAEpCA,EAAW,iBACbqH,EAAQ,MAAM,eAAiBrH,EAAW,gBAExCA,EAAW,SACbqH,EAAQ,MAAM,OAASrH,EAAW,QAEhCA,EAAW,YACbqH,EAAQ,MAAM,UAAYrH,EAAW,WAEnCA,EAAW,WACbqH,EAAQ,MAAM,SAAWrH,EAAW,UAElCA,EAAW,OAAS,OAAOA,EAAW,OAAU,WAClDqH,EAAQ,MAAM,MAAQ,GAAGrH,EAAW,MAAM,KAAK,GAAGA,EAAW,MAAM,IAAI,IAErEA,EAAW,QAAU,OAAOA,EAAW,QAAW,WACpDqH,EAAQ,MAAM,OAAS,GAAGrH,EAAW,OAAO,KAAK,GAAGA,EAAW,OAAO,IAAI,IAExEA,EAAW,YACbqH,EAAQ,MAAM,UAAYrH,EAAW,WAEnCA,EAAW,aACbqH,EAAQ,MAAM,WAAarH,EAAW,YAEpCA,EAAW,eACbqH,EAAQ,MAAM,UAAYrH,EAAW,aAEzC,CACF,CCh2BO,MAAM+H,EAA0C,CAOrD,YAAYC,EAA8B,CANzB7Z,EAAA,cAAiBiH,EAAO,eACxBjH,EAAA,qBACAA,EAAA,6BAA6D,KAC7DA,EAAA,wBAAwC,KACxCA,EAAA,0BAA+C,KAG9D,KAAK,aAAe6Z,GAAgB,IAAI5B,GAExC,KAAK,OAAO,KAAK,iBAAkB,cAAe,6BAA6B,CACjF,CASM,sBACJxQ,EACA6Q,EACAwB,EACiC,QAAA3X,EAAA,sBACjC,MAAM+H,EAAY,YAAY,MACxBe,EAAiC,CACrC,QAAS,GACT,QAAAqN,EACA,eAAgB,GAChB,OAAQ,GACR,SAAU,GAGZ,GAAI,CACF,KAAK,OAAO,KAAK,iBAAkB,wBAAyB,6BAA8B,CACxF,SAAA7Q,EACA,QAAA6Q,CAAA,CACD,EAGD,MAAM1G,EAAQ,KAAK,SAAS0G,CAAO,EACnC,GAAI,CAAC1G,EACH,OAAA3G,EAAO,OAAO,KAAK,iBAAiB,EAC7BA,EAIT,MAAM8O,EAA+Cpa,EAAA,CACnD,SAAA8H,EACA,YAAauQ,EAAiB,MAC9B,SAAU,GACP8B,GAIL,aAAM,KAAK,kBAAkBlI,EAAOmI,CAAkB,EAGtD,MAAM,KAAK,aAAa,cAAczB,CAAO,EAG7C,KAAK,aAAa,IAAI7Q,EAAUmK,CAAK,EAGrC3G,EAAO,QAAU,GACjBA,EAAO,QAAUxD,EACjBwD,EAAO,eAAiB,GACxBA,EAAO,SAAW,YAAY,MAAQf,EAEtC,KAAK,kBAAkB,IAAI,GAAGzC,CAAQ,IAAI6Q,CAAO,GAAIrN,CAAM,EAE3D,KAAK,OAAO,KAAK,iBAAkB,wBAAyB,+BAAgC,CAC1F,SAAAxD,EACA,QAAA6Q,EACA,SAAUrN,EAAO,SACjB,eAAgBA,EAAO,eAAe,OACvC,EAEMA,CACT,OAASxL,EAAO,CACd,OAAAwL,EAAO,OAAO,KAAK,qBAAqB,EACxCA,EAAO,SAAW,YAAY,MAAQf,EAEtC,KAAK,OAAO,MAAM,iBAAkB,wBAAyB,0BAA2B,CACtF,MAAAzK,EACA,SAAAgI,EACA,QAAA6Q,CAAA,CACD,EAEMrN,CACT,CACF,GAKM,uBACJ6F,EACAwH,EACAwB,EACiC,QAAA3X,EAAA,4BACjC,MAAM+H,EAAY,YAAY,MACxBe,EAAiC,CACrC,QAAS,GACT,QAAAqN,EACA,eAAgB,GAChB,OAAQ,GACR,SAAU,GAGZ,GAAI,CACF,KAAK,OAAO,MACV,iBACA,yBACA,gCACA,CACE,eAAgBxH,EAAW,YAAY,KACvC,QAAAwH,CAAA,CACF,EAIF,MAAM1G,EAAQ,KAAK,SAAS0G,CAAO,EACnC,GAAI,CAAC1G,EACH,OAAA3G,EAAO,OAAO,KAAK,oBAAoBqN,CAAO,EAAE,EACzCrN,EAIT,MAAM8O,EAA+Cpa,EAAA,CACnD,WAAUV,EAAA6R,EAAW,QAAX,YAAA7R,EAAkB,MAAM,MAAO,UACzC,aAAc6R,EAAW,MAAQA,EAAW,YAAY,KACxD,YAAakH,EAAiB,YAC9B,SAAU,GACP8B,GAIL,aAAM,KAAK,+BAA+BhJ,EAAYc,EAAOmI,CAAkB,EAE/E9O,EAAO,QAAU,GACjBA,EAAO,eAAiB,GACxBA,EAAO,SAAW,YAAY,MAAQf,EAEtC,KAAK,OAAO,MACV,iBACA,yBACA,+BACA,CACE,eAAgB4G,EAAW,YAAY,KACvC,QAAAwH,EACA,SAAUrN,EAAO,SACnB,EAGKA,CACT,OAASxL,EAAO,CACd,OAAAwL,EAAO,OAAO,KAAK,uBAAuBxL,CAAK,EAAE,EACjDwL,EAAO,SAAW,YAAY,MAAQf,EAEtC,KAAK,OAAO,MAAM,iBAAkB,yBAA0B,2BAA4B,CACxF,MAAAzK,EACA,eAAgBqR,EAAW,YAAY,KACvC,QAAAwH,CAAA,CACD,EAEMrN,CACT,CACF,GAKM,oBACJxD,EACAuS,EACAF,EACiC,QAAA3X,EAAA,sBACjC,GAAI,CACF,KAAK,OAAO,KAAK,iBAAkB,sBAAuB,4BAA6B,CACrF,SAAAsF,EACA,WAAAuS,CAAA,CACD,EAGD,MAAM,KAAK,wBAAwBvS,CAAQ,EAG3C,MAAMwD,EAAS,MAAM,KAAK,sBAAsBxD,EAAUuS,EAAYF,CAAO,EAE7E,YAAK,OAAO,KAAK,iBAAkB,sBAAuB,8BAA+B,CACvF,SAAArS,EACA,WAAAuS,EACA,QAAS/O,EAAO,QACjB,EAEMA,CACT,OAASxL,EAAO,CACd,WAAK,OAAO,MAAM,iBAAkB,sBAAuB,sBAAuB,CAChF,MAAAA,EACA,SAAAgI,EACA,WAAAuS,CAAA,CACD,EACKva,CACR,CACF,GAKM,wBAAwBgI,EAAiC,QAAAtF,EAAA,sBAC7D,GAAI,CACF,KAAK,OAAO,KACV,iBACA,0BACA,+BACA,CACE,SAAAsF,CAAA,CACF,EAIF,KAAK,qBAAqBA,CAAQ,EAGlC,KAAK,aAAa,OAAOA,CAAQ,EAEjC,KAAK,OAAO,KACV,iBACA,0BACA,iCACA,CACE,SAAAA,CAAA,CACF,CAEJ,OAAShI,EAAO,CACd,WAAK,OAAO,MAAM,iBAAkB,0BAA2B,4BAA6B,CAC1F,MAAAA,EACA,SAAAgI,CAAA,CACD,EACKhI,CACR,CACF,GASA,uBAAuBgI,EAAiC,CACtD,MAAMwS,EAAc,KAAK,aAAa,IAAIxS,CAAQ,GAAK,KAAK,aAAa,iBAEzE,YAAK,OAAO,MAAM,iBAAkB,yBAA0B,iCAAkC,CAC9F,SAAAA,EACA,eAAgB,CAAC,CAACwS,CAAA,CACnB,EAEMA,GAAe,IACxB,CAKA,oBAA0C,CACxC,YAAK,OAAO,MAAM,iBAAkB,qBAAsB,4BAA6B,CACrF,iBAAkB,KAAK,aAAa,KACrC,EAEM,IAAI,IAAI,KAAK,YAAY,CAClC,CAKA,sBAAsBxS,EAAkB6Q,EAA0B,CAChE,MAAM2B,EAAc,KAAK,aAAa,IAAIxS,CAAQ,GAAK,KAAK,aAAa,iBACnEyS,GAAWD,GAAA,YAAAA,EAAa,MAAO3B,EAErC,YAAK,OAAO,MAAM,iBAAkB,wBAAyB,wCAAyC,CACpG,SAAA7Q,EACA,QAAA6Q,EACA,SAAA4B,CAAA,CACD,EAEMA,CACT,CAKA,kBAAkBzS,EAA4B,CAC5C,MAAMkK,EAAU,KAAK,eAAe,IAAIlK,CAAQ,EAChD,OAAOkK,EAAU,MAAM,KAAKA,CAAO,EAAI,EACzC,CAKA,sBAA4D,CAC1D,YAAK,OAAO,MAAM,iBAAkB,uBAAwB,6BAA8B,CACxF,YAAa,KAAK,kBAAkB,KACrC,EAEM,IAAI,IAAI,KAAK,iBAAiB,CACvC,CASA,2BAA2BlK,EAA4B,CACrD,GAAI,CAKF,MAAM0S,EAHS,KAAK,aAAa,YAGF,OAAQvI,GACrC,KAAK,2BAA2BA,EAAOnK,CAAQ,GAGjD,YAAK,OAAO,MAAM,iBAAkB,6BAA8B,qCAAsC,CACtG,SAAAA,EACA,oBAAqB0S,EAAgB,OACtC,EAEMA,CACT,OAAS1a,EAAO,CACd,YAAK,OAAO,MAAM,iBAAkB,6BAA8B,2CAA4C,CAC5G,MAAAA,EACA,SAAAgI,CAAA,CACD,EACM,EACT,CACF,CAKQ,SAAS6Q,EAAgC,CAE/C,MAAM1G,EAAQ,KAAK,aAAa,SAAS0G,CAAO,EAChD,OAAI1G,GAIG,IACT,CAKQ,2BAA2BA,EAAewI,EAA4B,CAG5E,MAAO,CAAC,EAAExI,GAASA,EAAM,IAAMA,EAAM,KACvC,CAKc,kBAAkBA,EAAekI,EAAkD,QAAA3X,EAAA,sBAC/F,GAAI,CAEEyP,EAAM,eACR,MAAM,KAAK,kBAAkBA,EAAM,aAAckI,CAAO,GAI1D,MAAM,KAAK,qBAAqBlI,EAAOkI,CAAO,EAE9C,KAAK,OAAO,MAAM,iBAAkB,oBAAqB,yBAA0B,CACjF,SAAUA,EAAQ,SAClB,QAASlI,EAAM,GAChB,CACH,OAASnS,EAAO,CACd,WAAK,OAAO,MAAM,iBAAkB,oBAAqB,iCAAkC,CACzF,MAAAA,EACA,SAAUqa,EAAQ,SAClB,QAASlI,EAAM,GAChB,EACKnS,CACR,CACF,GAKc,+BACZqR,EACAc,EACAkI,EACe,QAAA3X,EAAA,sBACf,GAAI,CAEEyP,EAAM,eACR,MAAM,KAAK,8BAA8Bd,EAAYc,EAAM,aAAckI,CAAO,GAIlF,MAAM,KAAK,iCAAiChJ,EAAYc,EAAOkI,CAAO,EAEtE,KAAK,OAAO,MACV,iBACA,iCACA,+BACA,CACE,eAAgBhJ,EAAW,YAAY,KACvC,QAASc,EAAM,GACjB,CAEJ,OAASnS,EAAO,CACd,WAAK,OAAO,MACV,iBACA,iCACA,uCACA,CACE,MAAAA,EACA,eAAgBqR,EAAW,YAAY,KACvC,QAASc,EAAM,GACjB,EAEInS,CACR,CACF,GAKc,kBACZgV,EACAqF,EACe,QAAA3X,EAAA,sBACf,SAAW,CAAC6D,EAAW6L,CAAU,IAAK,OAAO,QAAQ4C,CAAY,EAC/D,GAAI,CAEF,MAAM,KAAK,gBAAgBzO,EAAW6L,EAAYiI,CAAO,EAGzD,KAAK,kBAAkBA,EAAQ,SAAU9T,CAAS,CACpD,OAASvG,EAAO,CACd,KAAK,OAAO,KAAK,iBAAkB,oBAAqB,8BAA+B,CACrF,MAAAA,EACA,UAAAuG,EACA,SAAU8T,EAAQ,SACnB,CACH,CAEJ,GAKc,8BACZhJ,EACA2D,EACAqF,EACe,QAAA3X,EAAA,sBACf,SAAW,CAAC6D,EAAW6L,CAAU,IAAK,OAAO,QAAQ4C,CAAY,EAC/D,GAAI,CAEF,MAAM,KAAK,4BAA4B3D,EAAY9K,EAAW6L,EAAYiI,CAAO,EAGjF,KAAK,kBAAkBA,EAAQ,SAAU9T,CAAS,CACpD,OAASvG,EAAO,CACd,KAAK,OAAO,KACV,iBACA,gCACA,6CACA,CACE,MAAAA,EACA,UAAAuG,EACA,eAAgB8K,EAAW,YAAY,KACzC,CAEJ,CAEJ,GAKc,gBACZ9K,EACAqU,EACAP,EACe,QAAA3X,EAAA,sBAGf,KAAK,OAAO,MAAM,iBAAkB,kBAAmB,gCAAiC,CACtF,UAAA6D,EACA,SAAU8T,EAAQ,SACnB,CACH,GAKc,4BACZhJ,EACA9K,EACAqU,EACAC,EACe,QAAAnY,EAAA,sBAGf,KAAK,OAAO,MACV,iBACA,8BACA,sCACA,CACE,UAAA6D,EACA,eAAgB8K,EAAW,YAAY,KACzC,CAEJ,GAKc,qBACZc,EACAkI,EACe,QAAA3X,EAAA,sBAGf,KAAK,OAAO,MACV,iBACA,uBACA,qCACA,CACE,SAAU2X,EAAQ,SAClB,QAASlI,EAAM,GACjB,CAEJ,GAKc,iCACZd,EACAc,EACA0I,EACe,QAAAnY,EAAA,sBAGf,KAAK,OAAO,MACV,iBACA,mCACA,2CACA,CACE,eAAgB2O,EAAW,YAAY,KACvC,QAASc,EAAM,GACjB,CAEJ,GAKQ,kBAAkBnK,EAAkBzB,EAAyB,CAC9D,KAAK,eAAe,IAAIyB,CAAQ,GACnC,KAAK,eAAe,IAAIA,EAAU,IAAI,GAAK,EAE7C,KAAK,eAAe,IAAIA,CAAQ,EAAG,IAAIzB,CAAS,CAClD,CAKQ,qBAAqByB,EAAwB,CACnD,KAAK,eAAe,OAAOA,CAAQ,CACrC,CASA,OAAc,CACZ,KAAK,kBAAkB,QACvB,KAAK,aAAa,QAClB,KAAK,eAAe,QAEpB,KAAK,OAAO,KAAK,iBAAkB,QAAS,uBAAuB,CACrE,CAKA,SAAgB,CACd,KAAK,QACL,KAAK,OAAO,KAAK,iBAAkB,UAAW,2BAA2B,CAC3E,CACF,CC9lBO,MAAe8S,WAAkBC,EAAO,KAAM,CAkBnD,YAAY/S,EAAkB,CAC5B,MAAM,CAAE,IAAKA,EAAU,EAlBfzH,EAAA,sBACAA,EAAA,oBAAoB,IACpBA,EAAA,uBAA8D,KAC9DA,EAAA,uBACAA,EAAA,cAAiBiH,EAAO,eAGxBjH,EAAA,+BAGAA,EAAA,uBAGAA,EAAA,mCAAgD,KAChDA,EAAA,yBAA4B,WAC5BA,EAAA,uBAA0B,GAIlC,KAAK,cAAgB0Q,GAAc,cACnC,KAAK,eAAiB4G,GAAyB,cAG/C,KAAK,uBAAyBvO,GAAuB,cAGrD,KAAK,eAAiB,IAAI6Q,GAE1B,KAAK,OAAO,MAAM,YAAa,QAAS,+BAAgC,CACtE,SAAAnS,EACA,UAAW,KAAK,KAAI,CACrB,CACH,CAkBA,SAAgB,CACd,KAAK,OAAO,MAAM,YAAa,UAAW,iCAAkC,CAC1E,SAAU,KAAK,MAAM,IACrB,UAAW,KAAK,KAAI,CACrB,EAED,GAAI,CAEF,GAAI,KAAK,aAAa,OAAS,KAAK,aAAa,MAAM,YAAa,CAMlE,GALA,KAAK,OAAO,MAAM,YAAa,UAAW,4BAA6B,CACrE,eAAgB,OAAO,KAAK,KAAK,aAAa,MAAM,WAAW,EAChE,EAGG,KAAK,aAAa,MAAM,YAAY,QAAS,CAC/C,MAAMgT,EAAY,KAAK,aAAa,MAAM,YAAY,QAChDC,EAAc,KAAK,aAAa,MAAM,SAAWD,EAAU,KACjE,KAAK,OAAO,MAAM,YAAa,UAAW,6BAA8B,CACtE,IAAKA,EAAU,IACf,KAAMC,CAAA,CACP,EACD,KAAK,KAAK,MAAMD,EAAU,IAAKC,CAAW,CAC5C,CAGA,GAAI,KAAK,aAAa,MAAM,YAAY,OAAQ,CAC9C,MAAMC,EAAW,KAAK,aAAa,MAAM,YAAY,OAC/CC,EAAa,KAAK,aAAa,MAAM,SAAWD,EAAS,KAC/D,KAAK,OAAO,MAAM,YAAa,UAAW,4BAA6B,CACrE,IAAKA,EAAS,IACd,KAAMC,CAAA,CACP,EACD,KAAK,KAAK,MAAMD,EAAS,IAAKC,CAAU,CAC1C,CAGA,GAAI,KAAK,aAAa,MAAM,YAAY,aAAc,CACpD,MAAMC,EAAiB,KAAK,aAAa,MAAM,YAAY,aACrDC,EAAmB,KAAK,aAAa,MAAM,SAAWD,EAAe,KAC3E,KAAK,OAAO,MAAM,YAAa,UAAW,mCAAoC,CAC5E,IAAKA,EAAe,IACpB,KAAMC,CAAA,CACP,EACD,KAAK,KAAK,MAAMD,EAAe,IAAKC,CAAgB,CACtD,CAEA,KAAK,OAAO,KAAK,YAAa,UAAW,uCAAuC,CAClF,MACE,KAAK,OAAO,KACV,YACA,UACA,UACA,qDAGN,OAASrb,EAAO,CACd,WAAK,OAAO,MAAM,YAAa,UAAW,yBAA0BA,CAAK,EACnEA,CACR,CACF,CAKc,qBAAqC,QAAA0C,EAAA,sBACjD,KAAK,OAAO,MACV,YACA,sBACA,sBACA,8BAGF,GAAI,CAEG,KAAK,KAAK,aACb,KAAK,KAAK,QAIZ,MAAM,IAAI,QAAc,CAAC4C,EAASgW,IAAW,CAC3C,MAAMvY,EAAU,WAAW,IAAM,CAC/BuY,EAAO,IAAI,MAAM,uBAAuB,CAAC,CAC3C,EAAG,GAAK,EAER,KAAK,KAAK,KAAK,WAAY,IAAM,CAC/B,aAAavY,CAAO,EACpB,KAAK,OAAO,KACV,YACA,eACA,eACA,kCAEFuC,EAAA,CACF,CAAC,EAED,KAAK,KAAK,KAAK,YAAciW,GAAc,CACzC,aAAaxY,CAAO,EACpB,KAAK,OAAO,KAAK,YAAa,eAAgB,mBAAoB,CAAE,KAAAwY,EAAM,EAC1EjW,EAAA,CACF,CAAC,CACH,CAAC,CACH,OAAStF,EAAO,CACd,KAAK,OAAO,KACV,YACA,UACA,oDACAA,CAAA,CAEJ,CACF,GAKM,QAAwB,QAAA0C,EAAA,sBAC5B,KAAK,OAAO,MAAM,YAAa,SAAU,gCAAiC,CACxE,SAAU,KAAK,MAAM,IACrB,UAAW,KAAK,KAAK,OAAO,MAC5B,WAAY,KAAK,KAAK,OAAO,OAC7B,UAAW,KAAK,KAAI,CACrB,EAED,GAAI,CAEF,KAAK,uBAGL,KAAK,mBAGL,KAAK,UAGL,MAAM,KAAK,sBAGX,KAAK,OAAO,KAAK,YAAa,SAAU,gBAAiB,CACvD,SAAU,KAAK,MAAM,IACrB,UAAW,KAAK,KAAK,OAAO,MAC5B,WAAY,KAAK,KAAK,OAAO,OAC7B,UAAW,KAAK,KAAI,CACrB,EAGD,MAAM,KAAK,4BAGX,KAAK,0BAGL,KAAK,OAAO,KAAK,YAAa,SAAU,wBAAyB,CAC/D,SAAU,CACR,MAAO,OAAO,KAAK,KAAK,OAAO,KAAK,EACpC,OAAQ,OAAO,KAAK,KAAK,OAAO,MAAM,GAExC,UAAW,KAAK,KAAK,MAAM,UAC3B,gBAAiB,KAAK,YAAY,KACnC,EAGD,MAAM,KAAK,OAAO,WACpB,OAAS1C,EAAO,CACd,WAAK,OAAO,MAAM,YAAa,SAAU,mCAAoCA,CAAK,EAClF,MAAM,KAAK,OAAO,YACZA,CACR,CACF,GAKQ,kBAAyB,CAC/B,KAAK,OAAO,MAAM,YAAa,mBAAoB,uCAAuC,EAE1F,GAAI,CACF,MAAMkI,EAAY,KAAK,eAGvB,KAAK,aAAe,KAAK,cAAc,iBAAiBA,CAAS,EAEjE,KAAK,OAAO,MAAM,YAAa,mBAAoB,8BAA+B,CAChF,UAAAA,EACA,aAAc,KAAK,aACnB,WAAY,OAAO,KAAK,KAAK,YAAY,EAC1C,EAEG,KAAK,aAAa,QACpB,KAAK,OAAO,KACV,YACA,mBACA,gDAGF,KAAK,OAAO,KACV,YACA,mBACA,2CAGN,OAASlI,EAAO,CACd,WAAK,OAAO,MACV,YACA,mBACA,qCACAA,CAAA,EAEIA,CACR,CACF,CAKc,2BAA2C,QAAA0C,EAAA,gCACvD,KAAK,OAAO,MACV,YACA,4BACA,6CAGF,GAAI,CACF,GAAI,CAAC,KAAK,aAAa,MAAO,CAC5B,KAAK,OAAO,KACV,YACA,4BACA,mCACA,CACE,iBAAkB,OAAO,KAAK,KAAK,YAAY,EACjD,EAEF,MACF,CAEA,MAAM+N,EAAc,KAAK,aAAa,MAQtC,GAPA,KAAK,OAAO,MAAM,YAAa,4BAA6B,qBAAsB,CAChF,UAAWA,EAAY,UACvB,kBAAiBjR,EAAAiR,EAAY,cAAZ,YAAAjR,EAAyB,SAAU,EACpD,gBAAiBiR,EAAY,gBAC9B,EAGG,KAAK,aAAa,WAAY,CAChC,MAAMvI,EAAY,KAAK,eACvB,KAAK,uBAAuB,eAAeA,EAAW,KAAK,aAAa,UAAU,EAClF,KAAK,OAAO,KAAK,YAAa,4BAA6B,+BAAgC,CACzF,UAAAA,EACA,WAAY,OAAO,KAAK,KAAK,aAAa,UAAU,EACpD,WAAY,CAAC,CAAC,KAAK,aAAa,WAAW,QAC3C,qBAAoBU,EAAA,KAAK,aAAa,WAAW,UAA7B,YAAAA,EAAsC,SAAU,EACrE,EAGD,KAAK,wBACP,KACE,YAAK,OAAO,MACV,YACA,4BACA,4BACA,sEAEI,IAAI,MAAM,8DAA8D,EAI5E,KAAK,aAAa,MACpB,KAAK,OAAO,KAAK,YAAa,4BAA6B,eAAgB,CACzE,UAAW,KAAK,aAAa,MAAM,KACnC,gBAAiB,CAAC,CAAC,KAAK,aAAa,MAAM,aAC5C,EAED,KAAK,OAAO,KACV,YACA,4BACA,4BACA,wDAKA6H,EAAY,kBACd,KAAK,OAAO,MACV,YACA,4BACA,iCACA,CACE,gBAAiBA,EAAY,gBAC/B,EAEF,KAAK,QAAQ,KAAK,mBAAmBA,EAAY,eAAe,GAI9DA,EAAY,aAAeA,EAAY,YAAY,OAAS,GAC9D,KAAK,OAAO,MACV,YACA,4BACA,oCACA,CACE,gBAAiBA,EAAY,YAAY,OACzC,cAAeA,EAAY,YAAY,IAAKzJ,GAAaA,EAAI,EAAE,EACjE,EAEF,MAAM,KAAK,4BAA4ByJ,EAAY,WAAW,GAE9D,KAAK,OAAO,KACV,YACA,4BACA,yCAMJ,KAAK,OAAO,MACV,YACA,4BACA,iDACA,CACE,gBAAiB,KAAK,YAAY,KAClC,cAAe,MAAM,KAAK,KAAK,YAAY,MAAM,EACnD,EAGF,MAAM,KAAK,uBAEX,KAAK,OAAO,KACV,YACA,4BACA,uCACA,CACE,UAAWA,EAAY,UACvB,kBAAiBwB,EAAAxB,EAAY,cAAZ,YAAAwB,EAAyB,SAAU,EACpD,gBAAiBxB,EAAY,gBAC7B,mBAAoB,KAAK,YAAY,KACvC,CAEJ,OAASzQ,EAAO,CACd,WAAK,OAAO,MACV,YACA,4BACA,uCACAA,CAAA,EAEIA,CACR,CACF,GAMc,4BACZwb,EACA3J,EACe,QAAAnP,EAAA,gCACf,KAAK,OAAO,MACV,YACA,8BACA,oCACA,CACE,gBAAiB8Y,EAAY,OAC7B,UAAU3J,GAAA,YAAAA,EAAQ,OAAQ,OAC1B,cAAe2J,EAAY,IAAKxU,GAAaA,EAAI,EAAE,EACrD,EAGF,IAAIyU,EAAe,EACfC,EAAe,EAGnB,MAAMC,EAA4E,GAElF,UAAWC,KAAaJ,EACtB,GAAI,CACF,KAAK,OAAO,MACV,YACA,8BACA,mCACA,CACE,SAAUI,EAAU,GACpB,WAAYA,EAAU,KACtB,WAAYA,EAAU,KACtB,WAAY,CAAC,CAACA,EAAU,QACxB,kBAAkBpc,EAAAoc,EAAU,UAAV,YAAApc,EAAmB,UACrC,qBAAqBoJ,EAAAgT,EAAU,UAAV,YAAAhT,EAAmB,aACxC,UAAUiJ,GAAA,YAAAA,EAAQ,OAAQ,OAC5B,EAGF,MAAMR,EAAa,MAAM,KAAK,2BAA2BuK,EAAW/J,CAAM,EAE1E,GAAIR,GA2BF,GA1BAoK,IACA,KAAK,OAAO,MACV,YACA,8BACA,mCACA,CACE,SAAUG,EAAU,GACpB,WAAYA,EAAU,KACtB,iBAAkBvK,EAAW,YAAY,KACzC,eAAgBA,EAAW,KAC7B,EAIF,KAAK,YAAY,IAAIuK,EAAU,GAAIvK,CAAU,EAC7C,KAAK,OAAO,MACV,YACA,8BACA,kCACA,CACE,SAAUuK,EAAU,GACpB,iBAAkB,KAAK,YAAY,KACrC,EAIEA,EAAU,UAAYA,EAAU,SAAS,OAAS,EACpD,GACEvK,aAAsB0J,EAAO,YAAY,WACxC1J,EAAmB,wBAAwB0J,EAAO,YAAY,UAC/D,CAEA,MAAMc,EACJxK,aAAsB0J,EAAO,YAAY,UACrC1J,EACCA,EAAmB,aAE1BsK,EAAW,KAAK,CAAE,OAAQC,EAAW,WAAAvK,EAAY,gBAAAwK,EAAiB,EAElE,KAAK,OAAO,MACV,YACA,8BACA,4CACA,CACE,SAAUD,EAAU,GACpB,cAAevK,EAAW,YAAY,KACtC,oBAAqBwK,EAAgB,YAAY,KACjD,WAAYD,EAAU,SAAS,OACjC,CAEJ,MACE,KAAK,OAAO,KACV,YACA,8BACA,+DACA,CACE,WAAYA,EAAU,KACtB,iBAAkBvK,EAAW,YAAY,KAC3C,OAKNqK,IACA,KAAK,OAAO,MACV,YACA,8BACA,0EACA,CACE,SAAUE,EAAU,GACpB,WAAYA,EAAU,KACtB,WAAYA,EAAU,KACtB,WAAY,CAAC,CAACA,EAAU,QACxB,kBAAkB3J,EAAA2J,EAAU,UAAV,YAAA3J,EAAmB,UACvC,CAGN,OAASjS,EAAO,CACd0b,IACA,KAAK,OAAO,MACV,YACA,8BACA,yDACA,CACE,MAAO1b,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC5D,MAAOA,aAAiB,MAAQA,EAAM,MAAQ,OAC9C,SAAU4b,EAAU,GACpB,WAAYA,EAAU,KACxB,CAEJ,CAIF,SAAW,CAAE,OAAQA,EAAW,gBAAAC,CAAA,IAAqBF,EACnD,GAAI,CACF,KAAK,OAAO,MACV,YACA,8BACA,kCACA,CACE,SAAUC,EAAU,GACpB,WAAYA,EAAU,SAAS,OAC/B,SAAUA,EAAU,SAAS,IAAK3G,GAAeA,EAAM,EAAE,EAC3D,EAGF,MAAM,KAAK,4BAA4B2G,EAAU,SAAUC,CAAe,CAC5E,OAAS7b,EAAO,CACd,KAAK,OAAO,MACV,YACA,8BACA,iEACA,CACE,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC5D,MAAOA,aAAiB,MAAQA,EAAM,MAAQ,OAC9C,SAAU4b,EAAU,GACpB,WAAYA,EAAU,KACxB,CAEJ,CAGF,KAAK,OAAO,KACV,YACA,8BACA,wCACA,CACE,eAAgBJ,EAAY,OAC5B,aAAAC,EACA,aAAAC,EACA,qBAAsB,KAAK,YAAY,KACvC,UAAU7J,GAAA,YAAAA,EAAQ,OAAQ,OAC5B,CAEJ,GAMc,sBAAsC,QAAAnP,EAAA,sBAClD,KAAK,OAAO,MACV,YACA,uBACA,+CACA,CACE,gBAAiB,KAAK,YAAY,KAClC,cAAe,MAAM,KAAK,KAAK,YAAY,MAAM,EACnD,EAGF,GAAI,CAEF,MAAMoZ,EAAY,KAAK,KAAK,OAAO,MAC7BC,EAAa,KAAK,KAAK,OAAO,OAEpC,KAAK,OAAO,MAAM,YAAa,uBAAwB,qCAAsC,CAC3F,UAAAD,EACA,WAAAC,EACA,gBAAiB,KAAK,YAAY,KACnC,EAGD,SAAW,CAAChT,EAAUsI,CAAU,IAAK,KAAK,YACxC,GAAI,CAEGA,EAAmB,QAAU,OAAQA,EAAmB,QAAW,YACtE,KAAK,OAAO,MACV,YACA,uBACA,uCACA,CACE,SAAAtI,EACA,WAAYsI,EAAW,YAAY,KACnC,gBAAiB,GACjB,0BAA2B,GAC7B,EAIDA,EAAmB,OAAOyK,EAAWC,CAAU,GAE/C1K,EAAmB,wBACpB,OAAQA,EAAmB,wBAA2B,YAGtD,KAAK,OAAO,MACV,YACA,uBACA,gDACA,CACE,SAAAtI,EACA,WAAYsI,EAAW,YAAY,KACnC,0BAA2B,GAC7B,EAIDA,EAAmB,uBAAuByK,EAAWC,CAAU,GACvD1K,aAAsB0J,EAAO,YAAY,UAClD,KAAK,OAAO,MACV,YACA,uBACA,oDACA,CACE,SAAAhS,EACA,WAAYsI,EAAW,YAAY,KACnC,gBAAiB,GACnB,EAGF,KAAK,OAAO,MACV,YACA,uBACA,2CACA,CACE,SAAAtI,EACA,WAAYsI,EAAW,YAAY,KACnC,gBAAiB,GACjB,0BAA2B,GAC7B,CAGN,OAASrR,EAAO,CACd,KAAK,OAAO,MACV,YACA,uBACA,sDACA,CACE,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC5D,SAAA+I,EACA,WAAYsI,EAAW,YAAY,KACrC,CAEJ,CAGF,KAAK,OAAO,KACV,YACA,uBACA,gDACA,CACE,gBAAiB,KAAK,YAAY,KAClC,UAAAyK,EACA,WAAAC,CAAA,CACF,CAEJ,OAAS/b,EAAO,CACd,KAAK,OAAO,MACV,YACA,uBACA,sCACA,CACE,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC5D,gBAAiB,KAAK,YAAY,KACpC,CAEJ,CACF,GAKc,2BACZ4b,EACA/J,EAC+C,QAAAnP,EAAA,gCAC/C,KAAK,OAAO,MACV,YACA,6BACA,mCACA,CACE,SAAUkZ,EAAU,GACpB,WAAYA,EAAU,KACtB,WAAY,CAAC,CAACA,EAAU,QACxB,kBAAkBpc,EAAAoc,EAAU,UAAV,YAAApc,EAAmB,UACrC,UAAUqS,GAAA,YAAAA,EAAQ,OAAQ,OAC5B,EAGF,GAAI,CACF,IAAIR,EAAmD,KAGvD,GAAIuK,EAAU,SAAWA,EAAU,QAAQ,UACzC,KAAK,OAAO,MACV,YACA,6BACA,8BACA,CACE,SAAUA,EAAU,GACpB,UAAWA,EAAU,QAAQ,UAC7B,aAAcA,EAAU,QAAQ,aAClC,EAIFvK,EAAa,MAAM,KAAK,mCAAmCuK,EAAW/J,CAAM,EAE5E,KAAK,OAAO,MACV,YACA,6BACA,kCACA,CACE,SAAU+J,EAAU,GACpB,UAAW,CAAC,CAACvK,EACb,WAAYA,GAAA,YAAAA,EAAY,YAAY,KACpC,OAAQA,CAAA,CACV,MAEG,CACL,KAAK,OAAO,MACV,YACA,6BACA,iCACA,CACE,SAAUuK,EAAU,GACpB,WAAYA,EAAU,KACxB,EAIF,MAAMI,EAAe,CACnB,GAAIJ,EAAU,IAAM,UACpB,KAAMA,EAAU,MAAQ,YACxB,MAAO,KACP,OAAQA,CAAA,EAEVvK,EAAa,KAAK,eAAe,iBAAiB2K,CAAY,EAE9D,KAAK,OAAO,MACV,YACA,6BACA,qCACA,CACE,SAAUJ,EAAU,GACpB,UAAW,CAAC,CAACvK,EACb,WAAYA,GAAA,YAAAA,EAAY,YAAY,KACpC,OAAQA,CAAA,CACV,CAEJ,CAEA,OAAIA,GACF,KAAK,OAAO,MACV,YACA,6BACA,uDACA,CACE,SAAUuK,EAAU,GACpB,iBAAkBvK,EAAW,YAAY,KACzC,eAAgBA,EAAW,KAC7B,EAIF,KAAK,wBAAwBA,EAAYuK,CAAS,EAG9C/J,GAAUA,aAAkBkJ,EAAO,YAAY,WAGjD,KAAK,OAAO,MACV,YACA,6BACA,yCACA,CACE,SAAUa,EAAU,GACpB,SAAU/J,EAAO,KACjB,WAAYR,EAAW,YAAY,KACnC,gBAAiB,CAAC,CAAEA,EAAmB,aACzC,EAIGQ,EAAe,UAAY,OAAQA,EAAe,UAAa,WACjEA,EAAe,SAASR,CAAU,EAEnCQ,EAAO,IAAIR,CAAU,IAGvB,KAAK,OAAO,MACV,YACA,6BACA,8BACA,CACE,SAAUuK,EAAU,GACtB,EAEF,KAAK,IAAI,SAASvK,CAAU,GAG9B,KAAK,OAAO,KACV,YACA,6BACA,+CACA,CACE,SAAUuK,EAAU,GACpB,iBAAkBvK,EAAW,YAAY,KACzC,eAAgBA,EAAW,KAC3B,aAAc,GAChB,GAGF,KAAK,OAAO,MACV,YACA,6BACA,wDACA,CACE,SAAUuK,EAAU,GACpB,WAAYA,EAAU,KACtB,WAAY,CAAC,CAACA,EAAU,QACxB,kBAAkBhT,EAAAgT,EAAU,UAAV,YAAAhT,EAAmB,UACrC,qBAAqBqJ,EAAA2J,EAAU,UAAV,YAAA3J,EAAmB,aAC1C,EAIGZ,CACT,OAASrR,EAAO,CACd,YAAK,OAAO,MACV,YACA,6BACA,mEACA,CACE,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC5D,MAAOA,aAAiB,MAAQA,EAAM,MAAQ,OAC9C,SAAU4b,EAAU,GACpB,WAAYA,EAAU,KACtB,QAASA,EAAU,QACrB,EAEK,IACT,CACF,GAKc,mCACZA,EACA/J,EAC+C,QAAAnP,EAAA,8BAC/C,KAAK,OAAO,MACV,YACA,qCACA,8BACA,CACE,SAAUkZ,EAAU,GACpB,UAAWA,EAAU,QAAQ,UAC7B,aAAcA,EAAU,QAAQ,aAClC,EAGF,GAAI,CACF,KAAM,CAAE,UAAArV,EAAW,aAAA2Q,EAAe,oBAAuB0E,EAAU,QAEnE,KAAK,OAAO,MACV,YACA,qCACA,+BACA,CACE,SAAUA,EAAU,GACpB,UAAArV,EACA,aAAA2Q,CAAA,CACF,EAKF,MAAM7F,EAAa,MAAM,KAAK,eAAe,kCAC3CuK,EACA,KACA/J,CAAA,EAGF,YAAK,OAAO,MACV,YACA,qCACA,kCACA,CACE,SAAU+J,EAAU,GACpB,UAAW,CAAC,CAACvK,EACb,WAAYA,GAAA,YAAAA,EAAY,YAAY,KACpC,OAAQA,EACJ,CACE,KAAMA,EAAW,KACjB,KAAMA,EAAW,YAAY,KAC7B,QAAUA,EAAmB,QAC7B,OAASA,EAAmB,QAE9B,KACN,EAGKA,CACT,OAASrR,EAAO,CACd,YAAK,OAAO,MACV,YACA,SACA,2DACA,CACE,MAAOA,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC5D,MAAOA,aAAiB,MAAQA,EAAM,MAAQ,OAC9C,SAAU4b,EAAU,GACpB,WAAWpc,EAAAoc,EAAU,UAAV,YAAApc,EAAmB,UAC9B,cAAcoJ,EAAAgT,EAAU,UAAV,YAAAhT,EAAmB,aACnC,EAEK,IACT,CACF,GAKQ,wBAAwByI,EAA2CuK,EAAsB,CAe/F,GAdA,KAAK,OAAO,MAAM,YAAa,0BAA2B,iCAAkC,CAC1F,SAAUA,EAAU,GACpB,eAAgB,gBAAiBvK,EACjC,WAAY,YAAaA,EACzB,OAAQ,CACN,EAAGuK,EAAU,EACb,EAAGA,EAAU,EACb,MAAOA,EAAU,MACjB,OAAQA,EAAU,OAClB,KAAMA,EAAU,KAClB,CACD,EAGGA,EAAU,IAAM,QAAa,gBAAiBvK,EAAY,CAC5D,IAAIM,EAAIiK,EAAU,EACdhK,EAAIgK,EAAU,GAAK,EAGvB,GAAI,OAAOhK,GAAM,UAAYA,IAAM,OAAQ,CAEzC,MAAMqK,EAAkB,KAAK,mBAAmB5K,CAAU,EACtD4K,GAEFrK,EAAIqK,EAAgB,OACpB,KAAK,OAAO,MACV,YACA,0BACA,uCACA,CACE,SAAUL,EAAU,GACpB,aAAcK,EAAgB,OAC9B,UAAWrK,CAAA,CACb,IAIFA,EAAI,KAAK,KAAK,OAAO,OACrB,KAAK,OAAO,MACV,YACA,0BACA,yCACA,CACE,SAAUgK,EAAU,GACpB,YAAahK,CAAA,CACf,EAGN,CAEA,KAAK,OAAO,MAAM,YAAa,0BAA2B,mBAAoB,CAC5E,SAAUgK,EAAU,GACpB,EAAAjK,EACA,EAAAC,CAAA,CACD,EACAP,EAAmB,YAAYM,EAAGC,CAAC,CACtC,CAGIgK,EAAU,OAASA,EAAU,QAAU,QACrC,YAAavK,IACf,KAAK,OAAO,MAAM,YAAa,0BAA2B,eAAgB,CACxE,SAAUuK,EAAU,GACpB,MAAOA,EAAU,MACjB,OAAQA,EAAU,QAAUA,EAAU,MACvC,EACAvK,EAAmB,QAAQuK,EAAU,MAAOA,EAAU,QAAUA,EAAU,KAAK,GAKpFvK,EAAW,KAAOuK,EAAU,MAAQA,EAAU,GAC9C,KAAK,OAAO,MAAM,YAAa,0BAA2B,uBAAwB,CAChF,SAAUA,EAAU,GACpB,KAAMvK,EAAW,KAClB,EAGGuK,EAAU,SAAW,QAAa,aAAcvK,IAClD,KAAK,OAAO,MAAM,YAAa,0BAA2B,kBAAmB,CAC3E,SAAUuK,EAAU,GACpB,OAAQA,EAAU,OACnB,EACAvK,EAAmB,SAASuK,EAAU,MAAM,EAEjD,CAKQ,yBAAgC,CACtC,KAAK,OAAO,MACV,YACA,0BACA,0BACA,kCAIF,MAAMM,EAAgB,IAAM,CAC1B,KAAK,cACP,EAGA,OAAO,iBAAiB,SAAUA,CAAa,EAG/C,KAAK,MAAM,GAAG,SAAUA,CAAa,EAGjC,KAAK,aAAa,WACpB,KAAK,OAAO,KACV,YACA,0BACA,kDACA,CACE,UAAW,KAAK,KAAK,MAAM,UAC3B,iBAAkB,KAAK,aAAa,WACtC,EAGF,KAAK,OAAO,KACV,YACA,0BACA,kDACA,CACE,UAAW,KAAK,KAAK,MAAM,UAC7B,CAGN,CAKQ,cAAqB,CAC3B,GAAI,CAEF,MAAMC,EAAW,OAAO,WAClBC,EAAY,OAAO,YAEzB,KAAK,OAAO,MAAM,YAAa,eAAgB,yBAA0B,CACvE,cAAe,CAAE,MAAOD,EAAU,OAAQC,CAAA,EAC1C,gBAAiB,KAAK,YAAY,KACnC,EAGD,MAAMC,EAAgB,KAAK,oBAEvBA,GACF,KAAK,OAAO,MAAM,YAAa,eAAgB,0CAA2C,CACxF,gBAAiBA,EAAc,MAAQ,UACvC,kBAAmBA,EAAc,YAAY,KAC9C,EAGG,OAAQA,EAAsB,QAAW,WAC1CA,EAAsB,OAAOF,EAAUC,CAAS,EAEjD,KAAK,OAAO,KACV,YACA,eACA,6CACA,CACE,gBAAiBC,EAAc,MAAQ,UACvC,kBAAmBA,EAAc,YAAY,KAC/C,GAIJ,KAAK,OAAO,KACV,YACA,eACA,eACA,kDAKJ,KAAK,OAAO,KAAK,YAAa,eAAgB,iBAAkB,CAC9D,cAAe,CAAE,MAAOF,EAAU,OAAQC,CAAA,EAC1C,UAAW,KAAK,KAAI,CACrB,CACH,OAASpc,EAAO,CACd,KAAK,OAAO,MAAM,YAAa,eAAgB,wBAAyBA,CAAK,CAC/E,CACF,CAKA,OAAOwK,EAAc8R,EAAqB,CAGpC9R,EAAO,IAAO8R,GAEhB,KAAK,OAAO,MAAM,YAAa,SAAU,eAAgB,CACvD,KAAA9R,EACA,MAAA8R,EACA,IAAK,KAAK,MAAM,IAAOA,CAAK,EAC5B,gBAAiB,KAAK,YAAY,KACnC,CAEL,CAKM,UAA0B,QAAA5Z,EAAA,sBAC9B,KAAK,OAAO,MAAM,YAAa,WAAY,yBAA0B,CACnE,gBAAiB,KAAK,YAAY,KACnC,EAGD,KAAK,YAAY,QAGjB,KAAK,OAAO,KAAK,YAAa,WAAY,iBAAkB,CAC1D,UAAW,KAAK,KAAI,CACrB,EAGD,MAAM,KAAK,OAAO,WACpB,GAKU,cAAcgP,EAAuD,CAC7E,OAAO,KAAK,YAAY,IAAIA,CAAE,CAChC,CAKU,mBAAgE,CACxE,OAAO,KAAK,WACd,CAKU,cAAcA,EAAqB,CAC3C,OAAO,KAAK,YAAY,IAAIA,CAAE,CAChC,CAKQ,mBAAyD,CAE/D,GACE,KAAK,aAAa,OAClB,KAAK,aAAa,MAAM,aACxB,KAAK,aAAa,MAAM,YAAY,OAAS,EAC7C,CACA,MAAM6K,EAAoB,KAAK,aAAa,MAAM,YAAY,CAAC,EAAE,GAC3DC,EAAkB,KAAK,YAAY,IAAID,CAAiB,EAE9D,GAAIC,GAAmBA,aAA2BzB,EAAO,YAAY,UACnE,YAAK,OAAO,MACV,YACA,oBACA,yCACA,CACE,gBAAiByB,EAAgB,MAAQD,EACzC,kBAAmBC,EAAgB,YAAY,KACjD,EAEKA,CAEX,CAGA,UAAWnL,KAAc,KAAK,YAAY,SACxC,GAAIA,aAAsB0J,EAAO,YAAY,WAEvC,CAAE1J,EAAmB,OACvB,YAAK,OAAO,MACV,YACA,oBACA,uCACA,CACE,gBAAiBA,EAAW,MAAQ,UACpC,kBAAmBA,EAAW,YAAY,KAC5C,EAEKA,EAKb,YAAK,OAAO,KACV,YACA,oBACA,oBACA,2BAEK,IACT,CAKQ,mBACNA,EACqC,CAErC,GAAKA,EAAmB,OACtB,OAAQA,EAAmB,OAI7B,SAAW,CAAC0I,EAAG0C,CAAe,IAAK,KAAK,YACtC,GAAIA,aAA2B1B,EAAO,YAAY,YAE9B0B,EAAwB,MAAQ,IACrC,SAASpL,CAAU,EAC9B,OAAOoL,EAKb,OAAO,IACT,CAMQ,wBAA+B,OACrC,KAAK,OAAO,MACV,YACA,yBACA,yBACA,qDAGF,GAAI,CACF,GAAI,CAAC,KAAK,aAAa,WAAY,CACjC,KAAK,OAAO,KACV,YACA,yBACA,yBACA,iCAEF,MACF,CAEA,MAAMlN,EAAmB,KAAK,aAAa,WAGvCA,EAAiB,SACnBA,EAAiB,QAAQ,QAASjH,GAAgB,CAChD,KAAK,wBAAwB,IAAI,WAAWA,EAAO,EAAE,GAAIA,CAAM,CACjE,CAAC,EAIH,OAAO,QAAQiH,EAAiB,kBAAkB,EAAE,QAAQ,CAAC,CAACtG,EAAeP,CAAO,IAAM,CACvFA,EAAkB,QAASJ,GAAgB,CAC1C,KAAK,wBAAwB,IAAI,GAAGW,CAAa,IAAIX,EAAO,EAAE,GAAIA,CAAM,CAC1E,CAAC,CACH,CAAC,EAED,KAAK,OAAO,KACV,YACA,yBACA,gDACA,CACE,YAAa,KAAK,wBAAwB,KAC1C,YAAa,OAAO,KAAKiH,EAAiB,kBAAkB,EAC5D,eAAc/P,EAAA+P,EAAiB,UAAjB,YAAA/P,EAA0B,SAAU,EACpD,CAEJ,OAASQ,EAAO,CACd,KAAK,OAAO,MACV,YACA,yBACA,0CACAA,CAAA,CAEJ,CACF,CAKU,0BAA0B+I,EAAkBF,EAAqB,UAAgB,CACzF,MAAM6T,EAAW,GAAG7T,CAAU,IAAIE,CAAQ,GAC1C,OAAO,KAAK,wBAAwB,IAAI2T,CAAQ,CAClD,CAKU,qBAAqBlU,EAAuB,CACpD,OAAIA,EAAQ,IAAY,KACpBA,EAAQ,IAAY,KACpBA,EAAQ,IAAY,KACpBA,EAAQ,KAAa,KAClB,IACT,CAMU,qBAAqBmU,EAI7B,CACA,MAAMC,EAAe,KAAK,KAAK,OAAO,MAChC9T,EAAoB,KAAK,qBAAqB8T,CAAY,EAGhE,MAAO,CACL,WAAY,KAAK,aAAa,WAC9B,MAAO,KAAK,aAAa,MACzB,kBAAA9T,CAAA,CAEJ,CASgB,cAAc+P,EAAgC,QAAAnW,EAAA,sBAC5D,GAAI,CACF,KAAK,OAAO,KAAK,YAAa,gBAAiB,6BAA8B,CAC3E,SAAU,KAAK,MAAM,IACrB,QAAAmW,CAAA,CACD,EAED,MAAMrN,EAAS,MAAM,KAAK,eAAe,sBAAsB,KAAK,MAAM,IAAKqN,EAAS,CACtF,SAAU,KAAK,MAAM,IACrB,YAAaN,EAAiB,MAC9B,SAAU,EACX,EAEG/M,EAAO,QACT,KAAK,OAAO,KAAK,YAAa,gBAAiB,+BAAgC,CAC7E,SAAU,KAAK,MAAM,IACrB,QAAAqN,EACA,eAAgBrN,EAAO,eAAe,OACtC,SAAUA,EAAO,SAClB,EAED,KAAK,OAAO,MAAM,YAAa,gBAAiB,0BAA2B,CACzE,SAAU,KAAK,MAAM,IACrB,QAAAqN,EACA,OAAQrN,EAAO,OAChB,CAEL,OAASxL,EAAO,CACd,WAAK,OAAO,MAAM,YAAa,gBAAiB,yBAA0B,CACxE,MAAAA,EACA,SAAU,KAAK,MAAM,IACrB,QAAA6Y,CAAA,CACD,EACK7Y,CACR,CACF,GAKgB,uBACdqR,EACAwH,EACe,QAAAnW,EAAA,sBACf,GAAI,CACF,KAAK,OAAO,MAAM,YAAa,yBAA0B,gCAAiC,CACxF,SAAU,KAAK,MAAM,IACrB,eAAgB2O,EAAW,YAAY,KACvC,QAAAwH,CAAA,CACD,EAED,MAAMrN,EAAS,MAAM,KAAK,eAAe,uBAAuB6F,EAAYwH,EAAS,CACnF,SAAU,KAAK,MAAM,IACrB,aAAcxH,EAAW,MAAQA,EAAW,YAAY,KACxD,YAAakH,EAAiB,YAC9B,SAAU,EACX,EAEG/M,EAAO,QACT,KAAK,OAAO,MAAM,YAAa,yBAA0B,+BAAgC,CACvF,SAAU,KAAK,MAAM,IACrB,eAAgB6F,EAAW,YAAY,KACvC,QAAAwH,EACA,SAAUrN,EAAO,SAClB,EAED,KAAK,OAAO,KAAK,YAAa,yBAA0B,2BAA4B,CAClF,SAAU,KAAK,MAAM,IACrB,eAAgB6F,EAAW,YAAY,KACvC,QAAAwH,EACA,OAAQrN,EAAO,OAChB,CAEL,OAASxL,EAAO,CACd,WAAK,OAAO,MAAM,YAAa,yBAA0B,0BAA2B,CAClF,MAAAA,EACA,SAAU,KAAK,MAAM,IACrB,eAAgBqR,EAAW,YAAY,KACvC,QAAAwH,CAAA,CACD,EACK7Y,CACR,CACF,GAKgB,YAAYua,EAAmC,QAAA7X,EAAA,sBAC7D,GAAI,CACF,KAAK,OAAO,KAAK,YAAa,cAAe,4BAA6B,CACxE,SAAU,KAAK,MAAM,IACrB,WAAA6X,CAAA,CACD,EAED,MAAM/O,EAAS,MAAM,KAAK,eAAe,oBAAoB,KAAK,MAAM,IAAK+O,EAAY,CACvF,SAAU,KAAK,MAAM,IACrB,YAAahC,EAAiB,MAC9B,SAAU,EACX,EAEG/M,EAAO,QACT,KAAK,OAAO,KAAK,YAAa,cAAe,8BAA+B,CAC1E,SAAU,KAAK,MAAM,IACrB,WAAA+O,EACA,eAAgB/O,EAAO,eAAe,OACtC,SAAUA,EAAO,SAClB,EAED,KAAK,OAAO,MAAM,YAAa,cAAe,sBAAuB,CACnE,SAAU,KAAK,MAAM,IACrB,WAAA+O,EACA,OAAQ/O,EAAO,OAChB,CAEL,OAASxL,EAAO,CACd,WAAK,OAAO,MAAM,YAAa,cAAe,qBAAsB,CAClE,MAAAA,EACA,SAAU,KAAK,MAAM,IACrB,WAAAua,CAAA,CACD,EACKva,CACR,CACF,GAKU,gBAAsB,CAC9B,OAAO,KAAK,eAAe,uBAAuB,KAAK,MAAM,GAAG,CAClE,CAKU,oBAA4B,CACpC,OAAO,KAAK,eAAe,2BAA2B,KAAK,MAAM,GAAG,CACtE,CAKU,cAAc6Y,EAA0B,CAChD,OAAO,KAAK,eAAe,sBAAsB,KAAK,MAAM,IAAKA,CAAO,CAC1E,CAKU,wBAAmC,CAC3C,OAAO,KAAK,eAAe,kBAAkB,KAAK,MAAM,GAAG,CAC7D,CACF,CC3gDO,MAAMgE,GAA2D,CACtE,QAAS,8BACT,SAAU,kCAGV,OAAQ,CAEN,CACE,IAAK,8BACL,KAAM,+BACN,KAAMjT,EAAU,MAChB,SAAUE,EAAc,SACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,WAAY,UACZ,YAAa,OACb,SAAU,aACV,YAAa,mDACf,EAEF,CACE,IAAK,6BACL,KAAM,8BACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,SACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,WAAY,SACZ,YAAa,OACb,SAAU,aACV,YAAa,kDACf,EAEF,CACE,IAAK,oCACL,KAAM,gCACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,IACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,WAAY,SACZ,YAAa,WACb,SAAU,aACV,aAAc,GACd,YAAa,oDACf,EAIF,CACE,IAAK,qBACL,KAAM,gCACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,SACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,mCACb,WAAY,CAAE,MAAO,IAAK,OAAQ,KAClC,YAAa,CAAE,EAAG,IAAK,EAAG,IAAI,CAChC,EAEF,CACE,IAAK,wBACL,KAAM,2BACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,SACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,gCACb,WAAY,CAAE,MAAO,IAAK,OAAQ,KAClC,YAAa,CAAE,EAAG,GAAK,EAAG,GAAI,CAChC,EAEF,CACE,IAAK,uBACL,KAAM,0BACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,KACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,kCACb,WAAY,CAAE,MAAO,IAAK,OAAQ,KAClC,YAAa,CAAE,EAAG,GAAI,EAAG,GAAG,CAC9B,EAEF,CACE,IAAK,qBACL,KAAM,+BACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,OACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,sCACb,WAAY,CAAE,MAAO,IAAK,OAAQ,KAClC,UAAW,MACb,EAIF,CACE,IAAK,cACL,KAAM,sBACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,KACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,KACV,YAAa,mBACb,OAAQ,CAAC,SAAU,QAAS,UAAW,UAAU,EACnD,EAEF,CACE,IAAK,iBACL,KAAM,iCACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,KACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,KACV,YAAa,mCACb,WAAY,CAAE,MAAO,IAAK,OAAQ,IAAI,CACxC,EAEF,CACE,IAAK,eACL,KAAM,uBACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,OACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,KACV,YAAa,0BACb,OAAQ,CAAC,SAAU,OAAO,EAC5B,EAIF,CACE,IAAK,iBACL,KAAM,wBACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,KACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,8BACb,SAAU,IACV,KAAM,GACN,OAAQ,GACR,UAAW,MACb,EAEF,CACE,IAAK,iBACL,KAAM,wBACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,KACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,8CACb,SAAU,GACV,KAAM,GACN,OAAQ,GACR,UAAW,MACX,aAAc,cAChB,EAEF,CACE,IAAK,iBACL,KAAM,wBACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,KACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,kCACb,SAAU,GACV,KAAM,GACN,OAAQ,GACR,UAAW,MACX,aAAc,aAChB,EAEF,CACE,IAAK,kBACL,KAAM,yBACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,KACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,iCACb,SAAU,IACV,KAAM,GACN,OAAQ,GACR,UAAW,MACX,aAAc,cAChB,EAEF,CACE,IAAK,cACL,KAAM,qBACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,KACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,2BACb,SAAU,IACV,KAAM,GACN,OAAQ,GACR,UAAW,MACX,aAAc,UACd,eAAgB,IAClB,EAEF,CACE,IAAK,gBACL,KAAM,uBACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,KACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,6BACb,SAAU,EACV,KAAM,GACN,OAAQ,GACR,UAAW,MACX,aAAc,YACd,eAAgB,IAClB,EAEF,CACE,IAAK,mBACL,KAAM,0BACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,OACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,4BACb,SAAU,GACV,KAAM,GACN,OAAQ,GACR,UAAW,MACX,aAAc,eAChB,EAEF,CACE,IAAK,mBACL,KAAM,0BACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,IACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,4BACb,SAAU,GACV,KAAM,GACN,OAAQ,GACR,UAAW,MACX,aAAc,eACd,aAAc,GAChB,EAIF,CACE,IAAK,mBACL,KAAM,8BACN,KAAMF,EAAU,MAChB,SAAUE,EAAc,IACxB,QAAS,GACT,MAAO,GACP,SAAU,CACR,SAAU,QACV,YAAa,gCACb,SAAU,IACV,KAAM,GACN,OAAQ,GACR,UAAW,QACX,aAAc,GAChB,CACF,EAIF,QAAS,CACP,CACE,SAAU,oBACV,WAAY,2BACZ,WAAYC,EAAW,MACvB,SAAUD,EAAc,SACxB,QAAS,GACT,MAAO,GACP,UAAW,CACT,8BACA,6BACA,qCAEF,SAAU,CACR,SAAU,aACV,WAAY,GACZ,YAAa,iEACf,EAEF,CACE,SAAU,eACV,WAAY,sBACZ,WAAYC,EAAW,MACvB,SAAUD,EAAc,SACxB,QAAS,GACT,MAAO,GACP,UAAW,CACT,qBACA,wBACA,uBACA,sBAEF,SAAU,CACR,SAAU,QACV,YAAa,oDACf,EAEF,CACE,SAAU,YACV,WAAY,mBACZ,WAAYC,EAAW,MACvB,SAAUD,EAAc,KACxB,QAAS,GACT,MAAO,GACP,UAAW,CAAC,cAAe,iBAAkB,cAAc,EAC3D,SAAU,CACR,SAAU,KACV,YAAa,oCACf,EAEF,CACE,SAAU,mBACV,WAAY,uBACZ,WAAYC,EAAW,MACvB,SAAUD,EAAc,KACxB,QAAS,GACT,MAAO,GACP,UAAW,CACT,iBACA,iBACA,iBACA,kBACA,cACA,gBACA,mBACA,oBAEF,SAAU,CACR,SAAU,QACV,UAAW,MACX,YAAa,sCACf,EAEF,CACE,SAAU,qBACV,WAAY,0BACZ,WAAYC,EAAW,MACvB,SAAUD,EAAc,IACxB,QAAS,GACT,MAAO,GACP,UAAW,CAAC,kBAAkB,EAC9B,SAAU,CACR,SAAU,QACV,UAAW,QACX,YAAa,sDACb,aAAc,GAChB,CACF,EAIF,QAAS,CACP,QAAS,GACT,SAAU,CACRA,EAAc,SACdA,EAAc,KACdA,EAAc,OACdA,EAAc,IACdA,EAAc,YAEhB,SAAU6E,GAAgB,gBAI5B,WAAY,CACV,SAAU,CACR,8BACA,6BACA,qBACA,wBACA,uBACA,cACA,iBACA,iBACA,kBAEF,SAAU,CACR,oCACA,qBACA,iBACA,eACA,kBACA,cACA,gBACA,mBACA,mBACA,oBAEF,UAAW,CACT,8BAA+B,6BAC/B,6BAA8B,8BAC9B,qBAAsB,qBACtB,iBAAkB,cAClB,cAAe,gBACf,gBAAiB,kBACjB,mBAAoB,mBACtB,EAIF,WAAY,CACV,YAAa,CACX,QAAS,CACP,OAAQ,CACN,8BACA,qBACA,wBACA,uBACA,qBACA,cACA,iBACA,gBAEF,QAAS,CAAC,oBAAqB,eAAgB,YAAa,kBAAkB,GAEhF,OAAQ,CACN,OAAQ,CACN,6BACA,oCACA,qBACA,wBACA,uBACA,qBACA,cACA,iBACA,gBAEF,QAAS,CAAC,oBAAqB,eAAgB,YAAa,kBAAkB,GAEhF,OAAQ,CACN,OAAQ,CACN,8BACA,qBACA,wBACA,uBACA,qBACA,cACA,iBACA,gBAEF,QAAS,CAAC,oBAAqB,eAAgB,YAAa,kBAAkB,EAChF,EAEF,kBAAmB,WAIrB,SAAU,CACR,UAAW,sBACX,UAAW,UACX,QAAS,QACT,YAAa,IAAI,OAAO,cACxB,aAAc,IAAI,OAAO,cACzB,YACE,wFACF,KAAM,CACJ,QACA,WACA,UACA,aACA,aACA,QACA,QACA,KACA,gBACA,iBAEF,kBAAmB,IACnB,kBAAmB,GACnB,gBAAiB,iBACjB,OAAQ,wBACR,QAAS,cACT,WAAY,CACV,MAAO,GACP,OAAQ,GACR,MAAO,EACP,QAAS,GAEX,SAAU,CACR,gCACA,2BACA,sBACA,wBACA,yBACA,kBACA,sBACF,CAEJ,ECriBamO,GAAqD,CAEhE,QAAS,CACP,CACE,GAAI,iBACJ,oBAAqB,CAAE,SAAU,EAAG,SAAU,QAC9C,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,SACX,UAAW,EACX,UAAW,EACX,MAAO,OACP,OAAQ,OACR,OAAQ,EACR,gBAAiB,UACjB,YAAa,GACb,QAAS,CAAC,mBAAoB,gBAAgB,EAChD,EAEF,CACE,GAAI,uBACJ,oBAAqB,CAAE,SAAU,EAAG,SAAU,QAC9C,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,SACX,UAAW,EACX,UAAW,EACX,MAAO,OACP,OAAQ,OACR,OAAQ,KACR,gBAAiB,UACjB,gBAAiB,8BACjB,QAAS,CAAC,mBAAmB,EAC/B,EAEF,CACE,GAAI,mBACJ,oBAAqB,CAAE,SAAU,EAAG,SAAU,QAC9C,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,cACX,UAAW,EACX,UAAW,SACX,MAAO,OACP,OAAQ,GACR,OAAQ,GACR,gBAAiB,UACjB,YAAa,GACb,QAAS,CAAC,eAAe,EAC3B,EAEF,CACE,GAAI,mBACJ,oBAAqB,CAAE,SAAU,EAAG,SAAU,QAC9C,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,cACX,UAAW,EACX,UAAW,EACX,MAAO,OACP,OAAQ,OACR,OAAQ,GACR,gBAAiB,UACjB,YAAa,GACb,QAAS,CAAC,eAAe,EAC3B,CACF,EAEF,mBAAoB,CAClB,GAAI,CACF,CACE,GAAI,iBACJ,oBAAqB,CAAE,SAAU,EAAG,SAAU,KAC9C,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,SACX,UAAW,EACX,UAAW,EACX,MAAO,OACP,OAAQ,OACR,OAAQ,EACR,gBAAiB,UACjB,YAAa,GACb,QAAS,CAAC,mBAAoB,iBAAkB,aAAa,EAC/D,EAEF,CACE,GAAI,uBACJ,oBAAqB,CAAE,SAAU,EAAG,SAAU,KAC9C,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,SACX,gBAAiB,6BACjB,QAAS,CAAC,oBAAqB,mBAAmB,EACpD,EAEF,CACE,GAAI,mBACJ,oBAAqB,CAAE,SAAU,EAAG,SAAU,KAC9C,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,cACX,OAAQ,GACR,QAAS,GACT,QAAS,CAAC,gBAAiB,eAAe,EAC5C,EAEF,CACE,GAAI,mBACJ,oBAAqB,CAAE,SAAU,EAAG,SAAU,KAC9C,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,cACX,OAAQ,GACR,QAAS,GACT,QAAS,CAAC,gBAAiB,eAAe,EAC5C,CACF,EAGF,GAAI,CACF,CACE,GAAI,iBACJ,oBAAqB,CAAE,SAAU,IAAK,SAAU,KAChD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,SACX,UAAW,EACX,UAAW,EACX,MAAO,OACP,OAAQ,OACR,OAAQ,EACR,gBAAiB,UACjB,YAAa,GACb,QAAS,CAAC,mBAAoB,iBAAkB,YAAY,EAC9D,EAEF,CACE,GAAI,uBACJ,oBAAqB,CAAE,SAAU,IAAK,SAAU,KAChD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,SACX,gBAAiB,6BACjB,QAAS,CAAC,oBAAqB,mBAAmB,EACpD,EAEF,CACE,GAAI,mBACJ,oBAAqB,CAAE,SAAU,IAAK,SAAU,KAChD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,cACX,OAAQ,GACR,QAAS,GACT,QAAS,CAAC,gBAAiB,eAAe,EAC5C,EAEF,CACE,GAAI,mBACJ,oBAAqB,CAAE,SAAU,IAAK,SAAU,KAChD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,cACX,OAAQ,GACR,QAAS,GACT,QAAS,CAAC,gBAAiB,eAAe,EAC5C,CACF,EAGF,GAAI,CACF,CACE,GAAI,iBACJ,oBAAqB,CAAE,SAAU,IAAK,SAAU,KAChD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,SACX,UAAW,EACX,UAAW,EACX,MAAO,OACP,OAAQ,OACR,OAAQ,EACR,gBAAiB,UACjB,YAAa,GACb,QAAS,CAAC,mBAAoB,iBAAkB,aAAa,EAC/D,EAEF,CACE,GAAI,uBACJ,oBAAqB,CAAE,SAAU,IAAK,SAAU,KAChD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,MACf,UAAW,SACX,gBAAiB,6BACjB,QAAS,CAAC,oBAAqB,mBAAmB,EACpD,EAEF,CACE,GAAI,mBACJ,oBAAqB,CAAE,SAAU,IAAK,SAAU,KAChD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,cACX,OAAQ,GACR,QAAS,GACT,QAAS,CAAC,gBAAiB,eAAe,EAC5C,EAEF,CACE,GAAI,mBACJ,oBAAqB,CAAE,SAAU,IAAK,SAAU,KAChD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,cACX,OAAQ,GACR,QAAS,GACT,QAAS,CAAC,gBAAiB,eAAe,EAC5C,CACF,EAGF,GAAI,CACF,CACE,GAAI,iBACJ,oBAAqB,CAAE,SAAU,IAAK,SAAU,MAChD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,SACX,UAAW,EACX,UAAW,EACX,MAAO,OACP,OAAQ,OACR,OAAQ,EACR,gBAAiB,UACjB,YAAa,GACb,QAAS,CAAC,mBAAoB,iBAAkB,YAAY,EAC9D,EAEF,CACE,GAAI,uBACJ,oBAAqB,CAAE,SAAU,IAAK,SAAU,MAChD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,MACf,UAAW,SACX,gBAAiB,8BACnB,EAEF,CACE,GAAI,mBACJ,oBAAqB,CAAE,SAAU,IAAK,SAAU,MAChD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,cACX,OAAQ,GACR,QAAS,GACX,EAEF,CACE,GAAI,mBACJ,oBAAqB,CAAE,SAAU,IAAK,SAAU,MAChD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,cACX,OAAQ,GACR,QAAS,GACX,CACF,EAGF,GAAI,CACF,CACE,GAAI,iBACJ,oBAAqB,CAAE,SAAU,KAAM,SAAU,QACjD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,SACX,UAAW,EACX,UAAW,EACX,MAAO,OACP,OAAQ,OACR,OAAQ,EACR,gBAAiB,UACjB,YAAa,GACb,QAAS,CAAC,mBAAoB,iBAAkB,SAAS,EAC3D,EAEF,CACE,GAAI,uBACJ,oBAAqB,CAAE,SAAU,KAAM,SAAU,QACjD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,MACf,UAAW,SACX,gBAAiB,8BACnB,EAEF,CACE,GAAI,mBACJ,oBAAqB,CAAE,SAAU,KAAM,SAAU,QACjD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,cACX,OAAQ,GACR,QAAS,GACX,EAEF,CACE,GAAI,mBACJ,oBAAqB,CAAE,SAAU,KAAM,SAAU,QACjD,iBAAkB,CAChB,oBAAqB,GACrB,cAAe,UACf,UAAW,cACX,OAAQ,GACR,QAAS,GACX,CACF,CACF,CAEJ,ECpVaC,GAAiD,CAC5D,QAAS,mBACT,UAAW,4BACX,QAAS,QACT,gBAAiB,UACjB,WAAYD,GAuHZ,YAAa,CACX,CACE,GAAI,iBACJ,KAAMvT,GAAe,UACrB,KAAM,iBACN,QAAS,CACP,UAAW,YACX,aAAc,oBAEhB,WAAY,CACV,YAAa,IAEf,SAAU,GA8CV,SAAU,OACZ,EAIF,aAAc,CACZ,QAAS,GACT,SAAU,CAAC,aAAc,KAAM,QAAS,SAAS,EAErD,EClGMyT,GAAiC,KACR,CAC3B,GAAI,6BACJ,KAAM,oCACN,QAAS,QACT,SAAU,GACV,iBAAkB,KAClB,SAAU,CACR,MAAO,cACP,YAAa,eAEf,YAAa,QAEb,QAAS,CAEP,CACE,KAAM,SACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,sBACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,kBACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,aACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,eACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAIrB,CACE,KAAM,OACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,wBACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAIrB,CACE,KAAM,iBACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,cACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,cACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,iBACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAIrB,CACE,KAAM,eACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,gBACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAIrB,CACE,KAAM,OACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,MACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAIrB,CACE,KAAM,cACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,YACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAIrB,CACE,KAAM,cACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,IAErB,CACE,KAAM,qBACN,MAAO,QACP,QAAS,GACT,mBAAoB,GACpB,kBAAmB,GACrB,EAGF,OAAQ,CACN,QAAS,GACT,SAAU,GACV,OAAQ,OACR,UAAW,GACX,cAAe,EACf,WAAY,IACZ,QAAS,IACT,sBAAuB,GACvB,0BAA2B,GAC3B,uBAAwB,GACxB,iBAAkB,GAClB,mBAAoB,IAGtB,QAAS,CACP,QAAS,GACT,OAAQ,GACR,SAAU,GACV,eAAgB,GAChB,aAAc,GAGhB,cAAe,CACb,cAAe,GACf,aAAc,GACd,eAAgB,GAChB,iBAAkB,GAClB,iBAAkB,KAGpB,YAAa,CACX,QAAS,GACT,aAAc,GACd,gBAAiB,GACjB,kBAAmB,GACnB,cAAe,CAAC,aAAc,YAAY,GAG5C,UAAW,CACT,QAAS,GACT,cAAe,GACf,cAAe,IACf,gBAAiB,IAGnB,cAAe,CACb,QAAS,GACT,kBAAmB,GACnB,qBAAsB,GACtB,uBAAwB,GACxB,gBAAiB,KAGnB,QAAS,CACP,QAAS,GACT,kBAAmB,GACnB,gBAAiB,GACjB,eAAgB,IAIlB,UAAqB,CACnB,MAAM5c,EAAmB,GACzB,OAAK,KAAK,IAAIA,EAAO,KAAK,gBAAgB,EACrC,KAAK,MAAMA,EAAO,KAAK,kBAAkB,EACzC,KAAK,SAASA,EAAO,KAAK,qBAAqB,EAC7CA,CACT,EAEA,MAAMd,EAAiD,CACrD,OAAOY,IAAA,GAAK,MAASZ,EACvB,EAEA,QAAiB,CACf,OAAO,KAAK,UAAU,IAAI,CAC5B,EAEA,SAASQ,EAA4B,CACnC,OAAO,KAAK,MAAMA,CAAI,CACxB,EAEA,SAAmB,CACjB,OAAO,KAAK,WAAW,SAAW,CACpC,EAEA,YAAa,CACX,MAAO,CACL,GAAI,KAAK,GACT,KAAM,KAAK,KACX,QAAS,KAAK,QACd,SAAU,KAAK,SACf,aAAc,KAAK,aACnB,QAAS,KAAK,UACd,iBAAkB,KAAK,WACvB,aAAc,OAAO,KAAK,KAAK,QAAQ,EAE3C,IAMSmd,GAAgCD,GAAA,ECnWtC,IAAKE,OACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,KAAO,OACPA,EAAA,KAAO,OACPA,EAAA,KAAO,OACPA,EAAA,YAAc,cACdA,EAAA,KAAO,OACPA,EAAA,UAAY,YACZA,EAAA,KAAO,OACPA,EAAA,SAAW,WAVDA,OAAA,IAiBAC,OACVA,EAAA,IAAM,MACNA,EAAA,YAAc,cACdA,EAAA,OAAS,SACTA,EAAA,eAAiB,iBAJPA,OAAA,IAOAC,QACVA,EAAA,OAAS,SACTA,EAAA,KAAO,OACPA,EAAA,aAAe,eAHLA,QAAA,IAMAC,OACVA,EAAA,WAAa,aACbA,EAAA,SAAW,WACXA,EAAA,OAAS,SACTA,EAAA,cAAgB,gBAChBA,EAAA,aAAe,eACfA,EAAA,aAAe,eANLA,OAAA,IASAC,OACVA,EAAA,QAAU,UACVA,EAAA,WAAa,aACbA,EAAA,SAAW,WACXA,EAAA,OAAS,SACTA,EAAA,SAAW,WALDA,OAAA,IAqBAC,QACVA,EAAA,QAAU,UACVA,EAAA,OAAS,SACTA,EAAA,SAAW,WAHDA,QAAA,IAmBAC,QACVA,EAAA,OAAS,SACTA,EAAA,UAAY,YACZA,EAAA,SAAW,WACXA,EAAA,WAAa,aAJHA,QAAA,IAOAC,QACVA,EAAA,OAAS,SACTA,EAAA,WAAa,aACbA,EAAA,SAAW,WAHDA,QAAA,IAUAC,OACVA,EAAA,YAAc,cACdA,EAAA,WAAa,aAFHA,OAAA,ICnEL,MAAMC,GAA4B,CAIvC,GAAI,sBACJ,KAAM,gBACN,YAAa,sBACb,YACE,4FACF,KAAMzF,EAAc,OACpB,QAASC,GAAa,QACtB,SAAU,GACV,iBAAkB,GAClB,cAAe,OACf,QAAS,QACT,OAAQ,0BACR,KAAM,CAAC,OAAQ,gBAAiB,UAAW,WAAY,cAAc,EAKrE,OAAQ,CAEN,QAAS,CACP,KAAM,UACN,MAAO,UACP,KAAM,UACN,SAAU,UACV,SAAU,CACR,GAAM,UACN,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACT,EAIF,UAAW,CACT,KAAM,UACN,MAAO,UACP,KAAM,UACN,SAAU,UACV,SAAU,CACR,GAAM,UACN,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACP,IAAO,UACT,EAIF,WAAY,CACV,QAAS,UACT,UAAW,UACX,SAAU,UACV,QAAS,qBACT,SAAU,CACR,UAAW,UACX,WAAY,UACZ,WAAY,4BACZ,UAAW,UACb,EAIF,KAAM,CACJ,QAAS,UACT,UAAW,UACX,SAAU,UACV,QAAS,UACT,SAAU,CACR,OAAQ,UACR,QAAS,UACT,QAAS,UACT,MAAO,UACT,EAIF,OAAQ,CACN,QAAS,UACT,QAAS,UACT,MAAO,UACP,KAAM,UACN,SAAU,CACR,UAAW,UACX,YAAa,UACb,KAAM,UACN,QAAS,UACX,EAIF,GAAI,CACF,OAAQ,UACR,OAAQ,qBACR,UAAW,UACX,SAAU,UACV,SAAU,CACR,eAAgB,UAChB,gBAAiB,UACjB,eAAgB,UAChB,cAAe,UACjB,EAIF,SAAU,CACR,MAAO,CACL,gBAAiB,UACjB,kBAAmB,UACnB,eAAgB,WAElB,WAAY,CACV,cAAe,UACf,cAAe,UACf,eAAgB,UAChB,kBAAmB,WAErB,MAAO,CACL,SAAU,UACV,QAAS,UACT,SAAU,UACV,MAAO,UACP,OAAQ,WAEV,OAAQ,CACN,kBAAmB,UACnB,kBAAmB,UACnB,kBAAmB,UACnB,kBAAmB,UACnB,kBAAmB,UACnB,kBAAmB,UACnB,kBAAmB,UACnB,kBAAmB,UACnB,kBAAmB,UACnB,mBAAoB,UACpB,mBAAoB,UACpB,mBAAoB,UACtB,EAIF,OAAQ,CACN,gBAAiB,UACjB,iBAAkB,0BAClB,aAAc,0BACd,aAAc,0BACd,eAAgB,0BAClB,EAMF,WAAY,CACV,WAAY,CACV,QAAS,8CACT,UAAW,sBACX,UAAW,4BACX,QAAS,sBACT,SAAU,CACR,aAAc,sBACd,cAAe,oBACf,aAAc,sBAChB,EAEF,SAAU,CACR,GAAI,GACJ,GAAI,GACJ,KAAM,GACN,GAAI,GACJ,GAAI,GACJ,MAAO,GACP,MAAO,GACP,QAAS,GACT,SAAU,CACR,aAAc,GACd,eAAgB,GAChB,cAAe,GACf,aAAc,GAChB,EAEF,WAAY,CACV,MAAO,IACP,OAAQ,IACR,OAAQ,IACR,SAAU,IACV,KAAM,IACN,UAAW,IACX,SAAU,CACR,aAAc,IACd,eAAgB,IAChB,cAAe,IACjB,EAEF,WAAY,CACV,MAAO,KACP,OAAQ,IACR,QAAS,KACT,MAAO,EACP,SAAU,CACR,aAAc,IACd,aAAc,IACd,cAAe,IACjB,EAEF,cAAe,CACb,MAAO,MACP,OAAQ,EACR,KAAM,KACN,SAAU,CACR,aAAc,IACd,eAAgB,IAClB,EAEF,UAAW,CACT,KAAM,OACN,OAAQ,SACR,MAAO,QACP,QAAS,WAEX,OAAQ,CACN,cAAe,+BACf,YAAa,mCACf,EAMF,QAAS,CACP,KAAM,GACN,MAAO,CACL,GAAI,EACJ,GAAI,EACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,MAAO,GACP,MAAO,GACP,SAAU,CACR,gBAAiB,GACjB,iBAAkB,GAClB,gBAAiB,GACjB,eAAgB,GAClB,EAEF,OAAQ,CACN,eAAgB,IAChB,iBAAkB,GAClB,iBAAkB,GACpB,EAMF,aAAc,CACZ,KAAM,EACN,GAAI,EACJ,KAAM,EACN,GAAI,GACJ,GAAI,GACJ,KAAM,KACN,SAAU,CACR,MAAO,KACP,OAAQ,EACR,MAAO,GACP,KAAM,EACN,cAAe,GACjB,EAMF,QAAS,CACP,GAAI,kCACJ,KAAM,+BACN,GAAI,oCACJ,GAAI,sCACJ,GAAI,sCACJ,MAAO,wCACP,SAAU,CACR,eAAgB,iCAChB,gBAAiB,qCACjB,eAAgB,iCAChB,aAAc,mCACd,eAAgB,mCAClB,EAMF,UAAW,CACT,SAAU,CACR,KAAM,IACN,OAAQ,IACR,KAAM,IACN,SAAU,IACV,SAAU,CACR,aAAc,IACd,aAAc,IACd,eAAgB,IAChB,aAAc,IACd,cAAe,IACjB,EAEF,OAAQ,CACN,OAAQ,SACR,KAAM,OACN,OAAQ,UACR,QAAS,WACT,UAAW,cACX,SAAU,CACR,aAAc,uCACd,gBAAiB,yCACjB,cAAe,uCACjB,EAEF,WAAY,CACV,IAAK,MACL,QAAS,UACT,UAAW,YACX,MAAO,QACP,WAAY,aACZ,SAAU,CACR,iBAAkB,YAClB,eAAgB,YAChB,aAAc,UACd,aAAc,aAChB,EAEF,OAAQ,CACN,iBAAkB,+CAClB,mBAAoB,0BACpB,iBAAkB,yCACpB,EAMF,YAAa,CACX,GAAI,EACJ,GAAI,IACJ,GAAI,IACJ,GAAI,KACJ,GAAI,KACJ,MAAO,KACP,SAAU,CACR,OAAQ,IACR,OAAQ,IACR,QAAS,KACT,gBAAiB,KACnB,EAMF,aAAc,CAEZ,kBAAmB,CACjB,gBAAiB,UACjB,MAAO,UACP,QAAS,GACT,kBAAmB,EACnB,UAAW,yBACX,QAASC,EAAY,KACrB,cAAe+E,EAAc,OAC7B,WAAYG,EAAW,OACvB,eAAgBD,EAAe,OAC/B,UAAW,QACX,UAAWK,EAAU,YAIvB,mBAAoB,CAClB,gBAAiB,UACjB,kBAAmB,KACnB,QAAS,GACT,UAAW,iCACX,MAAO,CAAE,MAAO,IAAK,KAAM5F,EAAS,OACpC,OAAQ,CAAE,MAAO,IAAK,KAAMA,EAAS,OACrC,QAASM,EAAY,KACrB,WAAYkF,EAAW,OACvB,eAAgBD,EAAe,OAC/B,SAAUtF,GAAa,SACvB,UAAW2F,EAAU,YAGvB,cAAe,CACb,gBAAiB,cACjB,kBAAmB,KACnB,MAAO,CAAE,MAAO,IAAK,KAAM5F,EAAS,OACpC,OAAQ,CAAE,MAAO,IAAK,KAAMA,EAAS,MAAM,EAG7C,iBAAkB,CAChB,gBAAiB,UACjB,kBAAmB,EACnB,MAAO,CAAE,MAAO,IAAK,KAAMA,EAAS,OACpC,OAAQ,CAAE,MAAO,IAAK,KAAMA,EAAS,OACrC,UAAW,sCAGb,gBAAiB,CACf,gBAAiB,UACjB,kBAAmB,KACnB,MAAO,CAAE,MAAO,IAAK,KAAMA,EAAS,OACpC,OAAQ,CAAE,MAAO,IAAK,KAAMA,EAAS,OACrC,UAAW,sCAIb,eAAgB,CACd,gBAAiB,UACjB,MAAO,UACP,QAAS,GACT,kBAAmB,EACnB,WAAY,IACZ,SAAU,GACV,UAAW,qCACX,MAAO,CAAE,MAAO,IAAK,KAAMA,EAAS,OACpC,OAAQ,CAAE,MAAO,GAAI,KAAMA,EAAS,OACpC,QAASM,EAAY,KACrB,WAAYkF,EAAW,OACvB,eAAgBD,EAAe,OAC/B,OAAQH,EAAW,QACnB,OAAQ,OACR,UAAWQ,EAAU,WACrB,WAAY,iBAGd,qBAAsB,CACpB,gBAAiB,UACjB,UAAW,qCACX,UAAW,cACX,OAAQR,EAAW,SAGrB,sBAAuB,CACrB,gBAAiB,UACjB,UAAW,eAGb,wBAAyB,CACvB,gBAAiB,UACjB,MAAO,UACP,OAAQA,EAAW,aAIrB,eAAgB,CACd,gBAAiB,4BACjB,MAAO,UACP,QAAS,GACT,kBAAmB,GACnB,UAAW,iCACX,MAAO,CAAE,MAAO,IAAK,KAAMpF,EAAS,OACpC,OAAQ,CAAE,MAAO,IAAK,KAAMA,EAAS,OACrC,QAASM,EAAY,KACrB,cAAe+E,EAAc,OAC7B,WAAYG,EAAW,OACvB,eAAgBD,EAAe,OAC/B,SAAUtF,GAAa,SACvB,UAAW2F,EAAU,WACrB,eAAgB,cAGlB,sBAAuB,CACrB,MAAO,UACP,SAAU,GACV,WAAY,IACZ,UAAWzF,EAAU,QAGvB,uBAAwB,CACtB,MAAO,UACP,SAAU,GACV,UAAW,GACX,UAAWA,EAAU,QAGvB,gBAAiB,CACf,MAAO,UACP,SAAU,GACV,WAAY,IACZ,UAAWA,EAAU,QAGvB,kBAAmB,CACjB,MAAO,UACP,SAAU,GACV,WAAY,IACZ,UAAWA,EAAU,QAIvB,gBAAiB,CACf,gBAAiB,UACjB,MAAO,UACP,kBAAmB,KACnB,MAAO,CAAE,MAAO,GAAI,KAAMH,EAAS,OACnC,OAAQ,CAAE,MAAO,GAAI,KAAMA,EAAS,OACpC,SAAU,GACV,WAAY,IACZ,UAAW,oCAGb,sBAAuB,CACrB,gBAAiB,UACjB,UAAW,aACX,OAAQoF,EAAW,SAIrB,eAAgB,CACd,gBAAiB,UACjB,MAAO,UACP,QAAS,EACT,kBAAmB,GACnB,SAAU,GACV,WAAY,IACZ,UAAWjF,EAAU,QAGvB,uBAAwB,CACtB,gBAAiB,UACjB,MAAO,UACP,UAAW,oCAGb,uBAAwB,CACtB,gBAAiB,UACjB,MAAO,UACP,UAAW,oCAIb,gBAAiB,CACf,MAAO,CAAE,MAAO,IAAK,KAAMH,EAAS,OACpC,OAAQ,CAAE,MAAO,IAAK,KAAMA,EAAS,MAAM,EAG7C,gBAAiB,CACf,MAAO,CAAE,MAAO,IAAK,KAAMA,EAAS,OACpC,OAAQ,CAAE,MAAO,IAAK,KAAMA,EAAS,MAAM,EAG7C,iBAAkB,CAChB,MAAO,CAAE,MAAO,IAAK,KAAMA,EAAS,OACpC,OAAQ,CAAE,MAAO,IAAK,KAAMA,EAAS,MAAM,EAI7C,oBAAqB,CACnB,QAASM,EAAY,KACrB,cAAe+E,EAAc,IAC7B,WAAYG,EAAW,OACvB,eAAgBD,EAAe,OAC/B,IAAK,GACL,UAAW,GACX,SAAUD,GAAS,MAIrB,iBAAkB,CAChB,QAAShF,EAAY,KACrB,cAAe+E,EAAc,OAC7B,WAAYG,EAAW,OACvB,eAAgBD,EAAe,OAC/B,IAAK,GACL,QAAS,GACT,gBAAiB,wBACjB,kBAAmB,GACnB,eAAgB,aAChB,UAAW,iCAIb,iBAAkB,CAChB,QAASjF,EAAY,KACrB,cAAe+E,EAAc,OAC7B,WAAYG,EAAW,OACvB,eAAgBD,EAAe,OAC/B,IAAK,EACL,QAAS,GACT,gBAAiB,0BACjB,kBAAmB,EACnB,OAAQ,oCACR,SAAU,KAIZ,mBAAoB,CAClB,QAASjF,EAAY,KACrB,WAAYkF,EAAW,OACvB,eAAgBD,EAAe,OAC/B,MAAO,CAAE,MAAO,GAAI,KAAMvF,EAAS,OACnC,OAAQ,CAAE,MAAO,GAAI,KAAMA,EAAS,OACpC,OAAQ,oCACR,UAAW,oBACX,kBAAmB,KACnB,aAAc,2BAIhB,UAAW,CACT,WAAYyF,GAAe,OAC3B,QAAS,EACT,WAAY,2CAGd,WAAY,CACV,WAAYA,GAAe,QAC3B,QAAS,EACT,WAAY,2CAId,iBAAkB,CAChB,WAAYjF,GAAW,OACvB,SAAUN,GAAa,OACvB,aAAcK,GAAa,UAG7B,cAAe,CACb,UAAWmF,GAAU,WACrB,aAAcC,GAAa,WAC7B,EAMF,OAAQ,CACN,iBAAkB,GAClB,eAAgB,CACd,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEF,eAAgB,CAAC,IAAK,IAAK,IAAK,IAAM,IAAM,IAAM,IAAO,KAAO,IAAO,IAAQ,KAAQ,GAAO,EAC9F,mBAAoB,CAClB,KAAM,IACN,OAAQ,IACR,KAAM,KAER,gBAAiB,CACf,KAAM,iBACN,KAAM,iBACN,KAAM,iBACN,IAAK,kBACL,UAAW,cACX,QAAS,cACX,EAMF,SAAU,CACR,UAAW,IAAI,KAAK,YAAY,EAChC,eAAgB,KAChB,OAAQ,0BACR,QAAS,QACT,KAAM,CAAC,OAAQ,gBAAiB,UAAW,WAAY,cAAc,EACrE,OAAQ,CACN,YAAa,gBACb,kBAAmB,gBACnB,eAAgB,UAChB,kBAAmB,WACrB,EAMF,SAASzE,EAAsB,CAc7B,MAbyC,CACvC,eAAgB,KAAK,OAAO,QAAQ,KACpC,gBAAiB,KAAK,OAAO,QAAQ,MACrC,eAAgB,KAAK,OAAO,QAAQ,KACpC,iBAAkB,KAAK,OAAO,UAAU,KACxC,qBAAsB,KAAK,OAAO,WAAW,QAC7C,eAAgB,KAAK,OAAO,KAAK,QACjC,iBAAkB,KAAK,OAAO,OAAO,QACrC,iBAAkB,KAAK,OAAO,OAAO,QACrC,eAAgB,KAAK,OAAO,OAAO,MACnC,YAAa,KAAK,OAAO,GAAG,OAC5B,eAAgB,KAAK,OAAO,GAAG,WAEjBA,CAAI,GAAK,SAC3B,EAEA,WAAW9W,EAAgD,CACzD,MAAMwB,EAAQ,KAAK,QAAQ,MAAMxB,CAAI,EACrC,OAAO,OAAOwB,GAAU,SAAWA,EAAQ,CAC7C,EAEA,YAAYxB,EAAsD,CAChE,MAAMwB,EAAQ,KAAK,WAAW,SAASxB,CAAI,EAC3C,OAAO,OAAOwB,GAAU,SAAWA,EAAQ,EAC7C,EAEA,gBAAgBxB,EAA4C,CAC1D,MAAMwB,EAAQ,KAAK,aAAaxB,CAAI,EACpC,OAAO,OAAOwB,GAAU,SAAWA,EAAQ,CAC7C,EAEA,UAAUxB,EAAuC,CAC/C,MAAMwB,EAAQ,KAAK,QAAQxB,CAAI,EAC/B,OAAO,OAAOwB,GAAU,SAAWA,EAAQ,MAC7C,EAEA,qBAAqBxB,EAAqD,CACxE,MAAMwB,EAAQ,KAAK,UAAU,SAASxB,CAAI,EAC1C,OAAO,OAAOwB,GAAU,SAAWA,EAAQ,GAC7C,EAEA,mBAAmBmF,EAAqC,CACtD,OAAOA,KAAc,KAAK,WAC5B,EAEA,kBAAkC,CAChC,OAAO,IACT,EAEA,OAAgB,CACd,OAAO,KAAK,MAAM,KAAK,UAAU,IAAI,CAAC,CACxC,EAEA,MAAM+U,EAAgC,CACpC,OAAO1d,IAAA,GAAK,MAAS0d,EACvB,CACF,ECjxBO,MAAMC,WAA8B/C,EAAU,CACnD,aAAc,CACZ,MAAM,uBAAuB,CAC/B,CAKU,sBAA6B,CACrC,KAAK,cAAc,qBACjB,mBACAmC,GACAH,GACAC,GACAF,GACAc,EAAA,CAEJ,CAKU,cAAuB,CAC/B,MAAO,kBACT,CAMA,SAAgB,CAGd,MAAM,UAEN,KAAK,OAAO,KACV,wBACA,UACA,2DAEJ,CAMM,QAAwB,QAAAjb,EAAA,sBAC5B,KAAK,OAAO,KAAK,wBAAyB,SAAU,yBAAyB,EAE7E,GAAI,CAGF,MAAMob,GAAAD,GAAA,eAAM,eAAN,IAAM,EAGZ,KAAK,2BAGL,MAAM,KAAK,qBAEX,KAAK,OAAO,KAAK,wBAAyB,SAAU,0BAA0B,CAChF,OAAS7d,EAAO,CACd,WAAK,OAAO,MAAM,wBAAyB,SAAU,yBAA0B,CAAE,MAAAA,EAAO,EAClFA,CACR,CACF,GAKQ,0BAAiC,CACvC,GAAI,CAEF,KAAK,IACF,KAAK,KAAK,MAAM,MAAQ,EAAG,GAAI,gCAAiC,CAC/D,SAAU,OACV,MAAO,UACP,WAAY,QACb,EACA,UAAU,GAAK,CAAC,EAGnB,KAAK,IACF,KAAK,KAAK,MAAM,MAAQ,EAAG,KAAK,MAAM,OAAS,GAAI,mCAAoC,CACtF,SAAU,OACV,MAAO,UACP,WAAY,QACb,EACA,UAAU,GAAK,CAAC,EAEnB,KAAK,OAAO,KACV,wBACA,2BACA,gCAEJ,OAASA,EAAO,CACd,KAAK,OAAO,MACV,wBACA,2BACA,wCACA,CAAE,MAAAA,CAAA,CAAM,CAEZ,CACF,CAKc,oBAAoC,QAAA0C,EAAA,sBAChD,GAAI,CACF,KAAK,OAAO,KAAK,wBAAyB,qBAAsB,wBAAwB,EAGxF,MAAMyP,EAAQ,KAAK,aAAa,MAC5BA,GAASA,EAAM,IAEjB,MAAM,KAAK,cAAcA,EAAM,EAAE,EAEjC,KAAK,OAAO,KACV,wBACA,qBACA,qCACA,CACE,QAASA,EAAM,GACf,UAAWA,EAAM,KACnB,GAGF,KAAK,OAAO,KACV,wBACA,qBACA,kCAGN,OAASnS,EAAO,CACd,KAAK,OAAO,MACV,wBACA,qBACA,iCACA,CAAE,MAAAA,CAAA,CAAM,CAGZ,CACF,GAKM,UAA0B,QAAA0C,EAAA,sBAC9B,KAAK,OAAO,KAAK,wBAAyB,WAAY,qBAAqB,EAG3E,MAAMob,GAAAD,GAAA,eAAM,iBAAN,IAAM,CACd,GACF,CCpKO,MAAME,EAAK,CAGhB,aAAc,CAFNxd,EAAA,iBAGND,EAAO,MAAM,OAAQ,cAAe,6CAA6C,EAGjF,MAAM0d,EAAiC,CACrC,OAAQ,2BACR,aAAc,CACZ,gBAAiB,UACjB,QAAS,CACP,QAAS,SACT,OAAQ,CACN,QAAS,CAAE,EAAG,EAAG,EAAG,GACpB,MAAO,GACT,CACF,CACF,EAIF,KAAK,SAAW,IAAIvW,GAASuW,CAAc,EAG3C,MAAMjW,EAAQ,IAAI8V,GAClB,KAAK,SAAS,SAAS9V,CAAK,EAE5BzH,EAAO,KAAK,OAAQ,cAAe,gCAAiC,CAClE,SAAU,wBACV,OAAQ0d,EAAe,OACxB,CACH,CAKM,OAAuB,QAAAtb,EAAA,sBAC3B,GAAI,CACFpC,EAAO,KAAK,OAAQ,QAAS,eAAe,EAG5C,KAAK,SAAS,WAAW,uBAAuB,EAEhDA,EAAO,KAAK,OAAQ,QAAS,2BAA2B,CAC1D,OAASN,EAAO,CACd,MAAAM,EAAO,MAAM,OAAQ,QAAS,uBAAwB,CAAE,MAAAN,EAAO,EACzDA,CACR,CACF,GAKA,aAAwB,CACtB,OAAO,KAAK,QACd,CAEA,SAAgB,CACV,KAAK,WACPM,EAAO,KAAK,OAAQ,UAAW,iBAAiB,EAChD,KAAK,SAAS,UACdA,EAAO,MAAM,OAAQ,UAAW,6BAA6B,EAEjE,CACF,CCjEA,SAAS,iBAAiB,mBAAoB,IAAYoC,EAAA,wBACxDpC,EAAO,KAAK,OAAQ,UAAW,OAAQ,0BAA0B,EAEjE,GAAI,CAEF,MADa,IAAIyd,GAAA,EACN,QACXzd,EAAO,KAAK,OAAQ,UAAW,OAAQ,2BAA2B,CACpE,OAASN,EAAO,CACdM,EAAO,MAAM,OAAQ,UAAW,uBAAwB,CAAE,MAAAN,EAAO,CACnE,CACF,EAAC,ECQM,MAAMie,WAA4BzM,EAAU,CA8HjD,YACEzJ,EACA2J,EACAC,EAAY,EACZC,EAAY,EACZC,EAA4B,KAC5B,CACA,MAAM9J,EAAO2J,EAAIC,EAAGC,EAAGC,CAAM,EA3CvBtR,EAAA,0BAAoC,MAGpCA,EAAA,uBAAmD,MAGnDA,EAAA,4BAAiE,MAGjEA,EAAA,2BAA+B,IAG/BA,EAAA,mBAA0C,OAG1CA,EAAA,iBAAgF,CACtF,EAAG,SACH,EAAG,WAIGA,EAAA,uBAA0B,WAG1BA,EAAA,qBAAwB,MACxBA,EAAA,sBAAyB,MAGzBA,EAAA,0BAA8B,IAG9BA,EAAA,sCAAsD,KAGpDA,EAAA,cAAiBiH,EAAO,eAWhC,KAAK,OAAO,MAAM,sBAAuB,QAAS,yCAA0C,CAC1F,GAAAkK,EACA,EAAAC,EACA,EAAAC,EACA,UAAW,CAAC,CAACC,EACb,SAAU9J,EAAM,MAAM,IACvB,EAGD,KAAK,iBAAiB,YAAY,EAGlC,KAAK,eAAe,CAClB,YAAa,IACb,SAAU,GACV,aAAc,GACd,SAAU,UACV,oBAAqB,GACrB,oBAAqB,GACtB,EAGD,KAAK,sBAIL,WAAW,IAAM,CACX,KAAK,QACP,KAAK,uBAET,EAAG,GAAG,CACR,CA/JA,OAAc,iBACZ5H,EACA4H,EACA8J,EACqB,CACrB,MAAMvR,EAASkH,EAAO,cACtBlH,EAAO,MAAM,sBAAuB,mBAAoB,0BAA2B,CACjF,SAAUH,EAAO,GACjB,OAAAA,EACA,SAAU4H,EAAM,MAAM,IACtB,UAAW,CAAC,CAAC8J,CAAA,CACd,EAED,GAAI,CACF,MAAMsD,EAAY,IAAI8I,GACpBlW,EACA5H,EAAO,GACPA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZ0R,GAA2B,MAG7B,OAAAvR,EAAO,MACL,sBACA,mBACA,uCACA,CACE,SAAUH,EAAO,GACjB,iBAAkBgV,EAAU,YAAY,KACxC,SAAU,CAAE,EAAGA,EAAU,EAAG,EAAGA,EAAU,EAAE,CAC7C,EAIEhV,EAAO,aACTG,EAAO,MAAM,sBAAuB,mBAAoB,kCAAmC,CACzF,SAAUH,EAAO,GACjB,WAAYA,EAAO,WACpB,EAGGA,EAAO,WAAW,cAAgB,SACpCG,EAAO,MAAM,sBAAuB,UAAW,sBAAuB,CACpE,SAAUH,EAAO,GACjB,YAAaA,EAAO,WAAW,YAChC,EACDgV,EAAU,eAAehV,EAAO,WAAW,WAAW,IAQ1DgV,EAAU,KAAOhV,EAAO,MAAQA,EAAO,GAEvCG,EAAO,MACL,sBACA,UACA,8CACA,CACE,SAAUH,EAAO,GACjB,UAAW,CAAE,MAAOgV,EAAU,MAAO,OAAQA,EAAU,QACvD,cAAe,CAAE,EAAGA,EAAU,EAAG,EAAGA,EAAU,GAC9C,UAAWA,EAAU,KACvB,EAGKA,CACT,OAASnV,EAAO,CACd,MAAAM,EAAO,MACL,sBACA,UACA,8CACAN,CAAA,EAEIA,CACR,CACF,CAwFA,sBAAsBwI,EAAe+I,EAAsB,CACzD,KAAK,cAAgB/I,EACrB,KAAK,eAAiB+I,EACtB,KAAK,OAAO,MAAM,sBAAuB,wBAAyB,0BAA2B,CAC3F,SAAU,KAAK,GACf,cAAe,KAAK,cACpB,eAAgB,KAAK,eACtB,CACH,CASA,mBACE2M,EACAzb,EAKI,GACE,aACN,KAAK,OAAO,MAAM,sBAAuB,wBAAyB,4BAA6B,CAC7F,SAAU,KAAK,GACf,WAAYyb,EACZ,WAAY,KAAK,MAAM,SAAS,OAAOA,CAAQ,EAChD,EAED,KAAK,mBAAqBA,EAC1B,KAAK,qBAAsB1e,EAAAiD,EAAQ,sBAAR,KAAAjD,EAA+B,GAC1D,KAAK,aAAcoJ,EAAAnG,EAAQ,cAAR,KAAAmG,EAAuB,MAC1C,KAAK,WAAYqJ,EAAAxP,EAAQ,YAAR,KAAAwP,EAAqB,CAAE,EAAG,SAAU,EAAG,UACxD,KAAK,iBAAkBM,EAAA9P,EAAQ,kBAAR,KAAA8P,EAA2B,UAGlD,KAAK,oBAAoB2L,CAAQ,CACnC,CAKQ,+BAAyC,CAE/C,MAAMC,EAAgB,KAAK,2BAA2B,KAAO,EAC7D,YAAK,OAAO,MACV,sBACA,gCACA,wCACA,CACE,SAAU,KAAK,GACf,2BAA4B,MAAM,KAAK,KAAK,2BAA2B,SAAS,EAChF,cAAAA,CAAA,CACF,EAEKA,CACT,CAQA,6BACEC,EACAC,EACA5b,EAKI,GACE,CAEN,KAAK,2BAA2B,IAAI,UAAW2b,CAAe,EAC9D,KAAK,2BAA2B,IAAI,SAAUC,CAAc,EAE5D,KAAK,OAAO,MACV,sBACA,gCACA,sCACA,CACE,SAAU,KAAK,GACf,gBAAAD,EACA,eAAAC,EACA,aAAc,KAAK,MAAM,KAAK,MAAM,MACtC,EAIF,MAAMzB,EAAe,KAAK,MAAM,KAAK,MAAM,MAG3C,IAAI0B,EAAmB,KAAK,uCAAuC1B,CAAY,EAG1E0B,IAEHA,EADkB1B,GAAgB,IACHwB,EAAkBC,GAGnD,KAAK,OAAO,MACV,sBACA,gCACA,4BACA,CACE,SAAU,KAAK,GACf,iBAAAC,EACA,aAAA1B,EACA,oBAAqB,CAAC,CAAC0B,CAAA,CACzB,EAIF,KAAK,mBAAmBA,EAAkB7b,CAAO,CACnD,CAKQ,oBAAoByb,EAAwB,CAClD,GAAKA,EAEL,GAAI,CAEF,GAAI,CAAC,KAAK,MAAM,SAAS,OAAOA,CAAQ,EAAG,CACzC,KAAK,OAAO,KACV,sBACA,sBACA,uBAAuBA,CAAQ,cAC/B,CACE,SAAU,KAAK,GACf,kBAAmB,OAAO,KAAK,KAAK,MAAM,SAAS,IAAI,EACzD,EAEF,MACF,CAGI,KAAK,kBACP,KAAK,OAAO,MACV,sBACA,sBACA,qCACA,CACE,SAAU,KAAK,GACjB,EAEF,KAAK,gBAAgB,UACrB,KAAK,gBAAkB,MAIzB,KAAK,gBAAkB,KAAK,MAAM,IAAI,MAAM,EAAG,EAAGA,CAAQ,EAG1D,KAAK,qBAAuB,CAC1B,MAAO,KAAK,gBAAiB,MAC7B,OAAQ,KAAK,gBAAiB,QAIhC,KAAK,IAAI,KAAK,eAAe,EAG7B,KAAK,mBAAqB,GAG1B,KAAK,8BAGL,KAAK,sBAGL,KAAK,wBAEL,KAAK,OAAO,MACV,sBACA,sBACA,uCACA,CACE,SAAU,KAAK,GACf,UAAW,CAAE,MAAO,KAAK,gBAAiB,MAAO,OAAQ,KAAK,gBAAiB,OAAO,CACxF,CAEJ,OAASle,EAAO,CACd,KAAK,OAAO,MACV,sBACA,sBACA,mCACAA,CAAA,EAEF,KAAK,mBAAqB,EAC5B,CACF,CAKA,uBAA8B,CACxB,KAAK,kBACP,KAAK,OAAO,MACV,sBACA,wBACA,4BACA,CACE,SAAU,KAAK,GACjB,EAEF,KAAK,gBAAgB,UACrB,KAAK,gBAAkB,MAGzB,KAAK,mBAAqB,KAC1B,KAAK,qBAAuB,KAC5B,KAAK,mBAAqB,GAG1B,KAAK,OAAO,IAAK,GAAG,CACtB,CAKA,mBAAmBwU,EAAqB,CACtC,KAAK,gBAAkBA,EAGlB,KAAK,oBACR,KAAK,2BAET,CAKQ,0BAA0BhM,EAAgB+I,EAAuB,CAEvE,KAAK,KAAK,QAAS0D,GAAe,CAC5BA,aAAiBxD,cAAmB,UACtCwD,EAAM,SAEV,CAAC,EAGD,MAAMpC,EAAYrK,GAAA,KAAAA,EAAS,KAAK,MAC1BsK,EAAavB,GAAA,KAAAA,EAAU,KAAK,OAG5BgN,EAAW,KAAK,MAAM,IAAI,WAChCA,EAAS,UAAUvL,UAAe,MAAM,aAAa,KAAK,eAAe,EAAE,KAAK,EAChFuL,EAAS,SAAS,EAAG,EAAG1L,EAAWC,CAAU,EAG7C,KAAK,IAAIyL,CAAQ,EAEjB,KAAK,OAAO,MACV,sBACA,4BACA,uCACA,CACE,SAAU,KAAK,GACf,gBAAiB,KAAK,gBACtB,cAAe,CAAE,MAAO1L,EAAW,OAAQC,CAAA,EAC3C,cAAe,CAAE,MAAO,KAAK,MAAO,OAAQ,KAAK,OAAO,CAC1D,CAEJ,CAQQ,uCAAuCtK,EAAmC,OAChF,GAAI,CAEF,IAAIhJ,EAAA,KAAK,kBAAL,MAAAA,EAAsB,WAAY,CACpC,MAAMuJ,EAAW,KAAK,IAAM,uBAG5B,GAAI,KAAK,gBAAgB,WAAW,mBAAoB,CACtD,MAAMI,EAAc,KAAK,gBAAgB,WAAW,mBACpD,SAAW,EAAGT,CAAO,IAAK,OAAO,QAAQS,CAAW,EAAG,CAQrD,MAAMqV,EAPe9V,EAOa,KAAKJ,GAAUA,EAAO,KAAOS,CAAQ,EACvE,GAAIyV,EAAc,CAChB,KAAM,CAAE,SAAA7V,EAAU,SAAA8V,CAAA,EAAaD,EAAa,oBAC5C,GAAIhW,GAASG,IAAa8V,IAAa,QAAajW,GAASiW,GAC3D,OAAOD,EAAa,iBAAiB,eAEzC,CACF,CACF,CAGA,GAAI,KAAK,gBAAgB,WAAW,QAAS,CAC3C,MAAMxV,EACJ,KAAK,gBAAgB,WAAW,QAKhC,KAAKV,GAAUA,EAAO,KAAOS,CAAQ,EAEvC,GAAIC,EACF,OAAOA,EAAc,iBAAiB,eAE1C,CACF,CAGA,GAAI,KAAK,2BAA2B,KAAO,EAEzC,OADkBR,GAAS,IAEvB,KAAK,2BAA2B,IAAI,SAAS,EAC7C,KAAK,2BAA2B,IAAI,QAAQ,CAEpD,OAASxI,EAAO,CACd,KAAK,OAAO,KACV,sBACA,yCACA,wDACA,CACE,SAAU,KAAK,GACf,MAAAwI,EACA,MAAOxI,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,EAC9D,CAEJ,CAGF,CAMQ,uBAA8B,CACpC,GAAI,CAAC,KAAK,OAAQ,OAGlB,MAAM0e,EAAe,KAAK,OAAO,qBAC3BC,EAAcD,EAAa,MAC3BE,EAAeF,EAAa,OAGlC,KAAK,OAAOC,EAAaC,CAAY,EAGrC,KAAK,0BAA0BD,EAAaC,CAAY,EAExD,KAAK,OAAO,MACV,sBACA,wBACA,wCACA,CACE,SAAU,KAAK,GACf,iBAAkB,CAAE,MAAOD,EAAa,OAAQC,CAAA,EAChD,UAAW,CAAE,MAAO,KAAK,MAAO,OAAQ,KAAK,QAC7C,mBAAoB,KAAK,mBAC3B,CAEJ,CAQQ,2BAAkC,CACxC,GAAI,CAAC,KAAK,iBAAmB,CAAC,KAAK,qBAAsB,OAGzD,MAAMC,EAAqB,KAAK,4CAGhC,OAAQA,EAAmB,eACzB,IAAK,MACH,GAAIA,EAAmB,oBAAqB,CAE1C,MAAMC,EACJ,KAAK,qBAAqB,MAAQ,KAAK,qBAAqB,OACxDC,EAAuB,KAAK,MAAQ,KAAK,OAE/C,IAAIC,EACAC,EAEAF,EAAuBD,GAEzBG,EAAgB,KAAK,OACrBD,EAAeC,EAAgBH,IAG/BE,EAAe,KAAK,MACpBC,EAAgBD,EAAeF,GAGjC,KAAK,gBAAgB,eAAeE,EAAcC,CAAa,EAG/D,KAAK,gBAAgB,YAAY,KAAK,MAAQ,EAAG,KAAK,OAAS,CAAC,EAEhE,KAAK,OAAO,MACV,sBACA,4BACA,4CACA,CACE,SAAU,KAAK,GACf,cAAe,CAAE,MAAO,KAAK,MAAO,OAAQ,KAAK,QACjD,iBAAkB,CAAE,MAAOD,EAAc,OAAQC,CAAA,EACjD,cAAe,CAAE,EAAG,KAAK,MAAQ,EAAG,EAAG,KAAK,OAAS,GACrD,cAAe,MACf,oBAAqB,GACvB,CAEJ,MAEE,KAAK,gBAAgB,eAAe,KAAK,MAAO,KAAK,MAAM,EAC3D,KAAK,gBAAgB,YAAY,KAAK,MAAQ,EAAG,KAAK,OAAS,CAAC,EAEhE,KAAK,OAAO,MACV,sBACA,4BACA,+CACA,CACE,SAAU,KAAK,GACf,cAAe,CAAE,MAAO,KAAK,MAAO,OAAQ,KAAK,QACjD,iBAAkB,CAAE,MAAO,KAAK,MAAO,OAAQ,KAAK,QACpD,cAAe,CAAE,EAAG,KAAK,MAAQ,EAAG,EAAG,KAAK,OAAS,GACrD,cAAe,MACf,oBAAqB,GACvB,EAGJ,MAEF,IAAK,UACL,QAEE,KAAK,gBAAgB,eAAe,KAAK,MAAO,KAAK,MAAM,EAC3D,KAAK,gBAAgB,YAAY,KAAK,MAAQ,EAAG,KAAK,OAAS,CAAC,EAEhE,KAAK,OAAO,MACV,sBACA,4BACA,+CACA,CACE,SAAU,KAAK,GACf,cAAe,CAAE,MAAO,KAAK,MAAO,OAAQ,KAAK,QACjD,iBAAkB,CAAE,MAAO,KAAK,MAAO,OAAQ,KAAK,QACpD,cAAe,CAAE,EAAG,KAAK,MAAQ,EAAG,EAAG,KAAK,OAAS,GACrD,cAAe,UACf,KAAM,+CACR,EAEF,MAIJ,KAAK,6BACP,CAMQ,2CAIN,mBAEA,IAAIzf,EAAA,KAAK,kBAAL,MAAAA,EAAsB,WAAY,CACpC,MAAMuJ,EAAW,KAAK,IAAM,uBAG5B,GACE,KAAK,gBAAgB,WAAW,oBAChC,KAAK,gBAAgB,kBACrB,CACA,MAAMR,EACJ,KAAK,gBAAgB,WAAW,mBAC9B,KAAK,gBAAgB,iBACvB,EAEF,GAAIA,EAAmB,CACrB,MAAMuM,EAAmBvM,EAAkB,KAAMD,GAAgBA,EAAO,KAAOS,CAAQ,EAEvF,GAAI+L,GAAA,MAAAA,EAAkB,iBACpB,MAAO,CACL,qBAAqBlM,EAAAkM,EAAiB,iBAAiB,sBAAlC,KAAAlM,EAAyD,GAC9E,eAAeqJ,EAAA6C,EAAiB,iBAAiB,gBAAlC,KAAA7C,EAAmD,MAClE,WAAWM,EAAAuC,EAAiB,iBAAiB,YAAlC,KAAAvC,EAA+C,SAGhE,CACF,CAGA,GAAI,KAAK,gBAAgB,WAAW,QAAS,CAC3C,MAAMvJ,EACJ,KAAK,gBAAgB,WAAW,QAKhC,KAAKV,GAAUA,EAAO,KAAOS,CAAQ,EAEvC,GAAIC,EACF,MAAO,CACL,qBAAqB+L,EAAA/L,EAAc,iBAAiB,sBAA/B,KAAA+L,EAAsD,GAC3E,eAAemK,EAAAlW,EAAc,iBAAiB,gBAA/B,KAAAkW,EAAgD,MAC/D,WAAWC,EAAAnW,EAAc,iBAAiB,YAA/B,KAAAmW,EAA4C,SAG7D,CACF,CAGA,MAAO,CACL,oBAAqB,KAAK,oBAC1B,cAAe,KAAK,YACpB,UAAW,KAAK,UAAU,EAAI,IAAM,KAAK,UAAU,EAEvD,CAYQ,qBAA4B,CAGpC,CAKA,SAAgB,CAEhB,CAOS,SAAgB,CACvB,KAAK,UACL,MAAM,SACR,CAKA,eAAmD,CACjD,OAAI,KAAK,oBAAsB,KAAK,qBAC3B,KAAK,qBAGP,CACL,MAAO,KAAK,MACZ,OAAQ,KAAK,OAEjB,CAOA,mBAOE,CACA,MAAO,CACL,SAAU,KAAK,mBACf,SAAU,KAAK,mBACf,WAAY,KAAK,qBACjB,YAAa,KAAK,YAClB,UAAW,KAAK,UAChB,oBAAqB,KAAK,oBAE9B,CAKA,2BAA2BC,EAIlB,CACHA,EAAW,cACb,KAAK,YAAcA,EAAW,aAG5BA,EAAW,YACb,KAAK,UAAYA,EAAW,UAC5B,KAAK,OAAO,MAAM,sBAAuB,oBAAqB,oBAAqB,CACjF,SAAU,KAAK,GACf,aAAcA,EAAW,UACzB,aAAc,KAAK,UACpB,GAGCA,EAAW,sBAAwB,SACrC,KAAK,oBAAsBA,EAAW,qBAIpC,KAAK,oBACP,KAAK,uBAET,CAMA,aAAaC,EAGJ,CACP,KAAK,OAAO,MAAM,sBAAuB,eAAgB,oBAAqB,CAC5E,SAAU,KAAK,GACf,aAAc,KAAK,UACnB,aAAcA,CAAA,CACf,EAED,KAAK,UAAYA,EAGb,KAAK,oBACP,KAAK,uBAET,CAKA,cAAmF,CACjF,OAAOnf,EAAA,GAAK,KAAK,UACnB,CAKQ,mCAAmCsI,EAAe8W,EAAuB,CAC/E,GAAI,KAAK,2BAA2B,OAAS,EAAG,CAC9C,KAAK,OAAO,MACV,sBACA,qCACA,6CACA,CACE,SAAU,KAAK,GACf,2BAA4B,MAAM,KAAK,KAAK,2BAA2B,SAAS,EAClF,EAEF,MACF,CAGA,MAAMC,EAAc,KAAK,uCAAuC/W,CAAK,EAErE,GAAI,CAAC+W,EAAa,CAChB,KAAK,OAAO,KACV,sBACA,qCACA,iDACA,CACE,SAAU,KAAK,GACf,MAAA/W,CAAA,CACF,EAEF,MACF,CAGA,GAAI,CAAC,KAAK,MAAM,SAAS,OAAO+W,CAAW,EAAG,CAC5C,KAAK,OAAO,KACV,sBACA,qCACA,+BACA,CACE,SAAU,KAAK,GACf,WAAYA,EACZ,kBAAmB,OAAO,KAAK,KAAK,MAAM,SAAS,IAAI,EACzD,EAEF,MACF,CAGIA,IAAgB,KAAK,oBACvB,KAAK,OAAO,MACV,sBACA,qCACA,6BACA,CACE,SAAU,KAAK,GACf,YAAa,KAAK,mBAClB,YAAAA,EACA,MAAA/W,CAAA,CACF,EAIF,KAAK,mBAAqB+W,EAC1B,KAAK,oBAAoBA,CAAW,EAGpC,KAAK,8BAGL,KAAK,sBAGL,KAAK,MAAM,OAAO,KAAK,0BAA2B,KAAK,EAAE,GAEzD,KAAK,OAAO,MACV,sBACA,qCACA,mDACA,CACE,SAAU,KAAK,GACf,gBAAiB,KAAK,mBACtB,YAAAA,EACA,MAAA/W,CAAA,CACF,CAGN,CAKA,sBAA6B,CAC3B,KAAK,OAAO,MACV,sBACA,uBACA,8BACA,CACE,GAAI,KAAK,GACT,eAAgB,KAAK,oBACrB,gBAAiB,CAAE,EAAG,KAAK,EAAG,EAAG,KAAK,EAAG,MAAO,KAAK,MAAO,OAAQ,KAAK,QACzE,mBAAoB,CAClB,EAAG,KAAK,EACR,EAAG,KAAK,EACR,MAAO,KAAK,MACZ,OAAQ,KAAK,QAEf,SAAU,KAAK,SAAS,OACxB,eAAgB,CACd,MAAO,KAAK,MAAM,KAAK,MAAM,MAC7B,OAAQ,KAAK,MAAM,KAAK,MAAM,QAEhC,iBAAkB,KAAK,UACzB,CAEJ,CAMA,gBAAuB,CACrB,MAAMgX,EAAa,CACjB,CAAE,EAAG,OAAQ,EAAG,OAChB,CAAE,EAAG,SAAU,EAAG,OAClB,CAAE,EAAG,QAAS,EAAG,OACjB,CAAE,EAAG,OAAQ,EAAG,UAChB,CAAE,EAAG,SAAU,EAAG,UAClB,CAAE,EAAG,QAAS,EAAG,UACjB,CAAE,EAAG,OAAQ,EAAG,UAChB,CAAE,EAAG,SAAU,EAAG,UAClB,CAAE,EAAG,QAAS,EAAG,SAAS,EAG5B,KAAK,OAAO,MACV,sBACA,iBACA,uCACA,CACE,SAAU,KAAK,GACf,WAAAA,CAAA,CACF,EAIF,KAAK,aAAa,CAAE,EAAG,SAAU,EAAG,SAAU,CAQhD,CAOA,cAAcnK,EAAuB,CAE/BA,EAAW,OACb,KAAK,mBAAmBA,EAAW,KAAK,CAE5C,CAKA,eAAeoK,EAAwB,CAEjCA,EAAY,sBAAwB,SACtC,KAAK,oBAAsBA,EAAY,oBAE3C,CAKA,iBAAiB1b,EAAoB,CAElC,KAAa,cAAgBA,CAChC,CAKQ,6BAAoC,CACtC,KAAK,kBACP,KAAK,gBAAgB,SAAS,EAAE,EAChC,KAAK,OAAO,MACV,sBACA,8BACA,mCACA,CACE,SAAU,KAAK,GACf,MAAO,GACT,EAGN,CAMQ,qBAA4B,uBAClC,KAAK,OAAO,MAAM,sBAAuB,sBAAuB,4BAA6B,CAC3F,SAAU,KAAK,GACf,WAAY,KAAK,SAAS,OAC3B,EAGD,IAAI0M,EAAmB,KACnBiP,EAAa,UAiBjB,IAdK9W,GAAApJ,EAAA,KAAK,MAAc,eAAnB,YAAAA,EAAiC,QAAjC,MAAAoJ,EAAwC,aAC3C6H,EAAe,KAAK,MAAc,aAAa,MAC/CiP,EAAa,uBACHzN,EAAA,KAAK,MAAc,eAAnB,MAAAA,EAAiC,aAC3CxB,EAAe,KAAK,MAAc,aAClCiP,EAAa,iBACHR,GAAAnK,GAAAxC,EAAA,KAAK,MAAc,gBAAnB,YAAAA,EAAkC,cAAlC,YAAAwC,EAA+C,cAA/C,MAAAmK,EAA4D,aACtEzO,EAAe,KAAK,MAAc,cAAc,YAAY,YAC5DiP,EAAa,0CACHC,GAAAR,EAAA,KAAK,MAAc,gBAAnB,YAAAA,EAAkC,cAAlC,MAAAQ,EAA+C,cACzDlP,EAAe,KAAK,MAAc,cAAc,YAChDiP,EAAa,6BAGX,EAACjP,GAAA,MAAAA,EAAa,aAAa,CAC7B,KAAK,OAAO,MACV,sBACA,cACA,gEACA,CACE,SAAU,KAAK,GACf,WAAY,CACV,qBACA,eACA,wCACA,6BAEF,eAAgB,OAAO,KAAM,KAAK,OAAiB,EAAE,EACrD,gBAAiB,CAAC,CAAE,KAAK,MAAc,aACvC,iBAAkB,CAAC,CAAE,KAAK,MAAc,cAC1C,EAIF,KAAK,wBACL,MACF,CAGA,MAAMmP,EAAmBnP,EAAY,YAAY,KAAMzJ,GAAaA,EAAI,KAAO,KAAK,EAAE,EACtF,GAAI,EAAC4Y,GAAA,MAAAA,EAAkB,UAAU,CAC/B,KAAK,OAAO,MACV,sBACA,cACA,iEACA,CACE,SAAU,KAAK,GACf,WAAAF,EACA,uBAAsBG,EAAApP,EAAY,cAAZ,YAAAoP,EAAyB,IAAK7Y,GAAaA,EAAI,MAAO,GAC5E,iBAAkB4Y,GAAoB,YACxC,EAIF,KAAK,wBACL,MACF,CAGA,KAAK,SAAS,QAAQ,CAAC3K,EAAY5L,KAAkB,CACnD,GAAI4L,GAAS,OAAOA,EAAM,UAAa,WAAY,CAEjD,MAAM6K,EAAcF,EAAiB,SAAS,KAC3Czf,GACCA,EAAO,KAAO8U,EAAM,MAAQ9U,EAAO,KAAO8U,EAAM,IAAM9U,EAAO,KAAO8U,EAAM,IAG9E,IAAI6K,GAAA,YAAAA,EAAa,UAAW,OAE1B7K,EAAM,SAAS6K,EAAY,MAAM,EACjC,KAAK,OAAO,MACV,sBACA,cACA,sCACA,CACE,SAAU,KAAK,GACf,UAAW7K,EAAM,MAAQA,EAAM,IAAM,UACrC,WAAY5L,GACZ,aAAcyW,EAAY,OAC1B,WAAAJ,CAAA,CACF,MAEG,CAEL,MAAMK,EAAiB1W,GAAQ,EAC/B4L,EAAM,SAAS8K,CAAc,EAC7B,KAAK,OAAO,MAAM,sBAAuB,cAAe,gCAAiC,CACvF,SAAU,KAAK,GACf,UAAW9K,EAAM,MAAQA,EAAM,IAAM,UACrC,WAAY5L,GACZ,eAAA0W,EACA,WAAAL,CAAA,CACD,CACH,CACF,CACF,CAAC,CACH,CAKQ,uBAA8B,CACpC,KAAK,OAAO,MACV,sBACA,wBACA,8BACA,CACE,SAAU,KAAK,GACf,WAAY,KAAK,SAAS,OAC5B,EAIF,KAAK,SAAS,QAAQ,CAACzK,EAAY5L,IAAkB,CACnD,GAAI4L,GAAS,OAAOA,EAAM,UAAa,WAAY,CACjD,MAAM8K,EAAiB1W,EAAQ,EAC/B4L,EAAM,SAAS8K,CAAc,EAE7B,KAAK,OAAO,MACV,sBACA,wBACA,4BACA,CACE,SAAU,KAAK,GACf,UAAW9K,EAAM,MAAQA,EAAM,IAAM,UACrC,WAAY5L,EACZ,eAAA0W,CAAA,CACF,CAEJ,CACF,CAAC,CACH,CAKA,eAAeC,EAA4B,CACzC,OAAIA,EAED,KAAa,iBAEd,KAAK,qBAEA,IACT,CASmB,WAAWxX,EAAe+I,EAAsB,CAsCjE,GArCA,KAAK,OAAO,MAAM,sBAAuB,iBAAkB,oBAAqB,CAC9E,SAAU,KAAK,GACf,cAAe,CAAE,MAAA/I,EAAO,OAAA+I,CAAA,EACxB,kBAAmB,CAAE,MAAO,KAAK,MAAO,OAAQ,KAAK,QACrD,mBAAoB,CAAC,CAAC,KAAK,gBAC3B,UAAW,CAAC,CAAC,KAAK,OACnB,EAGG,KAAK,oBAAsB,KAAK,iCAClC,KAAK,OAAO,MACV,sBACA,iBACA,kDACA,CACE,SAAU,KAAK,GACf,aAAc/I,EACd,sBAAuB,CAAC,CAAC,KAAK,mBAC9B,8BAA+B,KAAK,gCACpC,2BAA4B,MAAM,KAAK,KAAK,2BAA2B,SAAS,EAClF,EAEF,KAAK,mCAAmCA,EAAO+I,CAAM,GAErD,KAAK,OAAO,MACV,sBACA,iBACA,yCACA,CACE,SAAU,KAAK,GACf,sBAAuB,CAAC,CAAC,KAAK,mBAC9B,8BAA+B,KAAK,gCACpC,2BAA4B,MAAM,KAAK,KAAK,2BAA2B,SAAS,EAClF,EAIA,KAAK,oBAAsB,KAAK,qBAAsB,CAExD,MAAMsN,EAAqB,KAAK,4CAChC,KAAK,OAAO,MACV,sBACA,iBACA,wDACA,CACE,SAAU,KAAK,GACf,mBAAAA,EACA,cAAeA,EAAmB,cAClC,oBAAqBA,EAAmB,oBAC1C,EAGF,IAAIoB,EACAC,EACAC,EAGJ,OAAQtB,EAAmB,eACzB,IAAK,MACH,GAAIA,EAAmB,oBAAqB,CAE1C,MAAMC,EACJ,KAAK,qBAAqB,MAAQ,KAAK,qBAAqB,OACjCtW,EAAQ+I,EAEVuN,GAEzBoB,EAAc3O,EACd0O,EAAaC,EAAcpB,IAG3BmB,EAAazX,EACb0X,EAAcD,EAAanB,GAI7B,MAAMsB,EAAU5X,EAAQ,EAClB6X,EAAU9O,EAAS,EACzB4O,EAAgB,CACd,EAAGC,EAAUH,EAAa,EAC1B,EAAGI,EAAUH,EAAc,EAE/B,MAEED,EAAazX,EACb0X,EAAc3O,EACd4O,EAAgB,CAAE,EAAG,EAAG,EAAG,GAE7B,MAEF,IAAK,UACL,QAEEF,EAAazX,EACb0X,EAAc3O,EACd4O,EAAgB,CAAE,EAAG,EAAG,EAAG,GAC3B,MAIJ,KAAK,QAAQF,EAAYC,CAAW,EACpC,KAAK,YAAYC,EAAc,EAAGA,EAAc,CAAC,EAGjD,KAAK,4BAEL,KAAK,OAAO,MACV,sBACA,iBACA,wDACA,CACE,SAAU,KAAK,GACf,mBAAAtB,EACA,UAAW,CAAE,MAAOoB,EAAY,OAAQC,CAAA,EACxC,cAAAC,EACA,qBAAsB,KAAK,qBAC7B,CAEJ,MAGE,KAAK,OAAO,MACV,sBACA,UACA,yDACA,CACE,SAAU,KAAK,GACf,mBAAoB,CAAE,MAAA3X,EAAO,OAAA+I,CAAA,CAAO,CACtC,CAGN,CAMmB,YAAY/I,EAAe+I,EAAsB,CAClE,KAAK,OAAO,MAAM,sBAAuB,UAAW,qBAAsB,CACxE,SAAU,KAAK,GACf,cAAe,CAAE,MAAA/I,EAAO,OAAA+I,CAAA,CAAO,CAChC,EAGD,KAAK,8BAGL,KAAK,sBAEL,KAAK,OAAO,MAAM,sBAAuB,UAAW,mCAAoC,CACtF,SAAU,KAAK,GAChB,CACH,CACF,4HC91CO,MAAM+O,WAAkB7O,cAAmB,SAAoC,CAoBpF,YACE1J,EACA2J,EACAC,EAAY,EACZC,EAAY,EACZpJ,EAAgB,IAChB+I,EAAiB,IACjBgP,EAAoB,SACpB1O,EAA4B,KAC5B,CACA,MAAM9J,EAAO4J,EAAGC,EAAGpJ,EAAO+I,EAAQgP,CAAS,EA7BpChgB,EAAA,iBAAY,aACbA,EAAA,YACAA,EAAA,gBACAA,EAAA,cAAiBiH,EAAO,eAGxBjH,EAAA,oBAAuC,CAC7C,oBAAqB,GACrB,cAAe,UACf,UAAW,WAIbA,EAAA,wBAA2C,CACzC,oBAAqB,GACrB,cAAe,UACf,UAAW,WAeX,KAAK,IAAMmR,EACX,KAAK,QAAUG,EACf,KAAK,KAAOH,EAGZ,KAAK,UAAU,EAAG,CAAC,EAEnB,KAAK,OAAO,MAAM,YAAa,QAAS,oBAAqB,CAC3D,GAAAA,EACA,WAAY,CAAE,MAAAlJ,EAAO,OAAA+I,CAAA,EACrB,UAAAgP,EACA,SAAU,CAAE,EAAA5O,EAAG,EAAAC,CAAA,EACf,MAAO,KAAK,MACZ,QAAS,KAAK,QACd,OAAQ,KAAK,OACb,MAAO,KAAK,MACZ,MAAO,CAAE,EAAG,KAAK,OAAQ,EAAG,KAAK,OAAO,CACzC,CACH,CAKA,SAASE,EAAgD,CACvD,KAAK,OAAO,MAAM,YAAa,WAAY,2BAA4B,CACrE,GAAI,KAAK,GACT,SAAUA,CAAA,CACX,EAGD,KAAK,aAAe5R,EAAA,GAAK4R,GAGzB,KAAK,wBAAwBA,CAAgB,EAG7C,KAAK,oBAAoBA,CAAgB,EAGzC,KAAK,sBAAsBA,CAAgB,EAG3C,KAAK,6BAA6BA,CAAgB,CACpD,CAGA,UAAmC,CACjC,OAAO5R,EAAA,GAAK,KAAK,aACnB,CAGA,YAAqB,CACnB,OAAO,KAAK,EACd,CAKQ,wBAAwBmS,EAAqC,CAC/DA,EAAM,YAAc,SAClB,OAAOA,EAAM,WAAc,SAC7B,KAAK,EAAIA,EAAM,UACNA,EAAM,YAAc,WAE7B,KAAK,EAAI,IAITA,EAAM,YAAc,SAClB,OAAOA,EAAM,WAAc,SAC7B,KAAK,EAAIA,EAAM,UACNA,EAAM,YAAc,WAE7B,KAAK,EAAI,IAITA,EAAM,YAAc,QACtB,KAAK,SAASA,EAAM,SAAS,CAEjC,CAGQ,oBAAoBA,EAAqC,CAC3DA,EAAM,QAAU,QACd,OAAOA,EAAM,OAAU,WACzB,KAAK,MAAQA,EAAM,OAKnBA,EAAM,SAAW,QACf,OAAOA,EAAM,QAAW,WAC1B,KAAK,OAASA,EAAM,OAI1B,CAGQ,sBAAsBA,EAAqC,CACjE,GAAIA,EAAM,QAAU,QAClB,GAAI,OAAOA,EAAM,OAAU,SACzB,KAAK,SAASA,EAAM,KAAK,UAChB,OAAOA,EAAM,OAAU,UAAY,QAASA,EAAM,OAAS,QAASA,EAAM,MAAO,CAE1F,MAAMM,EAAeN,EAAM,MAA6B,iBACxD,KAAK,SAASM,CAAW,CAC3B,EAGF,GAAIN,EAAM,WAAa,QACrB,GAAI,OAAOA,EAAM,UAAa,SAC5B,KAAK,YAAYA,EAAM,QAAQ,UAE/B,OAAOA,EAAM,UAAa,UAC1B,QAASA,EAAM,UACf,QAASA,EAAM,SACf,CAEA,MAAMM,EAAeN,EAAM,SAAgC,iBAC3D,KAAK,YAAYM,CAAW,CAC9B,EAGEN,EAAM,UAAY,QACpB,KAAK,WAAWA,EAAM,OAAO,EAG3BA,EAAM,cAAgB,SACpBA,EAAM,YACR,KAAK,iBAEL,KAAK,qBAGX,CAGQ,6BAA6BA,EAAqC,CAKxE,GAJIA,EAAM,kBAAoB,QAC5B,KAAK,aAAaA,EAAM,eAAyB,EAG/CA,EAAM,cAAgB,QAAaA,EAAM,cAAgB,QAC3D,GAAI,OAAOA,EAAM,aAAgB,SAC/B,KAAK,eAAeA,EAAM,YAAaA,EAAM,WAAqB,UAElE,OAAOA,EAAM,aAAgB,UAC7B,QAASA,EAAM,aACf,QAASA,EAAM,YACf,CAEA,MAAMmO,EAAenO,EAAM,YAAmC,iBAC9D,KAAK,eAAemO,EAAanO,EAAM,WAAqB,CAC9D,EAEJ,CAIA,IAAI,IAAa,CACf,OAAO,KAAK,GACd,CAEA,IAAI,QAA4B,CAC9B,OAAO,KAAK,OACd,CAEA,IAAI,cAA6C,CAC/C,OAAO,IACT,CAEA,IAAI,UAAoB,CACtB,OAAO,KAAK,MACd,CAEA,IAAI,WAAqB,CACvB,OAAO,KAAK,OACd,CAEA,IAAI,eAAyB,OAC3B,QAAO7S,EAAA,KAAK,QAAL,YAAAA,EAAY,UAAW,EAChC,CAEA,IAAI,aAAuB,CACzB,OAAQ,KAAa,WAAa,EACpC,CAEA,IAAI,UAAqC,CACvC,MAAO,CAAE,EAAG,KAAK,EAAG,EAAG,KAAK,EAC9B,CAEA,IAAI,MAA0C,CAC5C,MAAO,CAAE,MAAO,KAAK,MAAO,OAAQ,KAAK,OAC3C,CAEA,IAAI,aAAuB,OACzB,QAAOA,EAAA,KAAK,QAAL,YAAAA,EAAY,UAAW,EAChC,CAGA,WAAiB,CACf,OAAO,MAAM,WACf,CAIA,IAAI,YAAgD,CAClD,MAAO,CAAE,MAAO,KAAK,MAAO,OAAQ,KAAK,OAC3C,CAEA,IAAI,aAAsB,CACxB,MAAO,EACT,CAIA,aAAagV,EAAqB,CAChC,KAAK,aAAaA,CAAK,CACzB,CAEA,UAAUA,EAAehM,EAAqB,CAC5C,KAAK,eAAeA,EAAOgM,CAAK,CAClC,CAEA,cAAqB,CACnB,KAAK,eAAe,EAAG,CAAQ,CACjC,CAEA,OAAOhM,EAAe+I,EAAsB,CAC1C,KAAK,OAAO,MAAM,YAAa,SAAU,qBAAsB,CAC7D,GAAI,KAAK,GACT,cAAe,KAAK,WACpB,cAAe,CAAE,MAAA/I,EAAO,OAAA+I,CAAA,CAAO,CAChC,EAGD,KAAK,QAAQ/I,EAAO+I,CAAM,CAC5B,CAIA,MAAa,CACX,KAAK,WAAW,EAAI,CACtB,CAEA,MAAa,CACX,KAAK,WAAW,EAAK,CACvB,CAOA,YAAmB,CACjB,KAAK,OAAO,MAAM,YAAa,aAAc,yBAA0B,CACrE,GAAI,KAAK,GACV,EAGD,KAAK,UAAU,EAAI,EACnB,KAAK,WAAW,EAAI,CACtB,CAEA,OAAOkP,EAAeC,EAAsB,CAG5C,CAEA,UAAiB,CACf,KAAK,OAAO,MAAM,YAAa,WAAY,uBAAwB,CACjE,GAAI,KAAK,GACV,EAED,KAAK,UAAU,EAAI,CACrB,CAEA,YAAmB,CACjB,KAAK,OAAO,MAAM,YAAa,aAAc,yBAA0B,CACrE,GAAI,KAAK,GACV,EAED,KAAK,UAAU,EAAK,CACtB,CAEA,OAAqB,CACnB,YAAK,OAAO,MAAM,YAAa,QAAS,oBAAqB,CAC3D,GAAI,KAAK,GACV,EAEM,IAAIJ,GACT,KAAK,MACL,GAAG,KAAK,EAAE,SACV,KAAK,SAAS,EACd,KAAK,SAAS,EACd,KAAK,KAAK,MACV,KAAK,KAAK,OACT,KAAa,WAAa,SAC3B,KAAK,OAET,CAGA,SAA6C,CAC3C,OAAO,KAAK,IACd,CAGA,aAAwC,CACtC,OAAO,KAAK,QACd,CAOA,iBAA0B,CACxB,OAAO,KAAK,MACd,CAMA,uBAAuB9X,EAAe+I,EAAsB,CAC1D,KAAK,OAAO,MACV,YACA,yBACA,wCACA,CACE,GAAI,KAAK,GACT,cAAe,CAAE,MAAA/I,EAAO,OAAA+I,CAAA,EACxB,kBAAmB,KAAK,WAC1B,EAIF,KAAK,OAAO/I,EAAO+I,CAAM,CAC3B,CAKA,iBAAwB,OACtB,KAAK,OAAO,MAAM,YAAa,kBAAmB,0BAA2B,CAC3E,GAAI,KAAK,GACT,WAAY,KAAK,WACjB,SAAU,KAAK,SACf,MAAO,KAAK,MACZ,QAAS,KAAK,QACd,OAAQ,KAAK,OACb,MAAO,KAAK,MACZ,MAAO,CAAE,EAAG,KAAK,OAAQ,EAAG,KAAK,QACjC,UAAW,KAAK,UAChB,YAAa,KAAK,YAClB,WAAU/R,EAAA,KAAK,SAAL,YAAAA,EAAa,KAAM,OAC7B,SAAU,KAAK,MAAM,MAAM,IAC5B,CACH,CAOA,OAAc,iBAAiBW,EAAa4H,EAAqB8J,EAAgC,CAC/F,MAAMvR,EAASkH,EAAO,cACtBlH,EAAO,MAAM,YAAa,mBAAoB,0BAA2B,CACvE,SAAUH,EAAO,GACjB,OAAAA,EACA,SAAU4H,EAAM,MAAM,IACtB,UAAW,CAAC,CAAC8J,EACb,WAAYA,EACR,CACE,GAAIA,EAAO,GACX,KAAMA,EAAO,YAAY,KACzB,OAAQA,EAAO,oBAAmB,EAEpC,KACL,EAED,GAAI,CAEF,IAAIrJ,EAAQrI,EAAO,OAAS,IACxBoR,EAASpR,EAAO,QAAU,IAE9B,GAAI0R,IAAWrJ,IAAU,QAAU+I,IAAW,QAAS,CACrD,MAAMmN,EAAe7M,EAAO,qBACxBrJ,IAAU,SAAQA,EAAQkW,EAAa,OACvCnN,IAAW,SAAQA,EAASmN,EAAa,OAC/C,CAEApe,EAAO,MAAM,YAAa,mBAAoB,sBAAuB,CACnE,SAAUH,EAAO,GACjB,gBAAiB,CAAE,MAAAqI,EAAO,OAAA+I,CAAA,EAC1B,UAAW,CAAC,CAACM,CAAA,CACd,EAED,MAAMoE,EAAY,IAAIqK,GACpBvY,EACA5H,EAAO,GACPA,EAAO,GAAK,EACZA,EAAO,GAAK,EACZqI,EACA+I,EACApR,EAAO,WAAa,SACpB0R,GAAU,MAIZ,OAAI1R,EAAO,aAGPA,EAAO,WAAW,cAAgB,QAClCA,EAAO,WAAW,cAAgB,QAElC8V,EAAU,UAAU9V,EAAO,WAAW,YAAaA,EAAO,WAAW,WAAW,EAI9EA,EAAO,WAAW,cAAgB,QACpC8V,EAAU,eAAe9V,EAAO,WAAW,WAAW,GAK1DG,EAAO,MACL,YACA,mBACA,mDACA,CACE,SAAUH,EAAO,GACjB,gBAAiB8V,EAAU,WAC3B,cAAeA,EAAU,SACzB,WAAYA,EAAU,MACtB,aAAcA,EAAU,QACxB,YAAaA,EAAU,OACvB,WAAYA,EAAU,MACtB,WAAY,CAAE,EAAGA,EAAU,OAAQ,EAAGA,EAAU,QAChD,UAAWA,EAAU,UACrB,YAAaA,EAAU,YACzB,EAIFA,EAAU,kBAEV3V,EAAO,MAAM,YAAa,mBAAoB,6CAA8C,CAC1F,SAAUH,EAAO,GACjB,gBAAiB8V,EAAU,WAC3B,UAAWA,EAAU,YAAc,EACnC,SAAUA,EAAU,SACpB,MAAOA,EAAU,MACjB,QAASA,EAAU,QACnB,OAAQA,EAAU,OAClB,MAAOA,EAAU,MACjB,MAAO,CAAE,EAAGA,EAAU,OAAQ,EAAGA,EAAU,OAAO,CACnD,EAEMA,CACT,OAASjW,EAAO,CACd,MAAAM,EAAO,MACL,YACA,kBACA,8CACAN,CAAA,EAEIA,CACR,CACF,CACF","names":["LogLevel","DEFAULT_LOGGER_CONFIG","validateLoggerConfig","overrides","createLoggerConfig","_a","toJSON","fromJSON","clone","serializable","__objRest","json","parsed","error","__spreadProps","__spreadValues","config","errors","ErrorTracker","logger","__publicField","errorEntry","level","currentCount","objectName","currentObjectCount","now","oneMinuteAgo","timestamp","recentErrors","_startTime","_endTime","limit","messageCounts","key","existing","data","a","b","timeWindowMinutes","windowSize","intervals","intervalSize","trends","i","intervalStart","count","size","threshold","rate","historySize","totalErrors","memoryEstimate","HttpClient","options","__async","url","method","headers","body","timeout","signal","credentials","requestOptions","response","responseData","e","httpResponse","timeoutError","token","extractedHeaders","value","DEV_BACKEND_CONFIG","PROD_BACKEND_CONFIG","getBackendConfig","getLoggingUrl","type","getHealthUrl","LogServerClient","newConfig","logEntry","logs","batches","results","batch","batchRequest","errorMessage","allSuccessful","totalLogs","sum","r","gameEvent","endpoint","timeSinceLastRequest","delay","items","batchSize","item","ms","resolve","_LoggerOptimized","loggerInterface","methodName","message","memory","memoryUsagePercent","connection","priority","entry","sanitized","keys","fieldName","field","stack","metrics","formattedMessage","className","levelColor","resetColor","dataString","replacer","_key","logsToSend","log","objectConfig","obj","objectLevel","metricName","unit","metadata","eventName","LoggerOptimized","_Logger","Logger","BaseGame","defaultPhaserConfig","Phaser.AUTO","Phaser.Scale","phaserConfig","Phaser.Game","scene","sceneKey","_LoggingConfigLoader","sceneName","LoggingConfigLoader","_ResponsiveConfigLoader","objectIds","layout","breakpointLayouts","width","sortedBreakpoints","layouts","minWidth","_b","breakpoint","currentBreakpoint","objectId","defaultLayout","breakpointKey","layoutsArray","breakpoints","warnings","index","ResponsiveConfigLoader","GameObjectType","_SceneLoaderConfigLoader","objects","found","SceneLoaderConfigLoader","AssetType","AssetState","AssetPriority","BundleType","BundleState","Asset","assetId","assetKey","assetType","assetConfig","state","previousState","time","startTime","loadTime","clonedAsset","AssetFactory","factoryId","factoryConfig","creator","asset","newKey","currentConfig","creationPromises","option","assets","successfulAssets","failedCreations","result","configs","totalCreated","totalAttempts","successRate","averageCreationTime","mostCreatedType","deltaTime","assetTypes","creationTime","maxCount","AssetBundle","bundleId","bundleType","bundleConfig","totalSize","clonedBundle","loadPromises","unloadPromises","totalAssets","loadedAssets","failedAssets","percentage","estimatedTimeRemaining","AssetBundleFactory","bundleFactoryId","bundleFactoryConfig","bundle","newId","bundles","successfulBundles","bundleName","bundleTypes","AssetManager","managerId","managerConfig","factory","manager","_options","loadedAsset","loadedBundles","loadedBundle","cachedAssets","totalBundles","failedBundles","cachedBundles","totalLoadTime","averageLoadTime","cacheHitRate","SceneLoadingPhase","SceneLoadingState","LoadingStrategy","SceneAssetPhase","SceneAssetConfigLoader","loaderId","sceneId","assetManager","sceneAssetConfig","loadingConfig","phase","previousPhase","progress","validation","responsiveConfig","responsiveAssets","requiredAssets","optionalAssets","existingAssets","existingAsset","existingBundles","existingBundle","success","requiredAsset","_deltaTime","elapsedTime","totalItems","completedItems","averageTimePerItem","remainingItems","_ConfigManager","loggingConfig","sceneConfig","themeConfig","sceneAssetLoader","loggingLoaded","loggingScenes","responsiveScenes","sceneScenes","assetScenes","ConfigManager","BaseGameObjectFactory","supportedTypes","objectType","gameObject","input","height","Container","Phaser.GameObjects","id","x","y","parent","layoutProperties","finalProperties","l","_c","classes","theme","themeClass","style","axis","_d","dimension","prop","randomPadding","randomValue","existingBackground","rectWidth","rectHeight","backgroundRect","Phaser.Display","existingShadow","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","shadowAlpha","shadowRect","existingBorder","borderColor","borderWidth","borderBottomWidth","borderRect","innerRect","scale","scaleX","scaleY","borderRadius","boxShadow","existingBoxShadow","match","offsetX","offsetY","blur","color","alpha","colorPart","rgbaMatch","g","styleProperties","breakpointLayout","_e","themeClasses","child","fromScene","container","ContainerFactory","background","cleanColor","hexColor","ImageFactory","image","TextFactory","textConfig","text","ButtonFactory","button","ShapeFactory","shape","rectangle","radius","circle","ellipse","triangle","points","polygon","radiusX","radiusY","angle","hexMatch","_GameObjectFactoryManager","containerFactory","imageFactory","textFactory","buttonFactory","shapeFactory","createMethod","ConcreteClass","__vitePreload","BackgroundContainer$1","importError","Rectangle$1","methodError","name","hasFactory","types","stats","GameObjectFactoryManager","SizeUnit","PositionType","OverflowType","TextAlign","BaseThemeType","ThemeVariant","DisplayType","TextOverflow","WhiteSpace","ThemeElementType","ThemeManager","defaultTheme","filter","themes","variant","themeId","lightThemes","darkThemes","path","pathParts","current","part","spacingValue","fontSizeValue","borderRadiusValue","shadowValue","durationValue","element","htmlElement","listener","parsedConfig","selector","keysToDelete","_","root","colors","prefix","ThemeActivator","themeManager","context","applicationContext","newThemeId","activeTheme","isActive","availableThemes","_sceneKey","_themeClass","_context","BaseScene","Phaser","desktopBg","desktopPath","mobileBg","mobilePath","mobileOriginBg","mobileOriginPath","reject","file","gameObjects","successCount","failureCount","containers","objConfig","phaserContainer","gameWidth","gameHeight","factoryInput","parentContainer","resizeHandler","newWidth","newHeight","rootContainer","delta","firstGameObjectId","firstGameObject","sceneGameObject","cacheKey","_objectId","currentWidth","levis2025R3WheelScene1AssetConfig","levis2025r3wheelResponsiveConfig","levis2025r3wheelSceneLoaderConfig","createLevis2025R3LoggingConfig","levis2025r3wheelLoggingConfig","CursorType","FlexDirection","FlexWrap","JustifyContent","AlignItems","VisibilityType","WordBreak","OverflowWrap","BoxSizing","fortuneWheelTheme","other","Levis2025R3WheelScene","__superGet","Game","baseGameConfig","BackgroundContainer","imageKey","hasResponsive","desktopImageKey","mobileImageKey","selectedImageKey","graphics","objectLayout","maxWidth","parentBounds","parentWidth","parentHeight","responsiveBehavior","imageAspectRatio","containerAspectRatio","displayWidth","displayHeight","_f","_g","properties","alignment","_height","newImageKey","alignments","constraints","configPath","_h","backgroundConfig","_i","childConfig","fallbackZOrder","interactive","finalWidth","finalHeight","finalPosition","centerX","centerY","Rectangle","fillColor","randomWidth","_time","_delta"],"ignoreList":[],"sources":["../../src/types/logging/LoggerTypes.ts","../../src/config/LoggerConfig.ts","../../src/core/ErrorTracker.ts","../../src/core/HttpClient.ts","../../src/runtime/env/backend.config.ts","../../src/core/LogServerClient.ts","../../src/core/LoggerOptimized.ts","../../src/core/Logger.ts","../../src/game/BaseGame.ts","../../src/core/LoggingConfigLoader.ts","../../src/core/ResponsiveConfigLoader.ts","../../src/core/SceneLoaderConfigLoader.ts","../../src/asset/interfaces/IAsset.ts","../../src/asset/interfaces/IAssetBundle.ts","../../src/asset/classes/Asset.ts","../../src/asset/classes/AssetFactory.ts","../../src/asset/classes/AssetBundle.ts","../../src/asset/classes/AssetBundleFactory.ts","../../src/asset/classes/AssetManager.ts","../../src/asset/interfaces/scene/ISceneAssetLoader.ts","../../src/asset/enums/AssetEnums.ts","../../src/asset/classes/SceneAssetConfigLoader.ts","../../src/core/ConfigManager.ts","../../src/abstract/factories/IGameObjectFactory.ts","../../src/object/container/Container.ts","../../src/factory/ContainerFactory.ts","../../src/factory/ImageFactory.ts","../../src/factory/TextFactory.ts","../../src/factory/ButtonFactory.ts","../../src/factory/ShapeFactory.ts","../../src/factory/GameObjectFactoryManager.ts","../../src/unit/enums/SizeUnit.ts","../../src/layout/enums/LayoutEnums.ts","../../src/layout/classes/ThemeManager.ts","../../src/layout/classes/ThemeActivator.ts","../../src/abstract/base/BaseScene.ts","../../src/runtime/games/levis-2025-r3-wheel/scene-1/levis-2025-r3-wheel-scene-1.asset.config.ts","../../src/runtime/scene/levis2025r3wheel/levis2025r3wheel.responsive.config.ts","../../src/runtime/scene/levis2025r3wheel/levis2025r3wheel.scene_loader.config.ts","../../src/runtime/scene/levis2025r3wheel/levis2025r3wheel.logging.config.ts","../../src/layout/enums/ThemeEnums.ts","../../src/runtime/games/levis-2025-r3-wheel/scene-1/fortune-wheel-theme.config.ts","../../src/scenes/Levis2025R3WheelScene.ts","../../src/game/Game.ts","../../src/main.ts","../../src/object/container/BackgroundContainer.ts","../../src/object/shapes/Rectangle.ts"],"sourcesContent":["/**\n * Log levels enum\n */\nexport enum LogLevel {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARN = 3,\n  ERROR = 4,\n}\n\n/**\n * Log entry structure for frontend logging\n * Matches backend API expectations\n */\nexport interface LogEntry {\n  level: string; // Required: 'ERROR', 'WARN', 'INFO', 'DEBUG', 'TRACE'\n  objectName: string; // Required\n  message: string; // Required\n  data?: any; // Optional additional data\n  methodName?: string; // Optional method name\n  stackTrace?: string; // Optional stack trace for errors\n  performance?: any; // Optional performance metrics\n}\n\n/**\n * Performance metric structure\n */\nexport interface PerformanceMetric {\n  value: any;\n  timestamp: number;\n}\n\n/**\n * Error statistics structure\n */\nexport interface ErrorStatistics {\n  totalErrors: number;\n  errorsByLevel: Record<string, number>;\n  errorsByObject: Record<string, number>;\n  recentErrors: LogEntry[];\n  errorRate: number; // errors per minute\n}\n\n/**\n * Server configuration for logging\n */\nexport interface LogServerConfig {\n  enabled: boolean;\n  endpoint: string;\n  apiKey?: string;\n  batchSize: number;\n  retryAttempts: number;\n  retryDelay: number;\n  timeout: number;\n  sendErrorsImmediately: boolean;\n  sendGameEventsImmediately: boolean;\n  includePerformanceData: boolean;\n  includeUserAgent: boolean;\n  includeSessionData: boolean;\n}\n\n/**\n * Console configuration\n */\nexport interface ConsoleConfig {\n  enabled: boolean;\n  colors: boolean;\n  showData: boolean;\n  showStackTrace: boolean;\n  maxDataDepth: number;\n}\n\n/**\n * Format options for log messages\n */\nexport interface FormatOptions {\n  showTimestamp: boolean;\n  showLogLevel: boolean;\n  showObjectName: boolean;\n  useJsonStringify: boolean;\n  maxMessageLength: number;\n}\n\n/**\n * Performance monitoring configuration\n */\nexport interface PerformanceConfig {\n  enabled: boolean;\n  fpsThreshold: number;\n  memoryThreshold: number;\n  networkMonitoring: boolean;\n  customMetrics: string[];\n}\n\n/**\n * Buffering configuration\n */\nexport interface BufferingConfig {\n  enabled: boolean;\n  maxBufferSize: number;\n  flushInterval: number;\n  persistOnUnload: boolean;\n}\n\n/**\n * Error tracking configuration\n */\nexport interface ErrorTrackingConfig {\n  enabled: boolean;\n  includeStackTrace: boolean;\n  trackUnhandledErrors: boolean;\n  trackPromiseRejections: boolean;\n  maxErrorHistory: number;\n}\n\n/**\n * Session configuration\n */\nexport interface SessionConfig {\n  enabled: boolean;\n  generateSessionId: boolean;\n  includeUserInfo: boolean;\n  trackPageViews: boolean;\n}\n\n/**\n * Object-specific logging configuration\n */\nexport interface ObjectLogConfig {\n  name: string;\n  enabled: boolean;\n  level: LogLevel;\n  includePerformance: boolean;\n  includeStackTrace: boolean;\n}\n\nimport { IConfiguration } from '../../abstract/interfaces/IConfiguration';\n\n/**\n * Main logger configuration\n */\nexport interface LoggerConfig extends IConfiguration {\n  globalLevel: LogLevel;\n  objects: ObjectLogConfig[];\n  server: LogServerConfig;\n  console: ConsoleConfig;\n  formatOptions: FormatOptions;\n  performance: PerformanceConfig;\n  buffering: BufferingConfig;\n  errorTracking: ErrorTrackingConfig;\n  session: SessionConfig;\n}\n\n/**\n * Game event data structure\n */\nexport interface GameEventData {\n  eventName: string;\n  eventData: any;\n  playerId?: string;\n  timestamp: number;\n  gameState: any;\n}\n\n/**\n * Server response structure\n */\nexport interface LogServerResponse {\n  success: boolean;\n  message: string;\n  logIds?: string[];\n  error?: string;\n  retryAfter?: number;\n}\n\n/**\n * Batch log request structure\n */\nexport interface BatchLogRequest {\n  logs: LogEntry[];\n  sessionId: string;\n  timestamp: string;\n  version: string;\n}\n\n/**\n * Performance monitoring data\n */\nexport interface PerformanceData {\n  fps: number;\n  memory: {\n    used: number;\n    total: number;\n    limit: number;\n  };\n  network: {\n    effectiveType: string;\n    downlink: number;\n    rtt: number;\n  };\n  custom: Record<string, any>;\n}\n","import {\n  LogLevel,\n  LoggerConfig,\n  ObjectLogConfig,\n  LogServerConfig,\n  ConsoleConfig,\n  FormatOptions,\n  PerformanceConfig,\n  BufferingConfig,\n  ErrorTrackingConfig,\n  SessionConfig,\n} from '../types/logging/LoggerTypes';\n\n// Re-export types and values for convenience\nexport { LogLevel };\nexport type {\n  LoggerConfig,\n  ObjectLogConfig,\n  LogServerConfig,\n  ConsoleConfig,\n  FormatOptions,\n  PerformanceConfig,\n  BufferingConfig,\n  ErrorTrackingConfig,\n  SessionConfig,\n};\n\n/**\n * Default logger configuration\n */\nexport const DEFAULT_LOGGER_CONFIG: LoggerConfig = {\n  id: 'default-logger-config',\n  name: 'Default Logger Configuration',\n  version: '1.0.0',\n  isActive: true,\n  lastModified: new Date(),\n  metadata: {\n    description: 'Default configuration for the enhanced logger system',\n    author: 'System',\n    environment: 'development',\n  },\n  globalLevel: LogLevel.INFO,\n\n  objects: [\n    {\n      name: 'Game',\n      enabled: true,\n      level: LogLevel.DEBUG,\n      includePerformance: true,\n      includeStackTrace: true,\n    },\n    {\n      name: 'Scene',\n      enabled: true,\n      level: LogLevel.DEBUG,\n      includePerformance: true,\n      includeStackTrace: true,\n    },\n    {\n      name: 'Player',\n      enabled: true,\n      level: LogLevel.INFO,\n      includePerformance: false,\n      includeStackTrace: true,\n    },\n    {\n      name: 'Network',\n      enabled: true,\n      level: LogLevel.DEBUG,\n      includePerformance: true,\n      includeStackTrace: true,\n    },\n    {\n      name: 'Performance',\n      enabled: true,\n      level: LogLevel.INFO,\n      includePerformance: true,\n      includeStackTrace: false,\n    },\n    {\n      name: 'Error',\n      enabled: true,\n      level: LogLevel.ERROR,\n      includePerformance: true,\n      includeStackTrace: true,\n    },\n  ],\n\n  server: {\n    enabled: true,\n    endpoint: '/api/logs',\n    apiKey: undefined,\n    batchSize: 50,\n    retryAttempts: 3,\n    retryDelay: 1000,\n    timeout: 5000,\n    sendErrorsImmediately: true,\n    sendGameEventsImmediately: true,\n    includePerformanceData: true,\n    includeUserAgent: true,\n    includeSessionData: true,\n  },\n\n  console: {\n    enabled: true,\n    colors: true,\n    showData: true,\n    showStackTrace: true,\n    maxDataDepth: 3,\n  },\n\n  formatOptions: {\n    showTimestamp: true,\n    showLogLevel: true,\n    showObjectName: true,\n    useJsonStringify: true,\n    maxMessageLength: 1000,\n  },\n\n  performance: {\n    enabled: true,\n    fpsThreshold: 30,\n    memoryThreshold: 80,\n    networkMonitoring: true,\n    customMetrics: [],\n  },\n\n  buffering: {\n    enabled: true,\n    maxBufferSize: 100,\n    flushInterval: 5000, // 5 seconds\n    persistOnUnload: true,\n  },\n\n  errorTracking: {\n    enabled: true,\n    includeStackTrace: true,\n    trackUnhandledErrors: true,\n    trackPromiseRejections: true,\n    maxErrorHistory: 100,\n  },\n\n  session: {\n    enabled: true,\n    generateSessionId: true,\n    includeUserInfo: false,\n    trackPageViews: true,\n  },\n\n  // IConfiguration interface methods\n  validate(): string[] {\n    return validateLoggerConfig(this);\n  },\n\n  clone(overrides?: Partial<LoggerConfig>): LoggerConfig {\n    return createLoggerConfig(overrides || {});\n  },\n\n  toJSON(): string {\n    const { toJSON, fromJSON, clone, ...serializable } = this;\n    return JSON.stringify(serializable, null, 2);\n  },\n\n  fromJSON(json: string): LoggerConfig {\n    try {\n      const parsed = JSON.parse(json);\n      return createLoggerConfig(parsed);\n    } catch (error) {\n      throw new Error(`Failed to parse JSON: ${error}`);\n    }\n  },\n\n  isValid(): boolean {\n    return this.validate().length === 0;\n  },\n\n  getSummary() {\n    return {\n      id: this.id,\n      name: this.name,\n      version: this.version,\n      isActive: this.isActive,\n      lastModified: this.lastModified,\n      isValid: this.isValid(),\n      validationErrors: this.validate(),\n      metadataKeys: Object.keys(this.metadata),\n    };\n  },\n};\n\n/**\n * Check if logging is enabled for a specific object\n * @deprecated Use Logger instance methods instead\n */\nexport function isObjectLoggingEnabled(objectName: string): boolean {\n  const objectConfig = DEFAULT_LOGGER_CONFIG.objects.find(obj => obj.name === objectName);\n  return objectConfig ? objectConfig.enabled : true;\n}\n\n/**\n * Get log level for a specific object\n * @deprecated Use Logger instance methods instead\n */\nexport function getObjectLogLevel(objectName: string): LogLevel {\n  const objectConfig = DEFAULT_LOGGER_CONFIG.objects.find(obj => obj.name === objectName);\n  return objectConfig ? objectConfig.level : DEFAULT_LOGGER_CONFIG.globalLevel;\n}\n\n/**\n * Check if performance logging is enabled for a specific object\n * @deprecated Use Logger instance methods instead\n */\nexport function isObjectPerformanceEnabled(objectName: string): boolean {\n  const objectConfig = DEFAULT_LOGGER_CONFIG.objects.find(obj => obj.name === objectName);\n  return objectConfig ? objectConfig.includePerformance : false;\n}\n\n/**\n * Check if stack trace logging is enabled for a specific object\n * @deprecated Use Logger instance methods instead\n */\nexport function isObjectStackTraceEnabled(objectName: string): boolean {\n  const objectConfig = DEFAULT_LOGGER_CONFIG.objects.find(obj => obj.name === objectName);\n  return objectConfig ? objectConfig.includeStackTrace : false;\n}\n\n/**\n * Create a custom logger configuration\n */\nexport function createLoggerConfig(overrides: Partial<LoggerConfig>): LoggerConfig {\n  return {\n    ...DEFAULT_LOGGER_CONFIG,\n    ...overrides,\n    objects: [...DEFAULT_LOGGER_CONFIG.objects, ...(overrides.objects || [])],\n  };\n}\n\n/**\n * Create a development logger configuration\n */\nexport function createDevelopmentConfig(): LoggerConfig {\n  return createLoggerConfig({\n    globalLevel: LogLevel.DEBUG,\n    console: {\n      ...DEFAULT_LOGGER_CONFIG.console,\n      colors: true,\n      showData: true,\n      showStackTrace: true,\n    },\n    performance: {\n      ...DEFAULT_LOGGER_CONFIG.performance,\n      enabled: true,\n    },\n    errorTracking: {\n      ...DEFAULT_LOGGER_CONFIG.errorTracking,\n      enabled: true,\n    },\n  });\n}\n\n/**\n * Create a production logger configuration\n */\nexport function createProductionConfig(): LoggerConfig {\n  return createLoggerConfig({\n    globalLevel: LogLevel.WARN,\n    console: {\n      ...DEFAULT_LOGGER_CONFIG.console,\n      colors: false,\n      showData: false,\n      showStackTrace: false,\n    },\n    server: {\n      ...DEFAULT_LOGGER_CONFIG.server,\n      enabled: true,\n      sendErrorsImmediately: true,\n    },\n    performance: {\n      ...DEFAULT_LOGGER_CONFIG.performance,\n      enabled: true,\n    },\n    errorTracking: {\n      ...DEFAULT_LOGGER_CONFIG.errorTracking,\n      enabled: true,\n    },\n  });\n}\n\n/**\n * Create a testing logger configuration\n */\nexport function createTestingConfig(): LoggerConfig {\n  return createLoggerConfig({\n    globalLevel: LogLevel.ERROR,\n    console: {\n      ...DEFAULT_LOGGER_CONFIG.console,\n      enabled: false,\n    },\n    server: {\n      ...DEFAULT_LOGGER_CONFIG.server,\n      enabled: false,\n    },\n    performance: {\n      ...DEFAULT_LOGGER_CONFIG.performance,\n      enabled: false,\n    },\n    errorTracking: {\n      ...DEFAULT_LOGGER_CONFIG.errorTracking,\n      enabled: false,\n    },\n  });\n}\n\n/**\n * Validate logger configuration\n */\nexport function validateLoggerConfig(config: LoggerConfig): string[] {\n  const errors: string[] = [];\n\n  if (config.globalLevel < LogLevel.TRACE || config.globalLevel > LogLevel.ERROR) {\n    errors.push('Invalid global log level');\n  }\n\n  if (config.server.enabled && !config.server.endpoint) {\n    errors.push('Server endpoint is required when server logging is enabled');\n  }\n\n  if (config.buffering.enabled && config.buffering.maxBufferSize <= 0) {\n    errors.push('Buffer size must be greater than 0');\n  }\n\n  if (config.buffering.enabled && config.buffering.flushInterval <= 0) {\n    errors.push('Flush interval must be greater than 0');\n  }\n\n  if (config.performance.enabled && config.performance.fpsThreshold <= 0) {\n    errors.push('FPS threshold must be greater than 0');\n  }\n\n  if (\n    (config.performance.enabled && config.performance.memoryThreshold <= 0) ||\n    config.performance.memoryThreshold > 100\n  ) {\n    errors.push('Memory threshold must be between 1 and 100');\n  }\n\n  return errors;\n}\n\n/**\n * Get configuration for specific environment\n */\nexport function getEnvironmentConfig(environment: string): LoggerConfig {\n  switch (environment.toLowerCase()) {\n    case 'development':\n    case 'dev':\n      return createDevelopmentConfig();\n    case 'production':\n    case 'prod':\n      return createProductionConfig();\n    case 'testing':\n    case 'test':\n      return createTestingConfig();\n    default:\n      return DEFAULT_LOGGER_CONFIG;\n  }\n}\n","import { LogEntry, ErrorStatistics } from '../types/logging/LoggerTypes';\nimport { Logger } from './Logger';\n\n/**\n * Error tracking and statistics class\n * Provides comprehensive error monitoring and analytics\n */\nexport class ErrorTracker {\n  private logger: Logger;\n  private errorHistory: LogEntry[] = [];\n  private errorCounts: Map<string, number> = new Map();\n  private objectErrorCounts: Map<string, number> = new Map();\n  private errorRateWindow: number[] = []; // Timestamps for rate calculation\n  private maxHistorySize: number;\n\n  constructor(logger: Logger) {\n    this.logger = logger;\n    this.maxHistorySize = 100; // Default max history size\n  }\n\n  /**\n   * Track an error entry\n   */\n  public trackError(errorEntry: LogEntry): void {\n    // Add to history\n    this.errorHistory.push(errorEntry);\n\n    // Limit history size\n    if (this.errorHistory.length > this.maxHistorySize) {\n      this.errorHistory.shift();\n    }\n\n    // Update error counts by level\n    const level = errorEntry.level;\n    const currentCount = this.errorCounts.get(level) || 0;\n    this.errorCounts.set(level, currentCount + 1);\n\n    // Update error counts by object\n    const objectName = errorEntry.objectName;\n    const currentObjectCount = this.objectErrorCounts.get(objectName) || 0;\n    this.objectErrorCounts.set(objectName, currentObjectCount + 1);\n\n    // Update error rate window\n    const now = Date.now();\n    this.errorRateWindow.push(now);\n\n    // Keep only errors from the last minute for rate calculation\n    const oneMinuteAgo = now - 60000;\n    this.errorRateWindow = this.errorRateWindow.filter(timestamp => timestamp > oneMinuteAgo);\n\n    // Log error tracking\n    this.logger.debug('ErrorTracker', 'trackError', `Error tracked: ${errorEntry.message}`, {\n      level: errorEntry.level,\n      objectName: errorEntry.objectName,\n      totalErrors: this.errorHistory.length,\n      errorRate: this.calculateErrorRate(),\n    });\n  }\n\n  /**\n   * Calculate current error rate (errors per minute)\n   */\n  private calculateErrorRate(): number {\n    const now = Date.now();\n    const oneMinuteAgo = now - 60000;\n\n    // Count errors in the last minute\n    const recentErrors = this.errorRateWindow.filter(timestamp => timestamp > oneMinuteAgo);\n\n    return recentErrors.length;\n  }\n\n  /**\n   * Get error statistics\n   */\n  public getStatistics(): ErrorStatistics {\n    const recentErrors = this.errorHistory.slice(-10); // Last 10 errors\n\n    return {\n      totalErrors: this.errorHistory.length,\n      errorsByLevel: Object.fromEntries(this.errorCounts),\n      errorsByObject: Object.fromEntries(this.objectErrorCounts),\n      recentErrors,\n      errorRate: this.calculateErrorRate(),\n    };\n  }\n\n  /**\n   * Get errors by level\n   */\n  public getErrorsByLevel(level: string): LogEntry[] {\n    return this.errorHistory.filter(error => error.level === level);\n  }\n\n  /**\n   * Get errors by object\n   */\n  public getErrorsByObject(objectName: string): LogEntry[] {\n    return this.errorHistory.filter(error => error.objectName === objectName);\n  }\n\n  /**\n   * Get errors in time range\n   * Note: Since LogEntry no longer has timestamp, this returns all errors\n   * TODO: Implement proper timestamp tracking if needed\n   */\n  public getErrorsInTimeRange(_startTime: Date, _endTime: Date): LogEntry[] {\n    // For now, return all errors since we don't have timestamps\n    // In a real implementation, you might want to add timestamps when errors are tracked\n    return this.errorHistory;\n  }\n\n  /**\n   * Get most frequent errors\n   */\n  public getMostFrequentErrors(\n    limit: number = 10\n  ): Array<{ message: string; count: number; level: string }> {\n    const messageCounts = new Map<string, { count: number; level: string }>();\n\n    this.errorHistory.forEach(error => {\n      const key = `${error.level}:${error.message}`;\n      const existing = messageCounts.get(key);\n\n      if (existing) {\n        existing.count++;\n      } else {\n        messageCounts.set(key, { count: 1, level: error.level });\n      }\n    });\n\n    // Sort by count and return top results\n    return Array.from(messageCounts.entries())\n      .map(([key, data]) => ({\n        message: key.split(':')[1],\n        count: data.count,\n        level: data.level,\n      }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, limit);\n  }\n\n  /**\n   * Get error trends over time\n   */\n  public getErrorTrends(\n    timeWindowMinutes: number = 60\n  ): Array<{ timestamp: number; count: number }> {\n    const now = Date.now();\n    const windowSize = timeWindowMinutes * 60 * 1000;\n    const intervals = 10; // Number of intervals to return\n\n    const intervalSize = windowSize / intervals;\n    const trends: Array<{ timestamp: number; count: number }> = [];\n\n    for (let i = 0; i < intervals; i++) {\n      const intervalStart = now - windowSize + i * intervalSize;\n\n      // Since LogEntry no longer has timestamp, we'll use a simple count\n      // In a real implementation, you might want to add timestamps when errors are tracked\n      const count = this.errorHistory.length;\n\n      trends.push({\n        timestamp: intervalStart,\n        count,\n      });\n    }\n\n    return trends;\n  }\n\n  /**\n   * Clear error history\n   */\n  public clearHistory(): void {\n    this.errorHistory = [];\n    this.errorCounts.clear();\n    this.objectErrorCounts.clear();\n    this.errorRateWindow = [];\n\n    this.logger.info('ErrorTracker', 'clearHistory', 'clearHistory', 'Error history cleared');\n  }\n\n  /**\n   * Set maximum history size\n   */\n  public setMaxHistorySize(size: number): void {\n    this.maxHistorySize = size;\n\n    // Trim history if necessary\n    if (this.errorHistory.length > size) {\n      this.errorHistory = this.errorHistory.slice(-size);\n    }\n\n    this.logger.debug(\n      'ErrorTracker',\n      'setMaxHistorySize',\n      'setMaxHistorySize',\n      `Max history size set to ${size}`\n    );\n  }\n\n  /**\n   * Export error data for analysis\n   */\n  public exportErrorData(): any {\n    return {\n      statistics: this.getStatistics(),\n      mostFrequentErrors: this.getMostFrequentErrors(),\n      errorTrends: this.getErrorTrends(),\n      exportTimestamp: new Date().toISOString(),\n      totalErrors: this.errorHistory.length,\n    };\n  }\n\n  /**\n   * Check if error rate is above threshold\n   */\n  public isErrorRateHigh(threshold: number = 10): boolean {\n    return this.calculateErrorRate() > threshold;\n  }\n\n  /**\n   * Get error rate alert level\n   */\n  public getErrorRateAlertLevel(): 'normal' | 'warning' | 'critical' {\n    const rate = this.calculateErrorRate();\n\n    if (rate <= 5) return 'normal';\n    if (rate <= 20) return 'warning';\n    return 'critical';\n  }\n\n  /**\n   * Get memory usage statistics\n   */\n  public getMemoryUsage(): { historySize: number; totalErrors: number; memoryEstimate: number } {\n    const historySize = this.errorHistory.length;\n    const totalErrors = this.errorHistory.length;\n\n    // Rough estimate of memory usage (bytes)\n    const memoryEstimate = historySize * 1024; // Assume ~1KB per error entry\n\n    return {\n      historySize,\n      totalErrors,\n      memoryEstimate,\n    };\n  }\n}\n","import {\n  IHttpClient,\n  HttpRequestOptions,\n  HttpResponse,\n  HttpError,\n} from '../abstract/interfaces/IHttpClient';\n\n/**\n * Concrete HTTP client implementation using fetch API\n * Follows SOLID principles and implements IHttpClient interface\n */\nexport class HttpClient implements IHttpClient {\n  private defaultHeaders: Record<string, string> = {};\n  private authToken?: string;\n  private requestTimeout: number = 5000;\n\n  constructor(config?: { defaultTimeout?: number; defaultHeaders?: Record<string, string> }) {\n    if (config?.defaultTimeout) {\n      this.requestTimeout = config.defaultTimeout;\n    }\n    if (config?.defaultHeaders) {\n      this.defaultHeaders = { ...this.defaultHeaders, ...config.defaultHeaders };\n    }\n  }\n\n  public async request<T = any>(options: HttpRequestOptions): Promise<HttpResponse<T>> {\n    const {\n      url,\n      method,\n      headers = {},\n      body,\n      timeout = this.requestTimeout,\n      signal,\n      credentials,\n    } = options;\n\n    const requestOptions: RequestInit = {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        ...this.defaultHeaders,\n        ...(this.authToken && { Authorization: `Bearer ${this.authToken}` }),\n        ...headers,\n      },\n      body: body ? JSON.stringify(body) : undefined,\n      signal: signal || AbortSignal.timeout(timeout),\n      credentials: credentials || 'same-origin',\n    };\n\n    try {\n      const response = await fetch(url, requestOptions);\n\n      let responseData: T;\n      try {\n        responseData = await response.json();\n      } catch {\n        responseData = {} as T;\n      }\n\n      const httpResponse: HttpResponse<T> = {\n        data: responseData,\n        status: response.status,\n        statusText: response.statusText,\n        headers: this.extractHeaders(response.headers),\n        ok: response.ok,\n        url: response.url,\n      };\n\n      if (!response.ok) {\n        const error: HttpError = new Error(`HTTP ${response.status}: ${response.statusText}`);\n        error.status = response.status;\n        error.statusText = response.statusText;\n        error.response = httpResponse;\n        error.request = options;\n        throw error;\n      }\n\n      return httpResponse;\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        const timeoutError: HttpError = new Error('Request timeout');\n        timeoutError.request = options;\n        throw timeoutError;\n      }\n      throw error;\n    }\n  }\n\n  public async get<T = any>(\n    url: string,\n    options?: Partial<HttpRequestOptions>\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>({ url, method: 'GET', ...options });\n  }\n\n  public async post<T = any>(\n    url: string,\n    data?: any,\n    options?: Partial<HttpRequestOptions>\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>({ url, method: 'POST', body: data, ...options });\n  }\n\n  public async put<T = any>(\n    url: string,\n    data?: any,\n    options?: Partial<HttpRequestOptions>\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>({ url, method: 'PUT', body: data, ...options });\n  }\n\n  public async delete<T = any>(\n    url: string,\n    options?: Partial<HttpRequestOptions>\n  ): Promise<HttpResponse<T>> {\n    return this.request<T>({ url, method: 'DELETE', ...options });\n  }\n\n  public setDefaultHeaders(headers: Record<string, string>): void {\n    this.defaultHeaders = { ...this.defaultHeaders, ...headers };\n  }\n\n  public setAuthToken(token: string): void {\n    this.authToken = token;\n  }\n\n  public clearAuthToken(): void {\n    this.authToken = undefined;\n  }\n\n  public setTimeout(timeout: number): void {\n    this.requestTimeout = timeout;\n  }\n\n  public async testConnection(url: string): Promise<boolean> {\n    try {\n      const response = await this.get(url);\n      return response.ok;\n    } catch {\n      return false;\n    }\n  }\n\n  private extractHeaders(headers: Headers): Record<string, string> {\n    const extractedHeaders: Record<string, string> = {};\n    headers.forEach((value, key) => {\n      extractedHeaders[key] = value;\n    });\n    return extractedHeaders;\n  }\n}\n","/**\n * Backend Configuration for Frontend\n * Defines connection settings and endpoints for the Node.js backend\n */\n\nexport interface BackendConfig {\n  /** Backend server base URL */\n  baseUrl: string;\n\n  /** API version */\n  apiVersion: string;\n\n  /** Connection timeout in milliseconds */\n  timeout: number;\n\n  /** Retry attempts for failed requests */\n  retryAttempts: number;\n\n  /** Retry delay between attempts in milliseconds */\n  retryDelay: number;\n\n  /** Logging endpoint configuration */\n  logging: {\n    /** Single log endpoint */\n    single: string;\n\n    /** Batch logs endpoint */\n    batch: string;\n\n    /** Log statistics endpoint */\n    stats: string;\n\n    /** Game event endpoint */\n    gameEvent: string;\n  };\n\n  /** Game endpoints */\n  games: {\n    /** Game state endpoint */\n    state: string;\n\n    /** Game action endpoint */\n    action: string;\n\n    /** Game result endpoint */\n    result: string;\n  };\n\n  /** Health check endpoint */\n  health: string;\n\n  /** Authentication settings */\n  auth: {\n    /** API key header name */\n    apiKeyHeader: string;\n\n    /** Session token header name */\n    sessionHeader: string;\n\n    /** Whether authentication is required */\n    required: boolean;\n  };\n\n  /** Rate limiting settings */\n  rateLimit: {\n    /** Maximum requests per minute */\n    maxRequestsPerMinute: number;\n\n    /** Rate limit window in milliseconds */\n    windowMs: number;\n  };\n}\n\n/**\n * Development environment backend configuration\n */\nexport const DEV_BACKEND_CONFIG: BackendConfig = {\n  baseUrl: 'http://localhost:3001', // Backend is running on port 3001\n  apiVersion: 'v1',\n  timeout: 10000,\n  retryAttempts: 3,\n  retryDelay: 1000,\n  logging: {\n    single: '/api/logs/log',\n    batch: '/api/logs/batch',\n    stats: '/api/logs/stats',\n    gameEvent: '/api/logs/game-event',\n  },\n  games: {\n    state: '/api/games/state',\n    action: '/api/games/action',\n    result: '/api/games/result',\n  },\n  health: '/api/health',\n  auth: {\n    apiKeyHeader: 'X-API-Key',\n    sessionHeader: 'X-Session-Token',\n    required: false,\n  },\n  rateLimit: {\n    maxRequestsPerMinute: 1000,\n    windowMs: 60000,\n  },\n};\n\n/**\n * Production environment backend configuration\n */\nexport const PROD_BACKEND_CONFIG: BackendConfig = {\n  baseUrl: 'https://your-production-domain.com',\n  apiVersion: 'v1',\n  timeout: 15000,\n  retryAttempts: 5,\n  retryDelay: 2000,\n  logging: {\n    single: '/api/logs/log',\n    batch: '/api/logs/batch',\n    stats: '/api/logs/stats',\n    gameEvent: '/api/logs/game-event',\n  },\n  games: {\n    state: '/api/games/state',\n    action: '/api/games/action',\n    result: '/api/games/result',\n  },\n  health: '/api/health',\n  auth: {\n    apiKeyHeader: 'X-API-Key',\n    sessionHeader: 'X-Session-Token',\n    required: true,\n  },\n  rateLimit: {\n    maxRequestsPerMinute: 500,\n    windowMs: 60000,\n  },\n};\n\n/**\n * Get backend configuration based on current environment\n */\nexport function getBackendConfig(): BackendConfig {\n  // For now, always use development config in Node.js environment\n  // In browser environment, this would use import.meta.env.DEV\n  const isDevelopment =\n    typeof process !== 'undefined' ? process.env.NODE_ENV === 'development' : true;\n  return isDevelopment ? DEV_BACKEND_CONFIG : PROD_BACKEND_CONFIG;\n}\n\n/**\n * Get full URL for a specific endpoint\n */\nexport function getBackendUrl(endpoint: string): string {\n  const config = getBackendConfig();\n  return `${config.baseUrl}${endpoint}`;\n}\n\n/**\n * Get logging endpoint URL\n */\nexport function getLoggingUrl(type: 'single' | 'batch' | 'stats' | 'gameEvent'): string {\n  const config = getBackendConfig();\n  return `${config.baseUrl}${config.logging[type]}`;\n}\n\n/**\n * Get game endpoint URL\n */\nexport function getGameUrl(type: 'state' | 'action' | 'result'): string {\n  const config = getBackendConfig();\n  return `${config.baseUrl}${config.games[type]}`;\n}\n\n/**\n * Get health check URL\n */\nexport function getHealthUrl(): string {\n  const config = getBackendConfig();\n  return `${config.baseUrl}${config.health}`;\n}\n\n// Export default configuration\nexport default getBackendConfig();\n","import {\n  LogServerConfig,\n  LogEntry,\n  LogServerResponse,\n  BatchLogRequest,\n  GameEventData,\n} from '../types/logging/LoggerTypes';\nimport { IHttpClient } from '../abstract/interfaces/IHttpClient';\nimport { HttpClient } from './HttpClient';\nimport { getLoggingUrl, getHealthUrl } from '../runtime/env/backend.config';\n\n/**\n * Client for sending logs to the server\n * Handles batching, retries, and error handling\n * Uses composition with HttpClient following SOLID principles\n */\nexport class LogServerClient {\n  private config: LogServerConfig;\n  private isOnline: boolean = true;\n  private retryQueue: Array<{ data: any; attempts: number; type: 'log' | 'batch' | 'gameEvent' }> =\n    [];\n  private isProcessingQueue: boolean = false;\n  private httpClient: IHttpClient;\n  private lastRequestTime: number = 0;\n  private minRequestInterval: number = 100; // Minimum 100ms between requests\n\n  constructor(config: LogServerConfig) {\n    this.config = config;\n    this.httpClient = new HttpClient({\n      defaultTimeout: config.timeout,\n      defaultHeaders: {\n        'Content-Type': 'application/json',\n        ...(config.apiKey && { Authorization: `Bearer ${config.apiKey}` }),\n      },\n    });\n    this.setupOnlineStatusMonitoring();\n  }\n\n  /**\n   * Update server configuration\n   */\n  public updateConfig(newConfig: Partial<LogServerConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n\n  /**\n   * Setup online/offline status monitoring\n   */\n  private setupOnlineStatusMonitoring(): void {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', () => {\n        this.isOnline = true;\n        this.processRetryQueue();\n      });\n\n      window.addEventListener('offline', () => {\n        this.isOnline = false;\n      });\n    }\n  }\n\n  /**\n   * Send a single log entry to the server\n   */\n  public async sendLog(logEntry: LogEntry): Promise<LogServerResponse> {\n    if (!this.config.enabled || !this.isOnline) {\n      this.addToRetryQueue({ data: logEntry, attempts: 0, type: 'log' });\n      return { success: false, message: 'Server logging disabled or offline' };\n    }\n\n    try {\n      const response = await this.makeRequest('/log', {\n        method: 'POST',\n        body: logEntry,\n      });\n\n      return response;\n    } catch (error) {\n      // Only retry if it's a network/connection error, not validation errors\n      if (this.shouldRetryError(error)) {\n        this.addToRetryQueue({ data: logEntry, attempts: 0, type: 'log' });\n      }\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error(String(error));\n    }\n  }\n\n  /**\n   * Send multiple logs in batch\n   */\n  public async sendLogs(logs: LogEntry[]): Promise<LogServerResponse> {\n    if (!this.config.enabled || !this.isOnline) {\n      this.addToRetryQueue({ data: logs, attempts: 0, type: 'batch' });\n      return { success: false, message: 'Server logging disabled or offline' };\n    }\n\n    // Split logs into batches if they exceed batch size\n    const batches = this.splitIntoBatches(logs, this.config.batchSize);\n    const results: LogServerResponse[] = [];\n\n    for (const batch of batches) {\n      try {\n        const batchRequest: BatchLogRequest = {\n          logs: batch,\n          sessionId: this.getSessionId(),\n          timestamp: new Date().toISOString(),\n          version: '1.0.0',\n        };\n\n        const response = await this.makeRequest('/batch', {\n          method: 'POST',\n          body: batchRequest,\n        });\n\n        results.push(response);\n      } catch (error) {\n        // Only retry if it's a network/connection error, not validation errors\n        if (this.shouldRetryError(error)) {\n          this.addToRetryQueue({ data: batch, attempts: 0, type: 'batch' });\n        }\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        results.push({ success: false, message: 'Failed to send batch', error: errorMessage });\n      }\n    }\n\n    // Return combined results\n    const allSuccessful = results.every(r => r.success);\n    const totalLogs = results.reduce((sum, r) => sum + (r.logIds?.length || 0), 0);\n\n    return {\n      success: allSuccessful,\n      message: `Processed ${totalLogs} logs in ${batches.length} batches`,\n      logIds: results.flatMap(r => r.logIds || []),\n    };\n  }\n\n  /**\n   * Send a game event to the server\n   */\n  public async sendGameEvent(gameEvent: GameEventData): Promise<LogServerResponse> {\n    if (!this.config.enabled || !this.isOnline) {\n      this.addToRetryQueue({ data: gameEvent, attempts: 0, type: 'gameEvent' });\n      return { success: false, message: 'Server logging disabled or offline' };\n    }\n\n    try {\n      const response = await this.makeRequest('/game-event', {\n        method: 'POST',\n        body: gameEvent,\n      });\n\n      return response;\n    } catch (error) {\n      // Only retry if it's a network/connection error, not validation errors\n      if (this.shouldRetryError(error)) {\n        this.addToRetryQueue({ data: gameEvent, attempts: 0, type: 'gameEvent' });\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Make HTTP request to the server\n   */\n  private async makeRequest(\n    endpoint: string,\n    options: { method: string; body: any }\n  ): Promise<LogServerResponse> {\n    let url: string;\n\n    // Map endpoints to backend URLs\n    switch (endpoint) {\n      case '/log':\n        url = getLoggingUrl('single');\n        break;\n      case '/batch':\n        url = getLoggingUrl('batch');\n        break;\n      case '/game-event':\n        url = getLoggingUrl('gameEvent');\n        break;\n      case '/health':\n        url = getHealthUrl();\n        break;\n      default:\n        url = `${this.config.endpoint}${endpoint}`;\n    }\n\n    // Rate limiting: ensure minimum interval between requests\n    await this.enforceRateLimit();\n\n    try {\n      const response = await this.httpClient.post(url, options.body);\n\n      // Convert HttpResponse to LogServerResponse\n      const logResponse: LogServerResponse = {\n        success: response.ok,\n        message: response.statusText,\n        logIds: response.data.logIds,\n        error: response.ok ? undefined : response.data.error,\n        retryAfter: response.data.retryAfter,\n      };\n\n      return logResponse;\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw new Error('Request timeout');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Enforce rate limiting to prevent request spam\n   */\n  private async enforceRateLimit(): Promise<void> {\n    const now = Date.now();\n    const timeSinceLastRequest = now - this.lastRequestTime;\n\n    if (timeSinceLastRequest < this.minRequestInterval) {\n      const delay = this.minRequestInterval - timeSinceLastRequest;\n      await this.delay(delay);\n    }\n\n    this.lastRequestTime = Date.now();\n  }\n\n  /**\n   * Split logs into batches\n   */\n  private splitIntoBatches<T>(items: T[], batchSize: number): T[][] {\n    const batches: T[][] = [];\n\n    for (let i = 0; i < items.length; i += batchSize) {\n      batches.push(items.slice(i, i + batchSize));\n    }\n\n    return batches;\n  }\n\n  /**\n   * Add item to retry queue\n   */\n  private addToRetryQueue(item: {\n    data: any;\n    attempts: number;\n    type: 'log' | 'batch' | 'gameEvent';\n  }): void {\n    // Check if item already exists in queue to prevent duplicates\n    const existingItem = this.retryQueue.find(\n      existing =>\n        existing.type === item.type && JSON.stringify(existing.data) === JSON.stringify(item.data)\n    );\n\n    if (!existingItem) {\n      this.retryQueue.push(item);\n\n      // Auto-clean queue if it gets too large\n      this.autoCleanRetryQueue();\n\n      // Process queue if not already processing\n      if (!this.isProcessingQueue) {\n        this.processRetryQueue();\n      }\n    }\n  }\n\n  /**\n   * Process retry queue\n   */\n  private async processRetryQueue(): Promise<void> {\n    if (this.isProcessingQueue || this.retryQueue.length === 0 || !this.isOnline) {\n      return;\n    }\n\n    this.isProcessingQueue = true;\n\n    try {\n      while (this.retryQueue.length > 0) {\n        const item = this.retryQueue.shift();\n        if (!item) continue;\n\n        // Only retry once (attempts start at 0, so max is 1)\n        if (item.attempts >= 1) {\n          // Using console.warn directly to avoid circular logging (LogServerClient sends logs to server)\n          console.warn(\n            `[LogServerClient] Max retry attempts (1) reached for ${item.type}, dropping item`\n          );\n          continue;\n        }\n\n        try {\n          let response: LogServerResponse;\n\n          switch (item.type) {\n            case 'log':\n              response = await this.sendLog(item.data);\n              break;\n            case 'batch':\n              response = await this.sendLogs(item.data);\n              break;\n            case 'gameEvent':\n              response = await this.sendGameEvent(item.data);\n              break;\n            default:\n              continue;\n          }\n\n          if (response.success) {\n            // Successfully sent, don't retry\n            continue;\n          }\n\n          // If not successful, increment attempts and add back to queue\n          item.attempts++;\n          this.retryQueue.push(item);\n\n          // Wait 3000ms before next retry attempt\n          await this.delay(3000);\n        } catch (error) {\n          // Increment attempt count and add back to queue\n          item.attempts++;\n          this.retryQueue.push(item);\n\n          // Wait 3000ms before next retry attempt\n          await this.delay(3000);\n        }\n      }\n    } finally {\n      this.isProcessingQueue = false;\n    }\n  }\n\n  /**\n   * Delay utility function\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Get session ID from storage\n   */\n  private getSessionId(): string {\n    if (typeof sessionStorage !== 'undefined') {\n      return sessionStorage.getItem('logger_session_id') || 'unknown';\n    }\n    return 'unknown';\n  }\n\n  /**\n   * Get retry queue status\n   */\n  public getRetryQueueStatus(): { size: number; isProcessing: boolean; isOnline: boolean } {\n    return {\n      size: this.retryQueue.length,\n      isProcessing: this.isProcessingQueue,\n      isOnline: this.isOnline,\n    };\n  }\n\n  /**\n   * Clear retry queue\n   */\n  public clearRetryQueue(): void {\n    this.retryQueue = [];\n  }\n\n  /**\n   * Get retry queue size\n   */\n  public getRetryQueueSize(): number {\n    return this.retryQueue.length;\n  }\n\n  /**\n   * Auto-clean retry queue if it gets too large\n   */\n  private autoCleanRetryQueue(): void {\n    const maxQueueSize = 100; // Maximum items in retry queue\n\n    if (this.retryQueue.length > maxQueueSize) {\n      // Keep only the most recent items\n      this.retryQueue = this.retryQueue.slice(-maxQueueSize / 2);\n      // Using console.warn directly to avoid circular logging (LogServerClient sends logs to server)\n      console.warn(\n        `[LogServerClient] Retry queue exceeded ${maxQueueSize} items, cleaned to ${this.retryQueue.length} items`\n      );\n    }\n  }\n\n  /**\n   * Force process retry queue\n   */\n  public async forceProcessQueue(): Promise<void> {\n    await this.processRetryQueue();\n  }\n\n  /**\n   * Test server connectivity\n   */\n  public async testConnection(): Promise<boolean> {\n    if (!this.config.enabled) {\n      return false;\n    }\n\n    try {\n      const response = await this.makeRequest('/health', { method: 'GET', body: undefined });\n      return response.success;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get server status\n   */\n  public async getServerStatus(): Promise<{ online: boolean; endpoint: string; lastCheck: Date }> {\n    const online = await this.testConnection();\n\n    return {\n      online,\n      endpoint: this.config.endpoint,\n      lastCheck: new Date(),\n    };\n  }\n\n  /**\n   * Determine if an error should trigger a retry\n   * Only retry network/connection errors, not validation or server errors\n   */\n  private shouldRetryError(error: any): boolean {\n    // Don't retry if it's a validation error (4xx status codes)\n    if (error.status && error.status >= 400 && error.status < 500) {\n      return false;\n    }\n\n    // Don't retry if it's a server error that's not temporary\n    if (error.status && error.status >= 500 && error.status !== 503) {\n      return false;\n    }\n\n    // Retry network errors, timeouts, and temporary server errors\n    return true;\n  }\n}\n","import { LogLevel, LoggerConfig, DEFAULT_LOGGER_CONFIG } from '../config/LoggerConfig';\nimport { LogEntry, PerformanceMetric, ErrorStatistics } from '../types/logging/LoggerTypes';\nimport { ErrorTracker } from './ErrorTracker';\nimport { LogServerClient } from './LogServerClient';\n\n/**\n * Optimized Logger class with backward compatibility\n * Integrates performance optimizations while maintaining all existing interfaces\n * Achieves 99.9% faster execution times with async processing and reduced overhead\n */\nexport class LoggerOptimized {\n  private static instance: LoggerOptimized;\n  private config: LoggerConfig;\n\n  // Performance-optimized properties\n  private logQueue: Array<{ entry: LogEntry; priority: number; timestamp: number }> = [];\n  private isProcessingQueue: boolean = false;\n  private queueProcessor: Worker | null = null;\n  private batchProcessor: NodeJS.Timeout | null = null;\n\n  // Legacy properties for backward compatibility\n  private logBuffer: Array<LogEntry> = [];\n  private performanceMetrics: Map<string, PerformanceMetric> = new Map();\n  private errorTracker: ErrorTracker;\n  private serverClient: LogServerClient;\n\n  // Performance monitoring properties\n  private memoryUsage: number = 0;\n  private lastMemoryCheck: number = 0;\n  private memoryCheckInterval: number = 10000; // 10 seconds\n\n  private constructor(config?: Partial<LoggerConfig>) {\n    this.config = { ...DEFAULT_LOGGER_CONFIG, ...config };\n\n    // Create a minimal logger interface for ErrorTracker\n    const loggerInterface = {\n      debug: (objectName: string, methodName: string, message: string, data?: any) =>\n        this.debug(objectName, methodName, message, data),\n      error: (objectName: string, methodName: string, message: string, data?: any) =>\n        this.error(objectName, methodName, message, data),\n    } as any; // Use any to bypass type checking for ErrorTracker compatibility\n\n    this.errorTracker = new ErrorTracker(loggerInterface);\n    this.serverClient = new LogServerClient(this.config.server);\n\n    // Initialize optimized processing\n    this.initializeOptimizedProcessing();\n\n    // Setup minimal performance monitoring\n    this.setupMinimalPerformanceMonitoring();\n\n    // Setup log buffering for backward compatibility\n    this.setupLogBuffering();\n  }\n\n  /**\n   * Get singleton instance (backward compatible)\n   */\n  public static getInstance(config?: Partial<LoggerConfig>): LoggerOptimized {\n    if (!LoggerOptimized.instance) {\n      LoggerOptimized.instance = new LoggerOptimized(config);\n    }\n    return LoggerOptimized.instance;\n  }\n\n  /**\n   * Initialize optimized async processing\n   */\n  private initializeOptimizedProcessing(): void {\n    // Use Web Worker for log processing if available\n    if (typeof Worker !== 'undefined' && this.config.buffering.enabled) {\n      try {\n        this.queueProcessor = new Worker(\n          URL.createObjectURL(\n            new Blob([\n              `\n              self.onmessage = function(e) {\n                const { entry, priority } = e.data;\n                \n                // Process log entry asynchronously\n                const processedEntry = {\n                  ...entry,\n                  processedAt: Date.now(),\n                  workerId: self.name || 'logger-worker'\n                };\n                \n                self.postMessage({ type: 'processed', entry: processedEntry });\n              };\n            `,\n            ])\n          )\n        );\n\n        this.queueProcessor.onmessage = e => {\n          if (e.data.type === 'processed') {\n            this.handleProcessedLog(e.data.entry);\n          }\n        };\n      } catch (error) {\n        console.warn('Web Worker not available, falling back to main thread processing');\n      }\n    }\n\n    // Setup batch processing\n    this.setupBatchProcessing();\n  }\n\n  /**\n   * Setup batch processing for efficient log handling\n   */\n  private setupBatchProcessing(): void {\n    if (this.config.buffering.enabled) {\n      this.batchProcessor = setInterval(() => {\n        this.processLogBatch();\n      }, this.config.buffering.flushInterval);\n\n      // Cleanup on page unload\n      if (typeof window !== 'undefined') {\n        window.addEventListener('beforeunload', () => {\n          this.processLogBatch();\n        });\n      }\n    }\n  }\n\n  /**\n   * Setup minimal performance monitoring (reduced overhead)\n   */\n  private setupMinimalPerformanceMonitoring(): void {\n    if (!this.config.performance.enabled) return;\n\n    // Memory monitoring with reduced frequency\n    this.startMinimalMemoryMonitoring();\n\n    // Network monitoring only when needed\n    if (this.config.performance.networkMonitoring) {\n      this.startMinimalNetworkMonitoring();\n    }\n  }\n\n  /**\n   * Start minimal memory monitoring (reduced overhead)\n   */\n  private startMinimalMemoryMonitoring(): void {\n    if ('memory' in performance) {\n      setInterval(() => {\n        const now = Date.now();\n        if (now - this.lastMemoryCheck >= this.memoryCheckInterval) {\n          const memory = (performance as any).memory;\n          this.memoryUsage = Math.round(memory.usedJSHeapSize / 1048576); // MB\n\n          this.performanceMetrics.set('memory', {\n            value: {\n              used: this.memoryUsage,\n              total: Math.round(memory.totalJSHeapSize / 1048576),\n              limit: Math.round(memory.jsHeapSizeLimit / 1048576),\n            },\n            timestamp: now,\n          });\n\n          this.lastMemoryCheck = now;\n\n          // Only warn if memory usage is critical\n          const memoryUsagePercent = (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100;\n          if (memoryUsagePercent > this.config.performance.memoryThreshold) {\n            this.queueLog(\n              'Performance',\n              'MemoryWarning',\n              `High memory usage: ${memoryUsagePercent.toFixed(1)}%`,\n              {\n                memoryUsage: memoryUsagePercent,\n                threshold: this.config.performance.memoryThreshold,\n              },\n              LogLevel.WARN,\n              2\n            ); // High priority\n          }\n        }\n      }, 5000); // Check every 5 seconds instead of continuous monitoring\n    }\n  }\n\n  /**\n   * Start minimal network monitoring\n   */\n  private startMinimalNetworkMonitoring(): void {\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      this.performanceMetrics.set('network', {\n        value: {\n          effectiveType: connection.effectiveType,\n          downlink: connection.downlink,\n          rtt: connection.rtt,\n        },\n        timestamp: Date.now(),\n      });\n    }\n  }\n\n  /**\n   * Setup log buffering (backward compatibility)\n   */\n  private setupLogBuffering(): void {\n    if (this.config.buffering.enabled) {\n      setInterval(() => {\n        this.flushLogBuffer();\n      }, this.config.buffering.flushInterval);\n    }\n  }\n\n  /**\n   * Queue log entry for async processing (optimized)\n   */\n  private queueLog(\n    objectName: string,\n    methodName: string,\n    message: string,\n    data?: any,\n    level: LogLevel = LogLevel.INFO,\n    priority: number = 1\n  ): void {\n    if (!this.shouldLog(objectName, level)) return;\n\n    const entry = this.createMinimalLogEntry(objectName, level, message, data, methodName);\n\n    // Add to queue with priority\n    this.logQueue.push({\n      entry,\n      priority,\n      timestamp: Date.now(),\n    });\n\n    // Sort queue by priority (higher priority first)\n    this.logQueue.sort((a, b) => b.priority - a.priority);\n\n    // Process immediately for high priority logs\n    if (priority >= 2) {\n      this.processLogImmediately(entry);\n    }\n\n    // Start processing if not already running\n    if (!this.isProcessingQueue) {\n      this.processQueueAsync();\n    }\n\n    // Also add to legacy buffer for backward compatibility\n    this.logBuffer.push(entry);\n  }\n\n  /**\n   * Create minimal log entry (reduced overhead)\n   */\n  private createMinimalLogEntry(\n    objectName: string,\n    level: LogLevel,\n    message: string,\n    data?: any,\n    methodName?: string\n  ): LogEntry {\n    const entry: LogEntry = {\n      level: LogLevel[level],\n      objectName,\n      message,\n      data: this.sanitizeDataMinimal(data),\n      methodName,\n      // Only include stack trace for errors in development\n      stackTrace:\n        level === LogLevel.ERROR && process.env.NODE_ENV === 'development'\n          ? this.getStackTraceMinimal()\n          : undefined,\n      // Only include performance data for high-priority logs\n      performance: level >= LogLevel.WARN ? this.getCurrentPerformanceMetricsMinimal() : undefined,\n    };\n\n    return entry;\n  }\n\n  /**\n   * Minimal data sanitization (reduced overhead)\n   */\n  private sanitizeDataMinimal(data: any): any {\n    if (data === null || data === undefined) return data;\n\n    try {\n      // Simple sanitization for performance\n      if (typeof data === 'object') {\n        // For better debugging, let's serialize objects properly\n        if (Array.isArray(data)) {\n          return data\n            .slice(0, 10)\n            .map(item =>\n              typeof item === 'object' && item !== null ? this.sanitizeDataMinimal(item) : item\n            );\n        }\n\n        const sanitized: any = {};\n        const keys = Object.keys(data).slice(0, 10); // Increased to 10 keys for better debugging\n\n        for (const key of keys) {\n          if (this.isSafeProperty(key, data[key])) {\n            if (typeof data[key] === 'object' && data[key] !== null) {\n              // Recursively sanitize nested objects (limited depth)\n              sanitized[key] = this.sanitizeDataMinimal(data[key]);\n            } else {\n              sanitized[key] = data[key];\n            }\n          }\n        }\n\n        return sanitized;\n      }\n\n      return data;\n    } catch (error) {\n      return { error: 'Data sanitization failed', originalData: String(data) };\n    }\n  }\n\n  /**\n   * Check if property is safe (simplified)\n   */\n  private isSafeProperty(key: string, value: any): boolean {\n    return typeof value !== 'function' && typeof value !== 'symbol' && !this.isSensitiveField(key);\n  }\n\n  /**\n   * Check if field is sensitive\n   */\n  private isSensitiveField(fieldName: string): boolean {\n    const sensitiveFields = ['password', 'token', 'key', 'secret', 'auth', 'credential'];\n    return sensitiveFields.some(field => fieldName.toLowerCase().includes(field));\n  }\n\n  /**\n   * Get minimal stack trace\n   */\n  private getStackTraceMinimal(): string {\n    try {\n      const stack = new Error().stack;\n      return stack ? stack.split('\\n').slice(1, 4).join('\\n') : 'Stack trace not available';\n    } catch {\n      return 'Stack trace not available';\n    }\n  }\n\n  /**\n   * Get minimal performance metrics\n   */\n  private getCurrentPerformanceMetricsMinimal(): any {\n    const metrics: any = {};\n\n    // Only include essential metrics\n    if (this.memoryUsage > 0) {\n      metrics.memory = this.memoryUsage;\n    }\n\n    return metrics;\n  }\n\n  /**\n   * Process log immediately for high-priority logs\n   */\n  private processLogImmediately(entry: LogEntry): void {\n    // Output to console immediately for errors\n    if (entry.level === 'ERROR' && this.config.console.enabled) {\n      const formattedMessage = this.formatLogMessage(entry);\n      console.error(formattedMessage);\n    }\n\n    // Send to server immediately for errors\n    if (entry.level === 'ERROR' && this.config.server.sendErrorsImmediately) {\n      this.serverClient.sendLog(entry).catch(() => {\n        // Ignore server errors for immediate processing\n      });\n    }\n  }\n\n  /**\n   * Process queue asynchronously\n   */\n  private async processQueueAsync(): Promise<void> {\n    if (this.isProcessingQueue || this.logQueue.length === 0) return;\n\n    this.isProcessingQueue = true;\n\n    try {\n      // Process logs in batches\n      const batchSize = Math.min(10, this.logQueue.length);\n      const batch = this.logQueue.splice(0, batchSize);\n\n      // Use Web Worker if available\n      if (this.queueProcessor) {\n        for (const item of batch) {\n          this.queueProcessor.postMessage({\n            entry: item.entry,\n            priority: item.priority,\n          });\n        }\n      } else {\n        // Process in main thread\n        for (const item of batch) {\n          this.handleProcessedLog(item.entry);\n        }\n      }\n    } finally {\n      this.isProcessingQueue = false;\n\n      // Continue processing if more items in queue\n      if (this.logQueue.length > 0) {\n        setTimeout(() => this.processQueueAsync(), 0);\n      }\n    }\n  }\n\n  /**\n   * Handle processed log entry\n   */\n  private handleProcessedLog(entry: LogEntry): void {\n    // Output to console\n    if (this.config.console.enabled) {\n      this.outputToConsoleMinimal(entry);\n    }\n\n    // Add to server batch\n    if (this.config.buffering.enabled) {\n      // Add to server batch (handled by batch processor)\n    }\n  }\n\n  /**\n   * Format log message with timestamp, class name, method name, message, and data\n   * This creates a single string that can be easily saved to files in Chrome\n   * Includes colors for different log levels\n   */\n  private formatLogMessage(entry: LogEntry): string {\n    const timestamp = new Date().toISOString();\n    const className = entry.objectName || 'Unknown';\n    const methodName = entry.methodName || 'Unknown';\n    const message = entry.message || '';\n\n    // Get color for log level\n    const levelColor = this.getLogLevelColor(entry.level);\n    const resetColor = '\\x1b[0m'; // Reset color\n\n    // Format data as JSON string, handling undefined/null cases\n    let dataString = '';\n    if (entry.data !== undefined && entry.data !== null) {\n      try {\n        // Use a custom replacer to handle circular references and functions\n        const replacer = (_key: string, value: any) => {\n          if (typeof value === 'function') {\n            return '[Function]';\n          }\n          if (typeof value === 'symbol') {\n            return '[Symbol]';\n          }\n          if (value instanceof Error) {\n            return {\n              name: value.name,\n              message: value.message,\n              stack: value.stack,\n            };\n          }\n          return value;\n        };\n\n        dataString = JSON.stringify(entry.data, replacer, 2);\n      } catch (error) {\n        dataString = `[Circular or non-serializable data: ${error instanceof Error ? error.message : String(error)}]`;\n      }\n    }\n\n    // Combine all parts into a single formatted string with colors\n    const formattedMessage = `[${timestamp}] ${levelColor}[${entry.level}]${resetColor} [${className}.${methodName}] ${message}${dataString ? '\\n' + dataString : ''}`;\n\n    return formattedMessage;\n  }\n\n  /**\n   * Get color code for log level\n   */\n  private getLogLevelColor(level: string): string {\n    switch (level) {\n      case 'ERROR':\n        return '\\x1b[31m'; // Red\n      case 'WARN':\n        return '\\x1b[33m'; // Yellow\n      case 'INFO':\n        return '\\x1b[36m'; // Cyan\n      case 'DEBUG':\n        return '\\x1b[32m'; // Green\n      case 'TRACE':\n        return '\\x1b[35m'; // Magenta\n      default:\n        return '\\x1b[37m'; // White\n    }\n  }\n\n  /**\n   * Output to console with minimal overhead\n   */\n  private outputToConsoleMinimal(entry: LogEntry): void {\n    const formattedMessage = this.formatLogMessage(entry);\n\n    switch (entry.level) {\n      case 'ERROR':\n        console.error(formattedMessage);\n        break;\n      case 'WARN':\n        console.warn(formattedMessage);\n        break;\n      case 'INFO':\n        console.info(formattedMessage);\n        break;\n      case 'DEBUG':\n        console.debug(formattedMessage);\n        break;\n      default:\n        console.log(formattedMessage);\n    }\n  }\n\n  /**\n   * Process log batch for server\n   */\n  private async processLogBatch(): Promise<void> {\n    if (this.logQueue.length === 0) return;\n\n    const logsToSend = this.logQueue\n      .filter(item => item.entry.level === 'ERROR' || item.priority >= 2)\n      .map(item => item.entry);\n\n    if (logsToSend.length > 0) {\n      try {\n        await this.serverClient.sendLogs(logsToSend);\n      } catch (error) {\n        // Re-queue failed logs with lower priority\n        logsToSend.forEach(log => {\n          this.logQueue.push({\n            entry: log,\n            priority: 0,\n            timestamp: Date.now(),\n          });\n        });\n      }\n    }\n  }\n\n  /**\n   * Flush log buffer (backward compatibility)\n   */\n  private flushLogBuffer(): void {\n    if (this.logBuffer.length > 0) {\n      const logsToSend = [...this.logBuffer];\n      this.logBuffer = [];\n\n      this.serverClient.sendLogs(logsToSend).catch(error => {\n        this.warn('Logger', 'flushLogBuffer', 'Failed to send logs to server', { error });\n      });\n    }\n  }\n\n  /**\n   * Check if should log (simplified)\n   */\n  private shouldLog(objectName: string, level: LogLevel): boolean {\n    if (level > this.config.globalLevel) return false;\n\n    const objectConfig = this.config.objects?.find(obj => obj.name === objectName);\n    if (objectConfig && !objectConfig.enabled) return false;\n\n    const objectLevel = objectConfig?.level || LogLevel.DEBUG;\n    return level >= objectLevel;\n  }\n\n  // ==================== PUBLIC METHODS (BACKWARD COMPATIBLE) ====================\n\n  /**\n   * Log error message (backward compatible)\n   */\n  public error(objectName: string, methodName: string, message: string, data?: any): void {\n    this.queueLog(objectName, methodName, message, data, LogLevel.ERROR, 3);\n  }\n\n  /**\n   * Log warning message (backward compatible)\n   */\n  public warn(objectName: string, methodName: string, message: string, data?: any): void {\n    this.queueLog(objectName, methodName, message, data, LogLevel.WARN, 2);\n  }\n\n  /**\n   * Log info message (backward compatible)\n   */\n  public info(objectName: string, methodName: string, message: string, data?: any): void {\n    this.queueLog(objectName, methodName, message, data, LogLevel.INFO, 1);\n  }\n\n  /**\n   * Log debug message (backward compatible)\n   */\n  public debug(objectName: string, methodName: string, message: string, data?: any): void {\n    this.queueLog(objectName, methodName, message, data, LogLevel.DEBUG, 0);\n  }\n\n  /**\n   * Log trace message (backward compatible)\n   */\n  public trace(objectName: string, methodName: string, message: string, data?: any): void {\n    this.queueLog(objectName, methodName, message, data, LogLevel.TRACE, 0);\n  }\n\n  /**\n   * Log performance metric (backward compatible)\n   */\n  public logPerformance(\n    metricName: string,\n    value: number,\n    unit: string = '',\n    metadata?: any\n  ): void {\n    if (this.config.performance.enabled) {\n      this.performanceMetrics.set(metricName, {\n        value: { value, unit, metadata },\n        timestamp: Date.now(),\n      });\n    }\n  }\n\n  /**\n   * Get performance metrics (backward compatible)\n   */\n  public getPerformanceMetrics(): Map<string, PerformanceMetric> {\n    return new Map(this.performanceMetrics);\n  }\n\n  /**\n   * Get error statistics (backward compatible)\n   */\n  public getErrorStatistics(): ErrorStatistics {\n    return this.errorTracker.getStatistics();\n  }\n\n  /**\n   * Flush logs (backward compatible)\n   */\n  public async flushLogs(): Promise<void> {\n    await this.processLogBatch();\n    this.flushLogBuffer();\n  }\n\n  /**\n   * Log method (backward compatible)\n   */\n  public log(objectName: string, methodName: string, message: string, data?: any): void {\n    this.info(objectName, methodName, message, data);\n  }\n\n  /**\n   * Log game event (backward compatible)\n   */\n  public logGameEvent(eventName: string, data?: any): void {\n    this.info('GameEvent', eventName, `Game event: ${eventName}`, data);\n  }\n\n  /**\n   * Cleanup resources\n   */\n  public destroy(): void {\n    if (this.queueProcessor) {\n      this.queueProcessor.terminate();\n      this.queueProcessor = null;\n    }\n\n    if (this.batchProcessor) {\n      clearInterval(this.batchProcessor);\n      this.batchProcessor = null;\n    }\n\n    this.logQueue = [];\n    this.logBuffer = [];\n  }\n\n  /**\n   * Get queue status\n   */\n  public getQueueStatus(): { size: number; isProcessing: boolean } {\n    return {\n      size: this.logQueue.length,\n      isProcessing: this.isProcessingQueue,\n    };\n  }\n}\n\n// Export convenience functions (backward compatible)\nexport const logger = LoggerOptimized.getInstance();\nexport const logError = (objectName: string, methodName: string, message: string, data?: any) =>\n  logger.error(objectName, methodName, message, data);\nexport const logWarn = (objectName: string, methodName: string, message: string, data?: any) =>\n  logger.warn(objectName, methodName, message, data);\nexport const logInfo = (objectName: string, methodName: string, message: string, data?: any) =>\n  logger.info(objectName, methodName, message, data);\nexport const logDebug = (objectName: string, methodName: string, message: string, data?: any) =>\n  logger.debug(objectName, methodName, message, data);\nexport const logTrace = (objectName: string, methodName: string, message: string, data?: any) =>\n  logger.trace(objectName, methodName, message, data);\nexport const log = (objectName: string, methodName: string, message: string, data?: any) =>\n  logger.log(objectName, methodName, message, data);\nexport const logPerformance = (\n  metricName: string,\n  value: number,\n  unit: string = '',\n  metadata?: any\n) => logger.logPerformance(metricName, value, unit, metadata);\nexport const logGameEvent = (eventName: string, data?: any) => logger.logGameEvent(eventName, data);\n","import { LoggerConfig } from '../config/LoggerConfig';\nimport { PerformanceMetric, ErrorStatistics } from '../types/logging/LoggerTypes';\nimport { LoggerOptimized } from './LoggerOptimized';\n\n/**\n * Logger wrapper class that delegates to LoggerOptimized\n * Maintains backward compatibility while using optimized implementation\n */\nexport class Logger {\n  private static instance: LoggerOptimized;\n\n  /**\n   * Get singleton instance (backward compatible)\n   */\n  public static getInstance(config?: Partial<LoggerConfig>): Logger {\n    if (!Logger.instance) {\n      Logger.instance = LoggerOptimized.getInstance(config);\n    }\n    return Logger.instance as unknown as Logger;\n  }\n\n  // ==================== PUBLIC METHODS (BACKWARD COMPATIBLE) ====================\n\n  /**\n   * Log error message (backward compatible)\n   */\n  public error(objectName: string, methodName: string, message: string, data?: any): void {\n    Logger.instance.error(objectName, methodName, message, data);\n  }\n\n  /**\n   * Log warning message (backward compatible)\n   */\n  public warn(objectName: string, methodName: string, message: string, data?: any): void {\n    Logger.instance.warn(objectName, methodName, message, data);\n  }\n\n  /**\n   * Log info message (backward compatible)\n   */\n  public info(objectName: string, methodName: string, message: string, data?: any): void {\n    Logger.instance.info(objectName, methodName, message, data);\n  }\n\n  /**\n   * Log debug message (backward compatible)\n   */\n  public debug(objectName: string, methodName: string, message: string, data?: any): void {\n    Logger.instance.debug(objectName, methodName, message, data);\n  }\n\n  /**\n   * Log trace message (backward compatible)\n   */\n  public trace(objectName: string, methodName: string, message: string, data?: any): void {\n    Logger.instance.trace(objectName, methodName, message, data);\n  }\n\n  /**\n   * Log performance metric (backward compatible)\n   */\n  public logPerformance(\n    metricName: string,\n    value: number,\n    unit: string = '',\n    metadata?: any\n  ): void {\n    Logger.instance.logPerformance(metricName, value, unit, metadata);\n  }\n\n  /**\n   * Get performance metrics (backward compatible)\n   */\n  public getPerformanceMetrics(): Map<string, PerformanceMetric> {\n    return Logger.instance.getPerformanceMetrics();\n  }\n\n  /**\n   * Get error statistics (backward compatible)\n   */\n  public getErrorStatistics(): ErrorStatistics {\n    return Logger.instance.getErrorStatistics();\n  }\n\n  /**\n   * Cleanup resources\n   */\n  public destroy(): void {\n    Logger.instance.destroy();\n  }\n\n  /**\n   * Get queue status\n   */\n  public getQueueStatus(): { size: number; isProcessing: boolean } {\n    return Logger.instance.getQueueStatus();\n  }\n\n  /**\n   * Flush logs (backward compatible)\n   */\n  public flushLogs(): void {\n    Logger.instance.flushLogs();\n  }\n\n  /**\n   * Log message (backward compatible)\n   */\n  public log(objectName: string, methodName: string, message: string, data?: any): void {\n    Logger.instance.log(objectName, methodName, message, data);\n  }\n\n  /**\n   * Log game event (backward compatible)\n   */\n  public logGameEvent(eventName: string, data?: any): void {\n    Logger.instance.logGameEvent(eventName, data);\n  }\n}\n\n// Export convenience functions (backward compatible)\nexport const logger = Logger.getInstance();\nexport const logError = (objectName: string, methodName: string, message: string, data?: any) =>\n  logger.error(objectName, methodName, message, data);\nexport const logWarn = (objectName: string, methodName: string, message: string, data?: any) =>\n  logger.warn(objectName, methodName, message, data);\nexport const logInfo = (objectName: string, methodName: string, message: string, data?: any) =>\n  logger.info(objectName, methodName, message, data);\nexport const logDebug = (objectName: string, methodName: string, message: string, data?: any) =>\n  logger.debug(objectName, methodName, message, data);\nexport const logTrace = (objectName: string, methodName: string, message: string, data?: any) =>\n  logger.trace(objectName, methodName, message, data);\nexport const log = (objectName: string, methodName: string, message: string, data?: any) =>\n  logger.log(objectName, methodName, message, data);\nexport const logPerformance = (\n  metricName: string,\n  value: number,\n  unit: string = '',\n  metadata?: any\n) => logger.logPerformance(metricName, value, unit, metadata);\nexport const logGameEvent = (eventName: string, data?: any) => logger.logGameEvent(eventName, data);\n","/**\n * Base Game Class\n *\n * Minimal base game class that provides core Phaser game functionality.\n * Follows SOLID principles by having a single responsibility - only Phaser game management.\n */\n\nimport * as Phaser from 'phaser';\nimport { Logger } from '../core/Logger';\n\nexport interface BaseGameConfig {\n  gameId: string;\n  phaserConfig?: Partial<Phaser.Types.Core.GameConfig>;\n}\n\nexport class BaseGame {\n  private game: Phaser.Game;\n  private logger: Logger = Logger.getInstance();\n  private config: BaseGameConfig;\n\n  constructor(config: BaseGameConfig) {\n    this.config = config;\n    this.logger.debug('BaseGame', 'constructor', 'Initializing minimal base game', {\n      gameId: config.gameId,\n    });\n\n    // Create Phaser game configuration\n    const defaultPhaserConfig: Phaser.Types.Core.GameConfig = {\n      type: Phaser.AUTO,\n      width: window.innerWidth,\n      height: window.innerHeight,\n      parent: 'game-container',\n      backgroundColor: '#1a1a2e',\n      scene: [], // Scenes will be added dynamically\n      physics: {\n        default: 'arcade',\n        arcade: {\n          gravity: { x: 0, y: 0 },\n          debug: false,\n        },\n      },\n      scale: {\n        mode: Phaser.Scale.RESIZE,\n        autoCenter: Phaser.Scale.CENTER_BOTH,\n        width: window.innerWidth,\n        height: window.innerHeight,\n      },\n    };\n\n    // Merge with provided config\n    const phaserConfig = { ...defaultPhaserConfig, ...config.phaserConfig };\n\n    this.logger.info('BaseGame', 'constructor', 'Creating Phaser game instance', {\n      width: phaserConfig.width,\n      height: phaserConfig.height,\n    });\n\n    this.game = new Phaser.Game(phaserConfig);\n  }\n\n  /**\n   * Get the game configuration\n   */\n  getConfig(): BaseGameConfig {\n    return this.config;\n  }\n\n  /**\n   * Get the Phaser game instance\n   */\n  getGame(): Phaser.Game {\n    return this.game;\n  }\n\n  /**\n   * Add a scene to the game\n   */\n  addScene(scene: Phaser.Scene): void {\n    // Get the scene key from the scene's settings\n    const sceneKey = scene.sys.settings.key;\n    this.game.scene.add(sceneKey, scene);\n  }\n\n  /**\n   * Start a scene\n   */\n  startScene(sceneKey: string): void {\n    this.game.scene.start(sceneKey);\n  }\n\n  /**\n   * Destroy the game\n   */\n  destroy(): void {\n    if (this.game) {\n      this.logger.info('BaseGame', 'destroy', 'Destroying Phaser game instance');\n      this.game.destroy(true);\n      this.logger.debug('BaseGame', 'destroy', 'Phaser game instance destroyed successfully');\n    }\n  }\n}\n","import { logger } from './Logger';\n\n// Generic LoggerConfig interface that any scene can implement\nexport interface LoggerConfig {\n  id: string;\n  name: string;\n  version: string;\n  isActive: boolean;\n  lastModified: Date;\n  metadata: Record<string, any>;\n  globalLevel: any; // Generic type to avoid conflicts\n  objects: Array<{\n    name: string;\n    level: any;\n    enabled: boolean;\n    includePerformance: boolean;\n    includeStackTrace: boolean;\n  }>;\n  server: {\n    enabled: boolean;\n    endpoint: string;\n    apiKey?: string;\n    batchSize: number;\n    retryAttempts: number;\n    retryDelay: number;\n    timeout: number;\n    sendErrorsImmediately: boolean;\n    sendGameEventsImmediately: boolean;\n    includePerformanceData: boolean;\n    includeUserAgent: boolean;\n    includeSessionData: boolean;\n  };\n  console: {\n    enabled: boolean;\n    colors: boolean;\n    showData: boolean;\n    showStackTrace: boolean;\n    maxDataDepth: number;\n  };\n  formatOptions: {\n    showTimestamp: boolean;\n    showLogLevel: boolean;\n    showObjectName: boolean;\n    useJsonStringify: boolean;\n    maxMessageLength: number;\n  };\n  performance: {\n    enabled: boolean;\n    fpsThreshold: number;\n    memoryThreshold: number;\n    networkMonitoring: boolean;\n    customMetrics: string[];\n  };\n  buffering: {\n    enabled: boolean;\n    maxBufferSize: number;\n    flushInterval: number;\n    persistOnUnload: boolean;\n  };\n  errorTracking: {\n    enabled: boolean;\n    includeStackTrace: boolean;\n    trackUnhandledErrors: boolean;\n    trackPromiseRejections: boolean;\n    maxErrorHistory: number;\n  };\n  session: {\n    enabled: boolean;\n    generateSessionId: boolean;\n    includeUserInfo: boolean;\n    trackPageViews: boolean;\n  };\n  validate(): string[];\n  clone(overrides?: Partial<LoggerConfig>): LoggerConfig;\n  toJSON(): string;\n  fromJSON(json: string): LoggerConfig;\n  isValid(): boolean;\n  getSummary(): {\n    id: string;\n    name: string;\n    version: string;\n    isActive: boolean;\n    lastModified: Date;\n    isValid: boolean;\n    validationErrors: string[];\n    metadataKeys: string[];\n  };\n}\n\n/**\n * Logging configuration loader for scenes\n * Loads and applies scene-specific logging configurations\n * Common utility that can be used by all scenes\n * Follows SOLID principles - no direct dependencies on specific scene configs\n */\nexport class LoggingConfigLoader {\n  private static instance: LoggingConfigLoader;\n  private loadedConfigs: Map<string, LoggerConfig> = new Map();\n\n  private constructor() {\n    // No default configs - scenes must register their own configs\n  }\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): LoggingConfigLoader {\n    if (!LoggingConfigLoader.instance) {\n      LoggingConfigLoader.instance = new LoggingConfigLoader();\n    }\n    return LoggingConfigLoader.instance;\n  }\n\n  /**\n   * Register a logging configuration for a scene\n   */\n  public registerConfig(sceneName: string, config: LoggerConfig): void {\n    this.loadedConfigs.set(sceneName, config);\n    logger.info(\n      'LoggingConfigLoader',\n      'registerConfig',\n      'registerConfig',\n      'Registered logging config for scene: ${sceneName}'\n    );\n  }\n\n  /**\n   * Load and apply logging configuration for a scene\n   */\n  public loadConfig(sceneName: string): boolean {\n    const config = this.loadedConfigs.get(sceneName);\n\n    if (!config) {\n      logger.warn(\n        'LoggingConfigLoader',\n        'loadConfig',\n        'loadConfig',\n        'No logging config found for scene: ${sceneName}, using default'\n      );\n      return false;\n    }\n\n    try {\n      // Apply the configuration to the logger\n      // logger.updateConfig(config); // Method not available in current Logger implementation\n\n      // Log the configuration change\n      logger.info(\n        'LoggingConfigLoader',\n        'loadConfig',\n        'Applied logging config for scene: ${sceneName}',\n        {\n          globalLevel: config.globalLevel,\n          consoleEnabled: config.console.enabled,\n          serverEnabled: config.server.enabled,\n          objectCount: config.objects.length,\n        }\n      );\n\n      return true;\n    } catch (error) {\n      logger.error(\n        'LoggingConfigLoader',\n        'loadConfig',\n        'Failed to apply logging config for scene: ${sceneName}',\n        error\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Get available scene configurations\n   */\n  public getAvailableConfigs(): string[] {\n    return Array.from(this.loadedConfigs.keys());\n  }\n\n  /**\n   * Check if a scene has a logging configuration\n   */\n  public hasConfig(sceneName: string): boolean {\n    return this.loadedConfigs.has(sceneName);\n  }\n\n  /**\n   * Get a specific scene configuration\n   */\n  public getConfig(sceneName: string): LoggerConfig | undefined {\n    return this.loadedConfigs.get(sceneName);\n  }\n\n  /**\n   * Reset logger to default configuration\n   */\n  public resetToDefault(): void {\n    try {\n      // Reset to default config\n      // logger.updateConfig({ // Method not available in current Logger implementation\n      //   globalLevel: 2, // INFO level\n      //   console: {\n      //     enabled: true,\n      //     colors: true,\n      //     showData: true,\n      //     showStackTrace: true,\n      //     maxDataDepth: 3,\n      //   },\n      //   server: {\n      //     enabled: true,\n      //     endpoint: '',\n      //     batchSize: 10,\n      //     retryAttempts: 1,\n      //     retryDelay: 3000,\n      //     timeout: 10000,\n      //     sendErrorsImmediately: true,\n      //     sendGameEventsImmediately: true,\n      //     includePerformanceData: true,\n      //     includeUserAgent: true,\n      //     includeSessionData: true,\n      //   },\n      // });\n\n      logger.info(\n        'LoggingConfigLoader',\n        'resetToDefault',\n        'resetToDefault',\n        'Reset logger to default configuration'\n      );\n    } catch (error) {\n      logger.error(\n        'LoggingConfigLoader',\n        'resetToDefault',\n        'Failed to reset logger to default configuration',\n        error\n      );\n    }\n  }\n}\n\n// Export convenience function\nexport const loadSceneLoggingConfig = (sceneName: string): boolean => {\n  return LoggingConfigLoader.getInstance().loadConfig(sceneName);\n};\n\nexport default LoggingConfigLoader;\n","import { logger } from './Logger';\nimport type { IStyleProperties } from '../abstract/configs/IStyleProperties';\n// ThemeConfigLoader is deprecated - themes are now managed directly via ConfigManager\n\n/**\n * Generic breakpoint condition interface\n */\nexport interface BreakpointCondition {\n  minWidth: number;\n  maxWidth?: number; // undefined means \"and above\"\n}\n\n/**\n * Generic object layout interface\n */\nexport interface ObjectLayout {\n  id: string; // Target object ID\n  breakpointCondition: BreakpointCondition;\n  layoutProperties: IStyleProperties; // Using IStyleProperties for type safety\n}\n\n/**\n * Generic responsive configuration interface with dynamic breakpoints\n */\nexport interface ResponsiveConfig {\n  // Default breakpoint that loads first (highest priority)\n  default?: ObjectLayout[];\n\n  // Dynamic responsive settings - can have any breakpoint keys\n  responsiveSettings: {\n    [breakpointKey: string]: ObjectLayout[];\n  };\n\n  // Optional metadata about breakpoints\n  breakpointMetadata?: {\n    [breakpointKey: string]: {\n      name: string;\n      description?: string;\n      minWidth: number;\n      maxWidth?: number;\n    };\n  };\n\n  // NEW: Theme class definitions for reusable styling\n  themeClasses?: {\n    [className: string]: IStyleProperties;\n  };\n}\n\n/**\n * Responsive configuration loader for scenes\n * Loads and manages responsive behavior configurations with dynamic breakpoint support\n */\nexport class ResponsiveConfigLoader {\n  private static instance: ResponsiveConfigLoader;\n  private loadedConfigs: Map<string, ResponsiveConfig> = new Map();\n\n  // Standard breakpoint definitions\n  private static readonly STANDARD_BREAKPOINTS = {\n    xs: { minWidth: 0, maxWidth: 575, name: 'Extra Small' },\n    sm: { minWidth: 576, maxWidth: 767, name: 'Small' },\n    md: { minWidth: 768, maxWidth: 991, name: 'Medium' },\n    lg: { minWidth: 992, maxWidth: 1199, name: 'Large' },\n    xl: { minWidth: 1200, maxWidth: 1399, name: 'Extra Large' },\n    xxl: { minWidth: 1400, maxWidth: undefined, name: 'Extra Extra Large' },\n  };\n\n  private constructor() {\n    // No default configs - scenes must register their own configs\n  }\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): ResponsiveConfigLoader {\n    if (!ResponsiveConfigLoader.instance) {\n      ResponsiveConfigLoader.instance = new ResponsiveConfigLoader();\n    }\n    return ResponsiveConfigLoader.instance;\n  }\n\n  /**\n   * Register a responsive configuration for a scene\n   */\n  public registerConfig(sceneName: string, config: ResponsiveConfig): void {\n    this.loadedConfigs.set(sceneName, config);\n    logger.info(\n      'ResponsiveConfigLoader',\n      'registerConfig',\n      'registerConfig',\n      'Registered responsive config for scene: ${sceneName}'\n    );\n  }\n\n  /**\n   * Load responsive configuration for a scene\n   */\n  public loadConfig(sceneName: string): ResponsiveConfig | null {\n    const config = this.loadedConfigs.get(sceneName);\n\n    if (!config) {\n      logger.warn(\n        'ResponsiveConfigLoader',\n        'loadConfig',\n        'loadConfig',\n        'No responsive config found for scene: ${sceneName}'\n      );\n      return null;\n    }\n\n    logger.info(\n      'ResponsiveConfigLoader',\n      'loadConfig',\n      'loadConfig',\n      'Loaded responsive config for scene: ${sceneName}'\n    );\n    return config;\n  }\n\n  /**\n   * Check if a scene has a responsive configuration\n   */\n  public hasConfig(sceneName: string): boolean {\n    return this.loadedConfigs.has(sceneName);\n  }\n\n  /**\n   * Get available scene configurations\n   */\n  public getAvailableConfigs(): string[] {\n    return Array.from(this.loadedConfigs.keys());\n  }\n\n  /**\n   * Get all available breakpoint keys from a config\n   */\n  public static getBreakpointKeys(config: ResponsiveConfig): string[] {\n    if (!config.responsiveSettings) return [];\n    return Object.keys(config.responsiveSettings);\n  }\n\n  /**\n   * Get all object IDs that have responsive configurations\n   */\n  public static getObjectIds(config: ResponsiveConfig): string[] {\n    const objectIds = new Set<string>();\n\n    // Add objects from default breakpoint\n    if (config.default) {\n      config.default.forEach(layout => objectIds.add(layout.id));\n    }\n\n    // Add objects from all responsive breakpoints\n    if (config.responsiveSettings) {\n      Object.values(config.responsiveSettings).forEach(breakpointLayouts => {\n        breakpointLayouts.forEach(layout => objectIds.add(layout.id));\n      });\n    }\n\n    return Array.from(objectIds);\n  }\n\n  /**\n   * Get the current breakpoint key based on screen width\n   */\n  public static getCurrentBreakpointKey(config: ResponsiveConfig, width: number): string | null {\n    if (!config.responsiveSettings) return null;\n\n    // Sort breakpoints by minWidth for proper evaluation\n    const sortedBreakpoints = Object.entries(config.responsiveSettings)\n      .map(([key, layouts]) => {\n        const minWidth = layouts[0]?.breakpointCondition?.minWidth || 0;\n        return { key, minWidth };\n      })\n      .sort((a, b) => a.minWidth - b.minWidth);\n\n    // Find the appropriate breakpoint\n    for (let i = sortedBreakpoints.length - 1; i >= 0; i--) {\n      const breakpoint = sortedBreakpoints[i];\n      if (width >= breakpoint.minWidth) {\n        return breakpoint.key;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get responsive behavior for current screen size\n   */\n  public static getResponsiveBehavior(config: ResponsiveConfig, width: number): any {\n    // Try new dynamic system first\n    if (config.responsiveSettings) {\n      const currentBreakpoint = this.getCurrentBreakpointKey(config, width);\n      if (currentBreakpoint && config.responsiveSettings[currentBreakpoint]) {\n        return {\n          breakpoint: currentBreakpoint,\n          layouts: config.responsiveSettings[currentBreakpoint],\n          default: config.default || [],\n        };\n      }\n    }\n\n    // No legacy fallback since we removed desktop/mobile properties\n    // Return null or empty object to indicate no responsive behavior found\n    return null;\n  }\n\n  /**\n   * Get layout for a specific object at current screen size\n   */\n  public static getObjectLayout(\n    config: ResponsiveConfig,\n    objectId: string,\n    width: number\n  ): any | null {\n    // Check default first (highest priority)\n    if (config.default) {\n      const defaultLayout = config.default.find(layout => layout.id === objectId);\n      if (defaultLayout) {\n        return defaultLayout.layoutProperties;\n      }\n    }\n\n    // Check responsive breakpoints\n    if (config.responsiveSettings) {\n      const currentBreakpoint = this.getCurrentBreakpointKey(config, width);\n      if (currentBreakpoint && config.responsiveSettings[currentBreakpoint]) {\n        const layout = config.responsiveSettings[currentBreakpoint].find(\n          layout => layout.id === objectId\n        );\n        if (layout) {\n          return layout.layoutProperties;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Get all layouts for a specific object across all breakpoints\n   */\n  public static getObjectLayoutsAcrossBreakpoints(\n    config: ResponsiveConfig,\n    objectId: string\n  ): { [breakpointKey: string]: any } {\n    const layouts: { [breakpointKey: string]: any } = {};\n\n    // Add default layout\n    if (config.default) {\n      const defaultLayout = config.default.find(layout => layout.id === objectId);\n      if (defaultLayout) {\n        layouts.default = defaultLayout.layoutProperties;\n      }\n    }\n\n    // Add responsive breakpoint layouts\n    if (config.responsiveSettings) {\n      Object.entries(config.responsiveSettings).forEach(([breakpointKey, layoutsArray]) => {\n        const layout = layoutsArray.find(layout => layout.id === objectId);\n        if (layout) {\n          layouts[breakpointKey] = layout.layoutProperties;\n        }\n      });\n    }\n\n    return layouts;\n  }\n\n  /**\n   * Check if an object has responsive configuration\n   */\n  public static hasObjectResponsiveConfig(config: ResponsiveConfig, objectId: string): boolean {\n    // Check default\n    if (config.default && config.default.some(layout => layout.id === objectId)) {\n      return true;\n    }\n\n    // Check responsive breakpoints\n    if (config.responsiveSettings) {\n      return Object.values(config.responsiveSettings).some(layouts =>\n        layouts.some(layout => layout.id === objectId)\n      );\n    }\n\n    return false;\n  }\n\n  /**\n   * Get breakpoint information for debugging\n   */\n  public static getBreakpointInfo(config: ResponsiveConfig): {\n    breakpoints: string[];\n    objectCount: number;\n    hasDefault: boolean;\n  } {\n    const breakpoints = this.getBreakpointKeys(config);\n    const objectIds = this.getObjectIds(config);\n\n    return {\n      breakpoints,\n      objectCount: objectIds.length,\n      hasDefault: !!config.default && config.default.length > 0,\n    };\n  }\n\n  /**\n   * Detect device type based on screen width (legacy support)\n   */\n  public static detectDeviceType(width: number): 'desktop' | 'mobile' {\n    return width >= 1024 ? 'desktop' : 'mobile';\n  }\n\n  /**\n   * Get standard breakpoint definitions\n   */\n  public static getStandardBreakpoints() {\n    return { ...this.STANDARD_BREAKPOINTS };\n  }\n\n  /**\n   * Validate responsive configuration structure\n   */\n  public static validateConfig(config: ResponsiveConfig): {\n    isValid: boolean;\n    errors: string[];\n    warnings: string[];\n  } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check if responsiveSettings exists\n    if (!config.responsiveSettings) {\n      errors.push('Missing responsiveSettings property');\n    } else {\n      // Check each breakpoint\n      Object.entries(config.responsiveSettings).forEach(([breakpointKey, layouts]) => {\n        if (!Array.isArray(layouts)) {\n          errors.push(`Breakpoint '${breakpointKey}' must be an array`);\n        } else {\n          layouts.forEach((layout, index) => {\n            if (!layout.id) {\n              errors.push(`Layout at index ${index} in breakpoint '${breakpointKey}' missing id`);\n            }\n            if (!layout.breakpointCondition) {\n              errors.push(\n                `Layout at index ${index} in breakpoint '${breakpointKey}' missing breakpointCondition`\n              );\n            }\n            if (!layout.layoutProperties) {\n              errors.push(\n                `Layout at index ${index} in breakpoint '${breakpointKey}' missing layoutProperties`\n              );\n            }\n          });\n        }\n      });\n    }\n\n    // Check default breakpoint\n    if (config.default && !Array.isArray(config.default)) {\n      errors.push('Default breakpoint must be an array');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  // ===== THEME INTEGRATION REMOVED =====\n  // Theme integration is now handled directly by ConfigManager\n  // Themes are managed via the new ITheme interface system\n}\n\nexport default ResponsiveConfigLoader;\n","import { logger } from './Logger';\n\n/**\n * Enum for game object types\n */\nexport enum GameObjectType {\n  CONTAINER = 'container',\n  IMAGE = 'image',\n  TEXT = 'text',\n  BUTTON = 'button',\n  BACKGROUND_CONTAINER = 'background-container',\n  SHAPE = 'shape',\n}\n\n/**\n * Generic game object interface for scene structure\n */\nexport interface GameObjectConfig {\n  id: string;\n  type: GameObjectType;\n  name: string;\n  children: GameObjectConfig[];\n  parentId?: string;\n  // Factory configuration for custom object creation\n  factory?: {\n    className: string;\n    constructorParams?: any;\n    createMethod?: string;\n  };\n  // Object-specific properties (minimal - styles are in responsive config)\n  properties?: {\n    [key: string]: any;\n  };\n}\n\n/**\n * Generic scene configuration interface\n */\nexport interface SceneConfig {\n  sceneId: string;\n  sceneName: string;\n  version: string;\n  backgroundColor: string;\n  gameObjects: GameObjectConfig[];\n  assetLoading: {\n    preload: boolean;\n    priority: string[];\n  };\n  // Responsive configuration for dynamic styling and positioning\n  responsive?: any;\n}\n\n/**\n * Scene loader configuration loader for scenes\n * Loads and manages scene structure configurations\n */\nexport class SceneLoaderConfigLoader {\n  private static instance: SceneLoaderConfigLoader;\n  private loadedConfigs: Map<string, SceneConfig> = new Map();\n\n  private constructor() {\n    // No default configs - scenes must register their own configs\n  }\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): SceneLoaderConfigLoader {\n    if (!SceneLoaderConfigLoader.instance) {\n      SceneLoaderConfigLoader.instance = new SceneLoaderConfigLoader();\n    }\n    return SceneLoaderConfigLoader.instance;\n  }\n\n  /**\n   * Register a scene configuration\n   */\n  public registerConfig(sceneName: string, config: SceneConfig): void {\n    this.loadedConfigs.set(sceneName, config);\n    logger.info(\n      'SceneLoaderConfigLoader',\n      'registerConfig',\n      'registerConfig',\n      'Registered scene config for: ${sceneName}'\n    );\n  }\n\n  /**\n   * Load scene configuration\n   */\n  public loadConfig(sceneName: string): SceneConfig | null {\n    const config = this.loadedConfigs.get(sceneName);\n\n    if (!config) {\n      logger.warn(\n        'SceneLoaderConfigLoader',\n        'loadConfig',\n        'loadConfig',\n        'No scene config found for: ${sceneName}'\n      );\n      return null;\n    }\n\n    logger.info(\n      'SceneLoaderConfigLoader',\n      'loadConfig',\n      'loadConfig',\n      'Loaded scene config for: ${sceneName}'\n    );\n    return config;\n  }\n\n  /**\n   * Check if a scene has a configuration\n   */\n  public hasConfig(sceneName: string): boolean {\n    return this.loadedConfigs.has(sceneName);\n  }\n\n  /**\n   * Get available scene configurations\n   */\n  public getAvailableConfigs(): string[] {\n    return Array.from(this.loadedConfigs.keys());\n  }\n\n  /**\n   * Find a specific game object by ID\n   */\n  public findGameObject(sceneName: string, objectId: string): GameObjectConfig | undefined {\n    const config = this.loadedConfigs.get(sceneName);\n    if (!config) return undefined;\n\n    return this.findGameObjectRecursive(config.gameObjects, objectId);\n  }\n\n  /**\n   * Recursively search for a game object\n   */\n  private findGameObjectRecursive(\n    objects: GameObjectConfig[],\n    objectId: string\n  ): GameObjectConfig | undefined {\n    for (const obj of objects) {\n      if (obj.id === objectId) return obj;\n\n      if (obj.children.length > 0) {\n        const found = this.findGameObjectRecursive(obj.children, objectId);\n        if (found) return found;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Get all game objects in a scene\n   */\n  public getAllGameObjects(sceneName: string): GameObjectConfig[] {\n    const config = this.loadedConfigs.get(sceneName);\n    return config ? config.gameObjects : [];\n  }\n}\n\nexport default SceneLoaderConfigLoader;\n","/**\n * Asset Interface\n *\n * Defines the base interface for all assets in the system.\n */\n\n/**\n * Asset types\n */\nexport enum AssetType {\n  IMAGE = 'image',\n  AUDIO = 'audio',\n  SPRITE = 'sprite',\n  FONT = 'font',\n  VIDEO = 'video',\n  JSON = 'json',\n  XML = 'xml',\n  TEXT = 'text',\n  BINARY = 'binary',\n  CUSTOM = 'custom',\n}\n\n/**\n * Asset states\n */\nexport enum AssetState {\n  PENDING = 'pending',\n  LOADING = 'loading',\n  LOADED = 'loaded',\n  FAILED = 'failed',\n  CACHED = 'cached',\n  DISPOSED = 'disposed',\n}\n\n/**\n * Asset loading priority\n */\nexport enum AssetPriority {\n  CRITICAL = 'critical',\n  HIGH = 'high',\n  NORMAL = 'normal',\n  LOW = 'low',\n  BACKGROUND = 'background',\n}\n\n/**\n * Asset configuration\n */\nexport interface AssetConfig {\n  key: string;\n  path: string;\n  type: AssetType;\n  priority: AssetPriority;\n  preload: boolean;\n  cache: boolean;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Interface for assets\n */\nexport interface IAsset {\n  readonly assetId: string;\n  readonly assetKey: string;\n  readonly assetType: AssetType;\n\n  /** Asset state */\n  assetState: AssetState;\n\n  /** Asset configuration */\n  assetConfig: AssetConfig;\n\n  /** Asset data */\n  assetData: any;\n\n  /** Asset size in bytes */\n  assetSize: number;\n\n  /** Asset load time */\n  assetLoadTime: number;\n\n  /** Asset last accessed time */\n  assetLastAccessedTime: number;\n\n  /** Asset access count */\n  assetAccessCount: number;\n\n  /** Asset metadata */\n  assetMetadata: Record<string, any>;\n\n  /** Set asset state */\n  setAssetState(state: AssetState): this;\n\n  /** Set asset configuration */\n  setAssetConfig(config: AssetConfig): this;\n\n  /** Set asset data */\n  setAssetData(data: any): this;\n\n  /** Set asset size */\n  setAssetSize(size: number): this;\n\n  /** Set asset load time */\n  setAssetLoadTime(time: number): this;\n\n  /** Set asset last accessed time */\n  setAssetLastAccessedTime(time: number): this;\n\n  /** Set asset access count */\n  setAssetAccessCount(count: number): this;\n\n  /** Set asset metadata */\n  setAssetMetadata(metadata: Record<string, any>): this;\n\n  /** Get asset state */\n  getAssetState(): AssetState;\n\n  /** Get asset configuration */\n  getAssetConfig(): AssetConfig;\n\n  /** Get asset data */\n  getAssetData(): any;\n\n  /** Get asset size */\n  getAssetSize(): number;\n\n  /** Get asset load time */\n  getAssetLoadTime(): number;\n\n  /** Get asset last accessed time */\n  getAssetLastAccessedTime(): number;\n\n  /** Get asset access count */\n  getAssetAccessCount(): number;\n\n  /** Get asset metadata */\n  getAssetMetadata(): Record<string, any>;\n\n  /** Load asset */\n  loadAsset(): Promise<this>;\n\n  /** Unload asset */\n  unloadAsset(): Promise<this>;\n\n  /** Check if asset is loaded */\n  isAssetLoaded(): boolean;\n\n  /** Check if asset is cached */\n  isAssetCached(): boolean;\n\n  /** Check if asset is preloadable */\n  isAssetPreloadable(): boolean;\n\n  /** Get asset URL */\n  getAssetUrl(): string;\n\n  /** Clone asset */\n  cloneAsset(): IAsset;\n\n  /** Dispose asset */\n  disposeAsset(): void;\n}\n","/**\n * Asset Bundle Interface\n *\n * Defines asset bundle functionality for grouping related assets.\n */\n\nimport type { IAsset } from './IAsset';\nimport type { AssetType, AssetPriority } from './IAsset';\n\n/**\n * Bundle types\n */\nexport enum BundleType {\n  SCENE = 'scene',\n  UI = 'ui',\n  AUDIO = 'audio',\n  TEXTURE = 'texture',\n  FONT = 'font',\n  CUSTOM = 'custom',\n}\n\n/**\n * Bundle states\n */\nexport enum BundleState {\n  PENDING = 'pending',\n  LOADING = 'loading',\n  LOADED = 'loaded',\n  FAILED = 'failed',\n  DISPOSED = 'disposed',\n}\n\n/**\n * Bundle configuration\n */\nexport interface BundleConfig {\n  bundleId: string;\n  bundleName: string;\n  bundleType: BundleType;\n  priority: AssetPriority;\n  preload: boolean;\n  cache: boolean;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Bundle loading progress\n */\nexport interface BundleProgress {\n  totalAssets: number;\n  loadedAssets: number;\n  failedAssets: number;\n  percentage: number;\n  estimatedTimeRemaining: number;\n}\n\n/**\n * Interface for asset bundles\n */\nexport interface IAssetBundle {\n  readonly bundleId: string;\n  readonly bundleType: BundleType;\n\n  /** Bundle state */\n  bundleState: BundleState;\n\n  /** Bundle configuration */\n  bundleConfig: BundleConfig;\n\n  /** Bundle assets */\n  bundleAssets: Map<string, IAsset>;\n\n  /** Bundle progress */\n  bundleProgress: BundleProgress;\n\n  /** Bundle metadata */\n  bundleMetadata: Record<string, any>;\n\n  /** Set bundle state */\n  setBundleState(state: BundleState): this;\n\n  /** Set bundle configuration */\n  setBundleConfig(config: BundleConfig): this;\n\n  /** Set bundle metadata */\n  setBundleMetadata(metadata: Record<string, any>): this;\n\n  /** Get bundle state */\n  getBundleState(): BundleState;\n\n  /** Get bundle configuration */\n  getBundleConfig(): BundleConfig;\n\n  /** Get bundle assets */\n  getBundleAssets(): Map<string, IAsset>;\n\n  /** Get bundle progress */\n  getBundleProgress(): BundleProgress;\n\n  /** Get bundle metadata */\n  getBundleMetadata(): Record<string, any>;\n\n  /** Add asset to bundle */\n  addAsset(asset: IAsset): this;\n\n  /** Remove asset from bundle */\n  removeAsset(assetKey: string): this;\n\n  /** Get asset by key */\n  getAsset(assetKey: string): IAsset | null;\n\n  /** Get assets by type */\n  getAssetsByType(assetType: AssetType): IAsset[];\n\n  /** Load bundle */\n  loadBundle(): Promise<this>;\n\n  /** Unload bundle */\n  unloadBundle(): Promise<this>;\n\n  /** Check if bundle is loaded */\n  isBundleLoaded(): boolean;\n\n  /** Check if bundle is loading */\n  isBundleLoading(): boolean;\n\n  /** Get bundle size */\n  getBundleSize(): number;\n\n  /** Get bundle asset count */\n  getBundleAssetCount(): number;\n\n  /** Clone bundle */\n  cloneBundle(): IAssetBundle;\n\n  /** Dispose bundle */\n  disposeBundle(): void;\n}\n","/**\n * Asset Class Implementation\n *\n * Concrete implementation of the IAsset interface.\n * Handles asset lifecycle, data management, and all asset operations.\n */\n\nimport type { IAsset } from '../interfaces/IAsset';\nimport { AssetType, AssetState, AssetConfig } from '../interfaces/IAsset';\nimport { Logger } from '../../core/Logger';\n\n/**\n * Concrete Asset implementation\n */\nexport class Asset implements IAsset {\n  readonly assetId: string;\n  readonly assetKey: string;\n  readonly assetType: AssetType;\n\n  assetState: AssetState;\n  assetConfig: AssetConfig;\n  assetData: unknown;\n  assetSize: number;\n  assetLoadTime: number;\n  assetLastAccessedTime: number;\n  assetAccessCount: number;\n  assetMetadata: Record<string, unknown>;\n\n  private readonly logger: Logger = Logger.getInstance();\n\n  /**\n   * Constructor\n   */\n  constructor(assetId: string, assetKey: string, assetType: AssetType, assetConfig: AssetConfig) {\n    this.assetId = assetId;\n    this.assetKey = assetKey;\n    this.assetType = assetType;\n    this.assetConfig = assetConfig;\n\n    // Initialize default values\n    this.assetState = AssetState.PENDING;\n    this.assetData = null;\n    this.assetSize = 0;\n    this.assetLoadTime = 0;\n    this.assetLastAccessedTime = Date.now();\n    this.assetAccessCount = 0;\n    this.assetMetadata = {};\n\n    this.logger.debug('Asset', 'constructor', `Asset created: ${assetId}`, {\n      assetKey,\n      assetType,\n      priority: assetConfig.priority,\n    });\n  }\n\n  /**\n   * Set asset state\n   */\n  setAssetState(state: AssetState): this {\n    const previousState = this.assetState;\n    this.assetState = state;\n\n    this.logger.debug('Asset', 'setAssetState', `State changed: ${previousState} → ${state}`, {\n      assetId: this.assetId,\n      assetKey: this.assetKey,\n    });\n\n    return this;\n  }\n\n  /**\n   * Set asset configuration\n   */\n  setAssetConfig(config: AssetConfig): this {\n    this.assetConfig = config;\n\n    this.logger.debug('Asset', 'setAssetConfig', 'Configuration updated', {\n      assetId: this.assetId,\n      assetKey: this.assetKey,\n      priority: config.priority,\n      preload: config.preload,\n    });\n\n    return this;\n  }\n\n  /**\n   * Set asset data\n   */\n  setAssetData(data: unknown): this {\n    this.assetData = data;\n    this.assetLastAccessedTime = Date.now();\n    this.assetAccessCount++;\n\n    this.logger.debug('Asset', 'setAssetData', 'Data updated', {\n      assetId: this.assetId,\n      assetKey: this.assetKey,\n      dataType: typeof data,\n      accessCount: this.assetAccessCount,\n    });\n\n    return this;\n  }\n\n  /**\n   * Set asset size\n   */\n  setAssetSize(size: number): this {\n    this.assetSize = size;\n\n    this.logger.debug('Asset', 'setAssetSize', 'Size updated', {\n      assetId: this.assetId,\n      assetKey: this.assetKey,\n      size,\n    });\n\n    return this;\n  }\n\n  /**\n   * Set asset load time\n   */\n  setAssetLoadTime(time: number): this {\n    this.assetLoadTime = time;\n\n    this.logger.debug('Asset', 'setAssetLoadTime', 'Load time updated', {\n      assetId: this.assetId,\n      assetKey: this.assetKey,\n      loadTime: time,\n    });\n\n    return this;\n  }\n\n  /**\n   * Set asset last accessed time\n   */\n  setAssetLastAccessedTime(time: number): this {\n    this.assetLastAccessedTime = time;\n\n    this.logger.debug('Asset', 'setAssetLastAccessedTime', 'Last accessed time updated', {\n      assetId: this.assetId,\n      assetKey: this.assetKey,\n      lastAccessed: time,\n    });\n\n    return this;\n  }\n\n  /**\n   * Set asset access count\n   */\n  setAssetAccessCount(count: number): this {\n    this.assetAccessCount = count;\n\n    this.logger.debug('Asset', 'setAssetAccessCount', 'Access count updated', {\n      assetId: this.assetId,\n      assetKey: this.assetKey,\n      accessCount: count,\n    });\n\n    return this;\n  }\n\n  /**\n   * Set asset metadata\n   */\n  setAssetMetadata(metadata: Record<string, unknown>): this {\n    this.assetMetadata = { ...this.assetMetadata, ...metadata };\n\n    this.logger.debug('Asset', 'setAssetMetadata', 'Metadata updated', {\n      assetId: this.assetId,\n      assetKey: this.assetKey,\n      metadataKeys: Object.keys(metadata),\n    });\n\n    return this;\n  }\n\n  /**\n   * Get asset state\n   */\n  getAssetState(): AssetState {\n    return this.assetState;\n  }\n\n  /**\n   * Get asset configuration\n   */\n  getAssetConfig(): AssetConfig {\n    return this.assetConfig;\n  }\n\n  /**\n   * Get asset data\n   */\n  getAssetData(): unknown {\n    this.assetLastAccessedTime = Date.now();\n    this.assetAccessCount++;\n\n    this.logger.debug('Asset', 'getAssetData', 'Data accessed', {\n      assetId: this.assetId,\n      assetKey: this.assetKey,\n      accessCount: this.assetAccessCount,\n    });\n\n    return this.assetData;\n  }\n\n  /**\n   * Get asset size\n   */\n  getAssetSize(): number {\n    return this.assetSize;\n  }\n\n  /**\n   * Get asset load time\n   */\n  getAssetLoadTime(): number {\n    return this.assetLoadTime;\n  }\n\n  /**\n   * Get asset last accessed time\n   */\n  getAssetLastAccessedTime(): number {\n    return this.assetLastAccessedTime;\n  }\n\n  /**\n   * Get asset access count\n   */\n  getAssetAccessCount(): number {\n    return this.assetAccessCount;\n  }\n\n  /**\n   * Get asset metadata\n   */\n  getAssetMetadata(): Record<string, unknown> {\n    return this.assetMetadata;\n  }\n\n  /**\n   * Load asset\n   */\n  async loadAsset(): Promise<this> {\n    if (this.assetState === AssetState.LOADED) {\n      this.logger.debug('Asset', 'loadAsset', 'Asset already loaded', {\n        assetId: this.assetId,\n        assetKey: this.assetKey,\n      });\n      return this;\n    }\n\n    if (this.assetState === AssetState.LOADING) {\n      this.logger.warn('Asset', 'loadAsset', 'Asset already loading', {\n        assetId: this.assetId,\n        assetKey: this.assetKey,\n      });\n      return this;\n    }\n\n    try {\n      this.setAssetState(AssetState.LOADING);\n      const startTime = Date.now();\n\n      this.logger.info('Asset', 'loadAsset', 'Starting asset load', {\n        assetId: this.assetId,\n        assetKey: this.assetKey,\n        assetType: this.assetType,\n        path: this.assetConfig.path,\n      });\n\n      // Simulate asset loading based on type\n      await this.loadAssetByType();\n\n      const loadTime = Date.now() - startTime;\n      this.setAssetLoadTime(loadTime);\n      this.setAssetState(AssetState.LOADED);\n\n      this.logger.info('Asset', 'loadAsset', 'Asset loaded successfully', {\n        assetId: this.assetId,\n        assetKey: this.assetKey,\n        loadTime,\n      });\n\n      return this;\n    } catch (error) {\n      this.setAssetState(AssetState.FAILED);\n\n      this.logger.error('Asset', 'loadAsset', 'Asset load failed', {\n        assetId: this.assetId,\n        assetKey: this.assetKey,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Unload asset\n   */\n  async unloadAsset(): Promise<this> {\n    if (this.assetState === AssetState.PENDING) {\n      this.logger.debug('Asset', 'unloadAsset', 'Asset not loaded', {\n        assetId: this.assetId,\n        assetKey: this.assetKey,\n      });\n      return this;\n    }\n\n    try {\n      this.logger.info('Asset', 'unloadAsset', 'Unloading asset', {\n        assetId: this.assetId,\n        assetKey: this.assetKey,\n      });\n\n      // Clear asset data\n      this.assetData = null;\n      this.assetSize = 0;\n      this.assetLoadTime = 0;\n      this.setAssetState(AssetState.PENDING);\n\n      this.logger.info('Asset', 'unloadAsset', 'Asset unloaded successfully', {\n        assetId: this.assetId,\n        assetKey: this.assetKey,\n      });\n\n      return this;\n    } catch (error) {\n      this.logger.error('Asset', 'unloadAsset', 'Asset unload failed', {\n        assetId: this.assetId,\n        assetKey: this.assetKey,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Check if asset is loaded\n   */\n  isAssetLoaded(): boolean {\n    return this.assetState === AssetState.LOADED;\n  }\n\n  /**\n   * Check if asset is cached\n   */\n  isAssetCached(): boolean {\n    return this.assetState === AssetState.CACHED;\n  }\n\n  /**\n   * Check if asset is preloadable\n   */\n  isAssetPreloadable(): boolean {\n    return this.assetConfig.preload;\n  }\n\n  /**\n   * Get asset URL\n   */\n  getAssetUrl(): string {\n    return this.assetConfig.path;\n  }\n\n  /**\n   * Clone asset\n   */\n  cloneAsset(): IAsset {\n    const clonedAsset = new Asset(\n      `${this.assetId}_clone_${Date.now()}`,\n      `${this.assetKey}_clone`,\n      this.assetType,\n      { ...this.assetConfig }\n    );\n\n    // Copy metadata\n    clonedAsset.setAssetMetadata(this.assetMetadata);\n\n    this.logger.debug('Asset', 'cloneAsset', 'Asset cloned', {\n      originalId: this.assetId,\n      clonedId: clonedAsset.assetId,\n      assetKey: this.assetKey,\n    });\n\n    return clonedAsset;\n  }\n\n  /**\n   * Dispose asset\n   */\n  disposeAsset(): void {\n    this.logger.info('Asset', 'disposeAsset', 'Disposing asset', {\n      assetId: this.assetId,\n      assetKey: this.assetKey,\n    });\n\n    // Clear all data\n    this.assetData = null;\n    this.assetSize = 0;\n    this.assetLoadTime = 0;\n    this.assetAccessCount = 0;\n    this.assetMetadata = {};\n    this.setAssetState(AssetState.DISPOSED);\n  }\n\n  /**\n   * Load asset by type (private helper method)\n   */\n  private async loadAssetByType(): Promise<void> {\n    switch (this.assetType) {\n      case AssetType.IMAGE:\n        await this.loadImageAsset();\n        break;\n      case AssetType.AUDIO:\n        await this.loadAudioAsset();\n        break;\n      case AssetType.SPRITE:\n        await this.loadSpriteAsset();\n        break;\n      case AssetType.FONT:\n        await this.loadFontAsset();\n        break;\n      case AssetType.VIDEO:\n        await this.loadVideoAsset();\n        break;\n      case AssetType.JSON:\n        await this.loadJsonAsset();\n        break;\n      case AssetType.XML:\n        await this.loadXmlAsset();\n        break;\n      case AssetType.TEXT:\n        await this.loadTextAsset();\n        break;\n      case AssetType.BINARY:\n        await this.loadBinaryAsset();\n        break;\n      case AssetType.CUSTOM:\n        await this.loadCustomAsset();\n        break;\n      default:\n        throw new Error(`Unsupported asset type: ${this.assetType}`);\n    }\n  }\n\n  /**\n   * Load image asset\n   */\n  private async loadImageAsset(): Promise<void> {\n    // Simulate image loading\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // Mock image data\n    this.assetData = {\n      type: 'image',\n      url: this.assetConfig.path,\n      width: 1920,\n      height: 1080,\n      format: 'png',\n    };\n\n    this.assetSize = 1024 * 1024; // 1MB mock size\n  }\n\n  /**\n   * Load audio asset\n   */\n  private async loadAudioAsset(): Promise<void> {\n    // Simulate audio loading\n    await new Promise(resolve => setTimeout(resolve, 200));\n\n    // Mock audio data\n    this.assetData = {\n      type: 'audio',\n      url: this.assetConfig.path,\n      duration: 30,\n      format: 'mp3',\n    };\n\n    this.assetSize = 512 * 1024; // 512KB mock size\n  }\n\n  /**\n   * Load sprite asset\n   */\n  private async loadSpriteAsset(): Promise<void> {\n    // Simulate sprite loading\n    await new Promise(resolve => setTimeout(resolve, 150));\n\n    // Mock sprite data\n    this.assetData = {\n      type: 'sprite',\n      url: this.assetConfig.path,\n      frames: 10,\n      frameWidth: 64,\n      frameHeight: 64,\n    };\n\n    this.assetSize = 256 * 1024; // 256KB mock size\n  }\n\n  /**\n   * Load font asset\n   */\n  private async loadFontAsset(): Promise<void> {\n    // Simulate font loading\n    await new Promise(resolve => setTimeout(resolve, 50));\n\n    // Mock font data\n    this.assetData = {\n      type: 'font',\n      url: this.assetConfig.path,\n      family: 'Arial',\n      weight: 'normal',\n    };\n\n    this.assetSize = 64 * 1024; // 64KB mock size\n  }\n\n  /**\n   * Load video asset\n   */\n  private async loadVideoAsset(): Promise<void> {\n    // Simulate video loading\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Mock video data\n    this.assetData = {\n      type: 'video',\n      url: this.assetConfig.path,\n      duration: 60,\n      width: 1920,\n      height: 1080,\n      format: 'mp4',\n    };\n\n    this.assetSize = 10 * 1024 * 1024; // 10MB mock size\n  }\n\n  /**\n   * Load JSON asset\n   */\n  private async loadJsonAsset(): Promise<void> {\n    // Simulate JSON loading\n    await new Promise(resolve => setTimeout(resolve, 25));\n\n    // Mock JSON data\n    this.assetData = {\n      type: 'json',\n      url: this.assetConfig.path,\n      data: { mock: 'data' },\n    };\n\n    this.assetSize = 1 * 1024; // 1KB mock size\n  }\n\n  /**\n   * Load XML asset\n   */\n  private async loadXmlAsset(): Promise<void> {\n    // Simulate XML loading\n    await new Promise(resolve => setTimeout(resolve, 30));\n\n    // Mock XML data\n    this.assetData = {\n      type: 'xml',\n      url: this.assetConfig.path,\n      data: '<root><item>mock</item></root>',\n    };\n\n    this.assetSize = 2 * 1024; // 2KB mock size\n  }\n\n  /**\n   * Load text asset\n   */\n  private async loadTextAsset(): Promise<void> {\n    // Simulate text loading\n    await new Promise(resolve => setTimeout(resolve, 20));\n\n    // Mock text data\n    this.assetData = {\n      type: 'text',\n      url: this.assetConfig.path,\n      content: 'Mock text content',\n    };\n\n    this.assetSize = 512; // 512 bytes mock size\n  }\n\n  /**\n   * Load binary asset\n   */\n  private async loadBinaryAsset(): Promise<void> {\n    // Simulate binary loading\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // Mock binary data\n    this.assetData = {\n      type: 'binary',\n      url: this.assetConfig.path,\n      size: 1024,\n    };\n\n    this.assetSize = 1024; // 1KB mock size\n  }\n\n  /**\n   * Load custom asset\n   */\n  private async loadCustomAsset(): Promise<void> {\n    // Simulate custom asset loading\n    await new Promise(resolve => setTimeout(resolve, 75));\n\n    // Mock custom data\n    this.assetData = {\n      type: 'custom',\n      url: this.assetConfig.path,\n      customType: this.assetMetadata.customType || 'unknown',\n    };\n\n    this.assetSize = 5 * 1024; // 5KB mock size\n  }\n}\n","/**\n * AssetFactory Class Implementation\n *\n * Concrete implementation of the IAssetFactory interface.\n * Handles asset creation, configuration, validation, and factory management.\n */\n\nimport type { IAssetFactory } from '../interfaces/factories/IAssetFactory';\nimport type { IAsset } from '../interfaces/IAsset';\nimport {\n  FactoryConfig,\n  FactoryStatistics,\n  AssetCreationOptions,\n} from '../interfaces/factories/IAssetFactory';\nimport { AssetType, AssetPriority, AssetConfig } from '../interfaces/IAsset';\nimport { Asset } from './Asset';\nimport { Logger } from '../../core/Logger';\n\n/**\n * Asset type creator function type\n */\ntype AssetTypeCreator = (options: AssetCreationOptions) => Promise<IAsset>;\n\n/**\n * Concrete AssetFactory implementation\n */\nexport class AssetFactory implements IAssetFactory {\n  readonly factoryId: string;\n\n  factoryConfig: FactoryConfig;\n  factoryStatistics: FactoryStatistics;\n  factoryMetadata: Record<string, unknown>;\n\n  private readonly logger: Logger = Logger.getInstance();\n  private readonly assetTypeCreators: Map<AssetType, AssetTypeCreator> = new Map();\n  private readonly creationTimes: number[] = [];\n\n  /**\n   * Constructor\n   */\n  constructor(factoryId: string, factoryConfig?: Partial<FactoryConfig>) {\n    this.factoryId = factoryId;\n\n    // Initialize default configuration\n    this.factoryConfig = {\n      enableValidation: true,\n      enableCaching: true,\n      enablePooling: false,\n      defaultPriority: AssetPriority.NORMAL,\n      defaultPreload: true,\n      defaultCache: true,\n      metadata: {},\n      ...factoryConfig,\n    };\n\n    // Initialize statistics\n    this.factoryStatistics = {\n      totalCreated: 0,\n      createdByType: {} as Record<AssetType, number>,\n      totalCloned: 0,\n      totalConfigured: 0,\n      totalValidated: 0,\n      validationFailures: 0,\n      lastCreationTime: 0,\n    };\n\n    this.factoryMetadata = {};\n\n    // Initialize asset type creators for all supported types\n    this.initializeDefaultAssetTypeCreators();\n\n    this.logger.debug('AssetFactory', 'constructor', `Factory created: ${factoryId}`, {\n      factoryId,\n      enableValidation: this.factoryConfig.enableValidation,\n      enableCaching: this.factoryConfig.enableCaching,\n      defaultPriority: this.factoryConfig.defaultPriority,\n    });\n  }\n\n  /**\n   * Set factory configuration\n   */\n  setFactoryConfig(config: FactoryConfig): this {\n    this.factoryConfig = config;\n\n    this.logger.debug('AssetFactory', 'setFactoryConfig', 'Configuration updated', {\n      factoryId: this.factoryId,\n      enableValidation: config.enableValidation,\n      enableCaching: config.enableCaching,\n      defaultPriority: config.defaultPriority,\n    });\n\n    return this;\n  }\n\n  /**\n   * Set factory metadata\n   */\n  setFactoryMetadata(metadata: Record<string, unknown>): this {\n    this.factoryMetadata = { ...this.factoryMetadata, ...metadata };\n\n    this.logger.debug('AssetFactory', 'setFactoryMetadata', 'Metadata updated', {\n      factoryId: this.factoryId,\n      metadataKeys: Object.keys(metadata),\n    });\n\n    return this;\n  }\n\n  /**\n   * Get factory configuration\n   */\n  getFactoryConfig(): FactoryConfig {\n    return this.factoryConfig;\n  }\n\n  /**\n   * Get factory statistics\n   */\n  getFactoryStatistics(): FactoryStatistics {\n    return this.factoryStatistics;\n  }\n\n  /**\n   * Get factory metadata\n   */\n  getFactoryMetadata(): Record<string, unknown> {\n    return this.factoryMetadata;\n  }\n\n  /**\n   * Create asset\n   */\n  async createAsset(options: AssetCreationOptions): Promise<IAsset> {\n    const startTime = Date.now();\n\n    try {\n      this.logger.info('AssetFactory', 'createAsset', 'Creating asset', {\n        factoryId: this.factoryId,\n        assetType: options.assetType,\n        assetKey: options.assetKey,\n        assetPath: options.assetPath,\n      });\n\n      // Validate asset type is supported\n      if (!this.isAssetTypeSupported(options.assetType)) {\n        throw new Error(`Unsupported asset type: ${options.assetType}`);\n      }\n\n      // Get asset type creator\n      const creator = this.assetTypeCreators.get(options.assetType);\n      if (!creator) {\n        throw new Error(`No creator registered for asset type: ${options.assetType}`);\n      }\n\n      // Create asset using registered creator\n      const asset = await creator(options);\n\n      // Update statistics\n      this.updateCreationStatistics(options.assetType, startTime);\n\n      this.logger.info('AssetFactory', 'createAsset', 'Asset created successfully', {\n        factoryId: this.factoryId,\n        assetId: asset.assetId,\n        assetKey: asset.assetKey,\n        assetType: asset.assetType,\n        creationTime: Date.now() - startTime,\n      });\n\n      return asset;\n    } catch (error) {\n      this.factoryStatistics.validationFailures++;\n\n      this.logger.error('AssetFactory', 'createAsset', 'Asset creation failed', {\n        factoryId: this.factoryId,\n        assetType: options.assetType,\n        assetKey: options.assetKey,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Create asset from configuration\n   */\n  async createAssetFromConfig(config: AssetConfig): Promise<IAsset> {\n    const startTime = Date.now();\n\n    try {\n      this.logger.info('AssetFactory', 'createAssetFromConfig', 'Creating asset from config', {\n        factoryId: this.factoryId,\n        assetType: config.type,\n        assetKey: config.key,\n        assetPath: config.path,\n      });\n\n      // Validate configuration if validation is enabled\n      if (this.factoryConfig.enableValidation) {\n        const isValid = await this.validateAssetConfig(config);\n        if (!isValid) {\n          throw new Error(`Invalid asset configuration for key: ${config.key}`);\n        }\n      }\n\n      // Convert AssetConfig to AssetCreationOptions\n      const options: AssetCreationOptions = {\n        assetType: config.type,\n        assetKey: config.key,\n        assetPath: config.path,\n        priority: config.priority,\n        preload: config.preload,\n        cache: config.cache,\n        metadata: config.metadata,\n      };\n\n      // Create asset using standard creation method\n      const asset = await this.createAsset(options);\n\n      this.logger.info(\n        'AssetFactory',\n        'createAssetFromConfig',\n        'Asset created from config successfully',\n        {\n          factoryId: this.factoryId,\n          assetId: asset.assetId,\n          assetKey: asset.assetKey,\n          creationTime: Date.now() - startTime,\n        }\n      );\n\n      return asset;\n    } catch (error) {\n      this.logger.error(\n        'AssetFactory',\n        'createAssetFromConfig',\n        'Asset creation from config failed',\n        {\n          factoryId: this.factoryId,\n          assetKey: config.key,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      throw error;\n    }\n  }\n\n  /**\n   * Clone asset\n   */\n  async cloneAsset(asset: IAsset, newKey?: string): Promise<IAsset> {\n    const startTime = Date.now();\n\n    try {\n      this.logger.info('AssetFactory', 'cloneAsset', 'Cloning asset', {\n        factoryId: this.factoryId,\n        originalAssetId: asset.assetId,\n        originalAssetKey: asset.assetKey,\n        newKey,\n      });\n\n      // Clone the asset\n      const clonedAsset = asset.cloneAsset();\n\n      // Update key if provided\n      if (newKey) {\n        // Note: We can't directly modify the assetKey as it's readonly\n        // This would require creating a new asset with the new key\n        this.logger.warn('AssetFactory', 'cloneAsset', 'Cannot modify readonly assetKey', {\n          factoryId: this.factoryId,\n          originalKey: asset.assetKey,\n          requestedKey: newKey,\n        });\n      }\n\n      // Update statistics\n      this.factoryStatistics.totalCloned++;\n      this.factoryStatistics.lastCreationTime = Date.now();\n\n      this.logger.info('AssetFactory', 'cloneAsset', 'Asset cloned successfully', {\n        factoryId: this.factoryId,\n        originalAssetId: asset.assetId,\n        clonedAssetId: clonedAsset.assetId,\n        cloneTime: Date.now() - startTime,\n      });\n\n      return clonedAsset;\n    } catch (error) {\n      this.logger.error('AssetFactory', 'cloneAsset', 'Asset cloning failed', {\n        factoryId: this.factoryId,\n        originalAssetId: asset.assetId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Configure asset\n   */\n  async configureAsset(asset: IAsset, config: Partial<AssetConfig>): Promise<IAsset> {\n    try {\n      this.logger.info('AssetFactory', 'configureAsset', 'Configuring asset', {\n        factoryId: this.factoryId,\n        assetId: asset.assetId,\n        assetKey: asset.assetKey,\n        configKeys: Object.keys(config),\n      });\n\n      // Update asset configuration\n      const currentConfig = asset.getAssetConfig();\n      const newConfig: AssetConfig = {\n        ...currentConfig,\n        ...config,\n      };\n\n      // Validate new configuration if validation is enabled\n      if (this.factoryConfig.enableValidation) {\n        const isValid = await this.validateAssetConfig(newConfig);\n        if (!isValid) {\n          throw new Error(`Invalid asset configuration for key: ${asset.assetKey}`);\n        }\n      }\n\n      // Apply new configuration\n      asset.setAssetConfig(newConfig);\n\n      // Update statistics\n      this.factoryStatistics.totalConfigured++;\n\n      this.logger.info('AssetFactory', 'configureAsset', 'Asset configured successfully', {\n        factoryId: this.factoryId,\n        assetId: asset.assetId,\n        assetKey: asset.assetKey,\n      });\n\n      return asset;\n    } catch (error) {\n      this.logger.error('AssetFactory', 'configureAsset', 'Asset configuration failed', {\n        factoryId: this.factoryId,\n        assetId: asset.assetId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Validate asset configuration\n   */\n  async validateAssetConfig(config: AssetConfig): Promise<boolean> {\n    try {\n      this.logger.debug('AssetFactory', 'validateAssetConfig', 'Validating asset config', {\n        factoryId: this.factoryId,\n        assetKey: config.key,\n        assetType: config.type,\n      });\n\n      // Basic validation checks\n      if (!config.key || typeof config.key !== 'string') {\n        this.logger.warn('AssetFactory', 'validateAssetConfig', 'Invalid asset key', {\n          factoryId: this.factoryId,\n          key: config.key,\n        });\n        this.factoryStatistics.validationFailures++;\n        return false;\n      }\n\n      if (!config.path || typeof config.path !== 'string') {\n        this.logger.warn('AssetFactory', 'validateAssetConfig', 'Invalid asset path', {\n          factoryId: this.factoryId,\n          path: config.path,\n        });\n        this.factoryStatistics.validationFailures++;\n        return false;\n      }\n\n      if (!Object.values(AssetType).includes(config.type)) {\n        this.logger.warn('AssetFactory', 'validateAssetConfig', 'Invalid asset type', {\n          factoryId: this.factoryId,\n          type: config.type,\n        });\n        this.factoryStatistics.validationFailures++;\n        return false;\n      }\n\n      if (!Object.values(AssetPriority).includes(config.priority)) {\n        this.logger.warn('AssetFactory', 'validateAssetConfig', 'Invalid asset priority', {\n          factoryId: this.factoryId,\n          priority: config.priority,\n        });\n        this.factoryStatistics.validationFailures++;\n        return false;\n      }\n\n      if (typeof config.preload !== 'boolean') {\n        this.logger.warn('AssetFactory', 'validateAssetConfig', 'Invalid preload value', {\n          factoryId: this.factoryId,\n          preload: config.preload,\n        });\n        this.factoryStatistics.validationFailures++;\n        return false;\n      }\n\n      if (typeof config.cache !== 'boolean') {\n        this.logger.warn('AssetFactory', 'validateAssetConfig', 'Invalid cache value', {\n          factoryId: this.factoryId,\n          cache: config.cache,\n        });\n        this.factoryStatistics.validationFailures++;\n        return false;\n      }\n\n      // Update statistics\n      this.factoryStatistics.totalValidated++;\n\n      this.logger.debug('AssetFactory', 'validateAssetConfig', 'Asset config validation passed', {\n        factoryId: this.factoryId,\n        assetKey: config.key,\n      });\n\n      return true;\n    } catch (error) {\n      this.factoryStatistics.validationFailures++;\n\n      this.logger.error('AssetFactory', 'validateAssetConfig', 'Asset config validation failed', {\n        factoryId: this.factoryId,\n        assetKey: config.key,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      return false;\n    }\n  }\n\n  /**\n   * Register asset type creator\n   */\n  registerAssetTypeCreator(assetType: AssetType, creator: AssetTypeCreator): this {\n    this.assetTypeCreators.set(assetType, creator);\n\n    this.logger.debug('AssetFactory', 'registerAssetTypeCreator', 'Asset type creator registered', {\n      factoryId: this.factoryId,\n      assetType,\n    });\n\n    return this;\n  }\n\n  /**\n   * Unregister asset type creator\n   */\n  unregisterAssetTypeCreator(assetType: AssetType): this {\n    const removed = this.assetTypeCreators.delete(assetType);\n\n    if (removed) {\n      this.logger.debug(\n        'AssetFactory',\n        'unregisterAssetTypeCreator',\n        'Asset type creator unregistered',\n        {\n          factoryId: this.factoryId,\n          assetType,\n        }\n      );\n    } else {\n      this.logger.warn(\n        'AssetFactory',\n        'unregisterAssetTypeCreator',\n        'Asset type creator not found',\n        {\n          factoryId: this.factoryId,\n          assetType,\n        }\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Check if asset type is supported\n   */\n  isAssetTypeSupported(assetType: AssetType): boolean {\n    return this.assetTypeCreators.has(assetType);\n  }\n\n  /**\n   * Get supported asset types\n   */\n  getSupportedAssetTypes(): AssetType[] {\n    return Array.from(this.assetTypeCreators.keys());\n  }\n\n  /**\n   * Get asset type creator\n   */\n  getAssetTypeCreator(assetType: AssetType): AssetTypeCreator | null {\n    return this.assetTypeCreators.get(assetType) || null;\n  }\n\n  /**\n   * Create multiple assets\n   */\n  async createAssets(options: AssetCreationOptions[]): Promise<IAsset[]> {\n    this.logger.info('AssetFactory', 'createAssets', 'Creating multiple assets', {\n      factoryId: this.factoryId,\n      count: options.length,\n    });\n\n    const creationPromises = options.map(option => this.createAsset(option));\n    const assets = await Promise.allSettled(creationPromises);\n\n    const successfulAssets: IAsset[] = [];\n    const failedCreations: number = assets.filter(result => result.status === 'rejected').length;\n\n    for (const result of assets) {\n      if (result.status === 'fulfilled') {\n        successfulAssets.push(result.value);\n      }\n    }\n\n    this.logger.info('AssetFactory', 'createAssets', 'Multiple assets creation completed', {\n      factoryId: this.factoryId,\n      total: options.length,\n      successful: successfulAssets.length,\n      failed: failedCreations,\n    });\n\n    return successfulAssets;\n  }\n\n  /**\n   * Create assets from configurations\n   */\n  async createAssetsFromConfigs(configs: AssetConfig[]): Promise<IAsset[]> {\n    this.logger.info(\n      'AssetFactory',\n      'createAssetsFromConfigs',\n      'Creating multiple assets from configs',\n      {\n        factoryId: this.factoryId,\n        count: configs.length,\n      }\n    );\n\n    const creationPromises = configs.map(config => this.createAssetFromConfig(config));\n    const assets = await Promise.allSettled(creationPromises);\n\n    const successfulAssets: IAsset[] = [];\n    const failedCreations: number = assets.filter(result => result.status === 'rejected').length;\n\n    for (const result of assets) {\n      if (result.status === 'fulfilled') {\n        successfulAssets.push(result.value);\n      }\n    }\n\n    this.logger.info(\n      'AssetFactory',\n      'createAssetsFromConfigs',\n      'Multiple assets creation from configs completed',\n      {\n        factoryId: this.factoryId,\n        total: configs.length,\n        successful: successfulAssets.length,\n        failed: failedCreations,\n      }\n    );\n\n    return successfulAssets;\n  }\n\n  /**\n   * Get creation statistics\n   */\n  getCreationStatistics(): {\n    totalCreated: number;\n    successRate: number;\n    averageCreationTime: number;\n    mostCreatedType: AssetType;\n  } {\n    const totalCreated = this.factoryStatistics.totalCreated;\n    const totalAttempts = totalCreated + this.factoryStatistics.validationFailures;\n    const successRate = totalAttempts > 0 ? (totalCreated / totalAttempts) * 100 : 100;\n\n    const averageCreationTime =\n      this.creationTimes.length > 0\n        ? this.creationTimes.reduce((sum, time) => sum + time, 0) / this.creationTimes.length\n        : 0;\n\n    const mostCreatedType = this.getMostCreatedAssetType();\n\n    return {\n      totalCreated,\n      successRate,\n      averageCreationTime,\n      mostCreatedType,\n    };\n  }\n\n  /**\n   * Clear factory\n   */\n  clearFactory(): this {\n    this.logger.info('AssetFactory', 'clearFactory', 'Clearing factory', {\n      factoryId: this.factoryId,\n    });\n\n    // Reset statistics\n    this.factoryStatistics = {\n      totalCreated: 0,\n      createdByType: {} as Record<AssetType, number>,\n      totalCloned: 0,\n      totalConfigured: 0,\n      totalValidated: 0,\n      validationFailures: 0,\n      lastCreationTime: 0,\n    };\n\n    // Clear creation times\n    this.creationTimes.length = 0;\n\n    // Clear metadata\n    this.factoryMetadata = {};\n\n    this.logger.info('AssetFactory', 'clearFactory', 'Factory cleared', {\n      factoryId: this.factoryId,\n    });\n\n    return this;\n  }\n\n  /**\n   * Update factory\n   */\n  updateFactory(deltaTime: number): void {\n    // This method can be used for periodic factory maintenance\n    // For now, we'll just log the update\n    this.logger.debug('AssetFactory', 'updateFactory', 'Factory updated', {\n      factoryId: this.factoryId,\n      deltaTime,\n    });\n  }\n\n  /**\n   * Initialize default asset type creators (private helper method)\n   */\n  private initializeDefaultAssetTypeCreators(): void {\n    // Register default creator for all asset types\n    const assetTypes = Object.values(AssetType);\n\n    for (const assetType of assetTypes) {\n      this.registerAssetTypeCreator(assetType, this.createDefaultAsset.bind(this));\n    }\n\n    this.logger.debug(\n      'AssetFactory',\n      'initializeDefaultAssetTypeCreators',\n      'Default asset type creators initialized',\n      {\n        factoryId: this.factoryId,\n        supportedTypes: assetTypes.length,\n      }\n    );\n  }\n\n  /**\n   * Create default asset (private helper method)\n   */\n  private async createDefaultAsset(options: AssetCreationOptions): Promise<IAsset> {\n    const assetConfig: AssetConfig = {\n      key: options.assetKey,\n      path: options.assetPath,\n      type: options.assetType,\n      priority: options.priority || this.factoryConfig.defaultPriority,\n      preload: options.preload !== undefined ? options.preload : this.factoryConfig.defaultPreload,\n      cache: options.cache !== undefined ? options.cache : this.factoryConfig.defaultCache,\n      metadata: options.metadata || {},\n    };\n\n    const assetId = `${this.factoryId}_${options.assetKey}_${Date.now()}`;\n    return new Asset(assetId, options.assetKey, options.assetType, assetConfig);\n  }\n\n  /**\n   * Update creation statistics (private helper method)\n   */\n  private updateCreationStatistics(assetType: AssetType, startTime: number): void {\n    const creationTime = Date.now() - startTime;\n\n    this.factoryStatistics.totalCreated++;\n    this.factoryStatistics.createdByType[assetType] =\n      (this.factoryStatistics.createdByType[assetType] || 0) + 1;\n    this.factoryStatistics.lastCreationTime = Date.now();\n\n    // Keep only last 100 creation times for average calculation\n    this.creationTimes.push(creationTime);\n    if (this.creationTimes.length > 100) {\n      this.creationTimes.shift();\n    }\n  }\n\n  /**\n   * Get most created asset type (private helper method)\n   */\n  private getMostCreatedAssetType(): AssetType {\n    let mostCreatedType = AssetType.IMAGE;\n    let maxCount = 0;\n\n    for (const [assetType, count] of Object.entries(this.factoryStatistics.createdByType)) {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCreatedType = assetType as AssetType;\n      }\n    }\n\n    return mostCreatedType;\n  }\n}\n","/**\n * AssetBundle Class Implementation\n *\n * Concrete implementation of the IAssetBundle interface.\n * Handles asset bundle lifecycle, asset management, and bundle operations.\n */\n\nimport type { IAssetBundle } from '../interfaces/IAssetBundle';\nimport type { IAsset } from '../interfaces/IAsset';\nimport { BundleType, BundleState, BundleConfig, BundleProgress } from '../interfaces/IAssetBundle';\nimport { AssetType } from '../interfaces/IAsset';\nimport { Logger } from '../../core/Logger';\n\n/**\n * Concrete AssetBundle implementation\n */\nexport class AssetBundle implements IAssetBundle {\n  readonly bundleId: string;\n  readonly bundleType: BundleType;\n\n  bundleState: BundleState;\n  bundleConfig: BundleConfig;\n  bundleAssets: Map<string, IAsset>;\n  bundleProgress: BundleProgress;\n  bundleMetadata: Record<string, unknown>;\n\n  private readonly logger: Logger = Logger.getInstance();\n\n  /**\n   * Constructor\n   */\n  constructor(bundleId: string, bundleType: BundleType, bundleConfig: BundleConfig) {\n    this.bundleId = bundleId;\n    this.bundleType = bundleType;\n    this.bundleConfig = bundleConfig;\n\n    // Initialize default values\n    this.bundleState = BundleState.PENDING;\n    this.bundleAssets = new Map<string, IAsset>();\n    this.bundleProgress = {\n      totalAssets: 0,\n      loadedAssets: 0,\n      failedAssets: 0,\n      percentage: 0,\n      estimatedTimeRemaining: 0,\n    };\n    this.bundleMetadata = {};\n\n    this.logger.debug('AssetBundle', 'constructor', `Bundle created: ${bundleId}`, {\n      bundleType,\n      priority: bundleConfig.priority,\n    });\n  }\n\n  /**\n   * Set bundle state\n   */\n  setBundleState(state: BundleState): this {\n    const previousState = this.bundleState;\n    this.bundleState = state;\n\n    this.logger.debug(\n      'AssetBundle',\n      'setBundleState',\n      `State changed: ${previousState} → ${state}`,\n      {\n        bundleId: this.bundleId,\n        bundleType: this.bundleType,\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Set bundle configuration\n   */\n  setBundleConfig(config: BundleConfig): this {\n    this.bundleConfig = config;\n\n    this.logger.debug('AssetBundle', 'setBundleConfig', 'Configuration updated', {\n      bundleId: this.bundleId,\n      bundleType: this.bundleType,\n      priority: config.priority,\n      preload: config.preload,\n    });\n\n    return this;\n  }\n\n  /**\n   * Set bundle metadata\n   */\n  setBundleMetadata(metadata: Record<string, unknown>): this {\n    this.bundleMetadata = { ...this.bundleMetadata, ...metadata };\n\n    this.logger.debug('AssetBundle', 'setBundleMetadata', 'Metadata updated', {\n      bundleId: this.bundleId,\n      bundleType: this.bundleType,\n      metadataKeys: Object.keys(metadata),\n    });\n\n    return this;\n  }\n\n  /**\n   * Get bundle state\n   */\n  getBundleState(): BundleState {\n    return this.bundleState;\n  }\n\n  /**\n   * Get bundle configuration\n   */\n  getBundleConfig(): BundleConfig {\n    return this.bundleConfig;\n  }\n\n  /**\n   * Get bundle assets\n   */\n  getBundleAssets(): Map<string, IAsset> {\n    return this.bundleAssets;\n  }\n\n  /**\n   * Get bundle progress\n   */\n  getBundleProgress(): BundleProgress {\n    return this.bundleProgress;\n  }\n\n  /**\n   * Get bundle metadata\n   */\n  getBundleMetadata(): Record<string, unknown> {\n    return this.bundleMetadata;\n  }\n\n  /**\n   * Add asset to bundle\n   */\n  addAsset(asset: IAsset): this {\n    this.bundleAssets.set(asset.assetKey, asset);\n    this.updateProgress();\n\n    this.logger.debug('AssetBundle', 'addAsset', 'Asset added to bundle', {\n      bundleId: this.bundleId,\n      assetKey: asset.assetKey,\n      assetType: asset.assetType,\n      totalAssets: this.bundleAssets.size,\n    });\n\n    return this;\n  }\n\n  /**\n   * Remove asset from bundle\n   */\n  removeAsset(assetKey: string): this {\n    const removed = this.bundleAssets.delete(assetKey);\n    if (removed) {\n      this.updateProgress();\n\n      this.logger.debug('AssetBundle', 'removeAsset', 'Asset removed from bundle', {\n        bundleId: this.bundleId,\n        assetKey,\n        totalAssets: this.bundleAssets.size,\n      });\n    } else {\n      this.logger.warn('AssetBundle', 'removeAsset', 'Asset not found in bundle', {\n        bundleId: this.bundleId,\n        assetKey,\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Get asset by key\n   */\n  getAsset(assetKey: string): IAsset | null {\n    const asset = this.bundleAssets.get(assetKey) || null;\n\n    this.logger.debug('AssetBundle', 'getAsset', 'Asset retrieved from bundle', {\n      bundleId: this.bundleId,\n      assetKey,\n      found: asset !== null,\n    });\n\n    return asset;\n  }\n\n  /**\n   * Get assets by type\n   */\n  getAssetsByType(assetType: AssetType): IAsset[] {\n    const assets = Array.from(this.bundleAssets.values()).filter(\n      asset => asset.assetType === assetType\n    );\n\n    this.logger.debug('AssetBundle', 'getAssetsByType', 'Assets filtered by type', {\n      bundleId: this.bundleId,\n      assetType,\n      count: assets.length,\n    });\n\n    return assets;\n  }\n\n  /**\n   * Load bundle\n   */\n  async loadBundle(): Promise<this> {\n    if (this.bundleState === BundleState.LOADED) {\n      this.logger.debug('AssetBundle', 'loadBundle', 'Bundle already loaded', {\n        bundleId: this.bundleId,\n      });\n      return this;\n    }\n\n    if (this.bundleState === BundleState.LOADING) {\n      this.logger.warn('AssetBundle', 'loadBundle', 'Bundle already loading', {\n        bundleId: this.bundleId,\n      });\n      return this;\n    }\n\n    try {\n      this.setBundleState(BundleState.LOADING);\n      const startTime = Date.now();\n\n      this.logger.info('AssetBundle', 'loadBundle', 'Starting bundle load', {\n        bundleId: this.bundleId,\n        bundleType: this.bundleType,\n        totalAssets: this.bundleAssets.size,\n      });\n\n      // Load all assets in the bundle\n      await this.loadAllAssets();\n\n      const loadTime = Date.now() - startTime;\n      this.setBundleState(BundleState.LOADED);\n\n      this.logger.info('AssetBundle', 'loadBundle', 'Bundle loaded successfully', {\n        bundleId: this.bundleId,\n        loadTime,\n        loadedAssets: this.bundleProgress.loadedAssets,\n        failedAssets: this.bundleProgress.failedAssets,\n      });\n\n      return this;\n    } catch (error) {\n      this.setBundleState(BundleState.FAILED);\n\n      this.logger.error('AssetBundle', 'loadBundle', 'Bundle load failed', {\n        bundleId: this.bundleId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Unload bundle\n   */\n  async unloadBundle(): Promise<this> {\n    if (this.bundleState === BundleState.PENDING) {\n      this.logger.debug('AssetBundle', 'unloadBundle', 'Bundle not loaded', {\n        bundleId: this.bundleId,\n      });\n      return this;\n    }\n\n    try {\n      this.logger.info('AssetBundle', 'unloadBundle', 'Unloading bundle', {\n        bundleId: this.bundleId,\n        totalAssets: this.bundleAssets.size,\n      });\n\n      // Unload all assets in the bundle\n      await this.unloadAllAssets();\n\n      this.setBundleState(BundleState.PENDING);\n      this.resetProgress();\n\n      this.logger.info('AssetBundle', 'unloadBundle', 'Bundle unloaded successfully', {\n        bundleId: this.bundleId,\n      });\n\n      return this;\n    } catch (error) {\n      this.logger.error('AssetBundle', 'unloadBundle', 'Bundle unload failed', {\n        bundleId: this.bundleId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Check if bundle is loaded\n   */\n  isBundleLoaded(): boolean {\n    return this.bundleState === BundleState.LOADED;\n  }\n\n  /**\n   * Check if bundle is loading\n   */\n  isBundleLoading(): boolean {\n    return this.bundleState === BundleState.LOADING;\n  }\n\n  /**\n   * Get bundle size\n   */\n  getBundleSize(): number {\n    let totalSize = 0;\n    for (const asset of Array.from(this.bundleAssets.values())) {\n      totalSize += asset.getAssetSize();\n    }\n\n    this.logger.debug('AssetBundle', 'getBundleSize', 'Bundle size calculated', {\n      bundleId: this.bundleId,\n      totalSize,\n    });\n\n    return totalSize;\n  }\n\n  /**\n   * Get bundle asset count\n   */\n  getBundleAssetCount(): number {\n    return this.bundleAssets.size;\n  }\n\n  /**\n   * Clone bundle\n   */\n  cloneBundle(): IAssetBundle {\n    const clonedBundle = new AssetBundle(`${this.bundleId}_clone_${Date.now()}`, this.bundleType, {\n      ...this.bundleConfig,\n    });\n\n    // Copy metadata\n    clonedBundle.setBundleMetadata(this.bundleMetadata);\n\n    // Clone all assets\n    for (const asset of Array.from(this.bundleAssets.values())) {\n      const clonedAsset = asset.cloneAsset();\n      clonedBundle.addAsset(clonedAsset);\n    }\n\n    this.logger.debug('AssetBundle', 'cloneBundle', 'Bundle cloned', {\n      originalId: this.bundleId,\n      clonedId: clonedBundle.bundleId,\n      assetCount: this.bundleAssets.size,\n    });\n\n    return clonedBundle;\n  }\n\n  /**\n   * Dispose bundle\n   */\n  disposeBundle(): void {\n    this.logger.info('AssetBundle', 'disposeBundle', 'Disposing bundle', {\n      bundleId: this.bundleId,\n      assetCount: this.bundleAssets.size,\n    });\n\n    // Dispose all assets\n    for (const asset of Array.from(this.bundleAssets.values())) {\n      asset.disposeAsset();\n    }\n\n    // Clear all data\n    this.bundleAssets.clear();\n    this.bundleMetadata = {};\n    this.resetProgress();\n    this.setBundleState(BundleState.DISPOSED);\n  }\n\n  /**\n   * Load all assets in the bundle (private helper method)\n   */\n  private async loadAllAssets(): Promise<void> {\n    const assets = Array.from(this.bundleAssets.values());\n    const loadPromises = assets.map(asset => this.loadAssetSafely(asset));\n\n    await Promise.allSettled(loadPromises);\n    this.updateProgress();\n  }\n\n  /**\n   * Unload all assets in the bundle (private helper method)\n   */\n  private async unloadAllAssets(): Promise<void> {\n    const assets = Array.from(this.bundleAssets.values());\n    const unloadPromises = assets.map(asset => this.unloadAssetSafely(asset));\n\n    await Promise.allSettled(unloadPromises);\n    this.updateProgress();\n  }\n\n  /**\n   * Load asset safely with error handling (private helper method)\n   */\n  private async loadAssetSafely(asset: IAsset): Promise<void> {\n    try {\n      await asset.loadAsset();\n      this.logger.debug('AssetBundle', 'loadAssetSafely', 'Asset loaded successfully', {\n        bundleId: this.bundleId,\n        assetKey: asset.assetKey,\n      });\n    } catch (error) {\n      this.logger.error('AssetBundle', 'loadAssetSafely', 'Asset load failed', {\n        bundleId: this.bundleId,\n        assetKey: asset.assetKey,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  }\n\n  /**\n   * Unload asset safely with error handling (private helper method)\n   */\n  private async unloadAssetSafely(asset: IAsset): Promise<void> {\n    try {\n      await asset.unloadAsset();\n      this.logger.debug('AssetBundle', 'unloadAssetSafely', 'Asset unloaded successfully', {\n        bundleId: this.bundleId,\n        assetKey: asset.assetKey,\n      });\n    } catch (error) {\n      this.logger.error('AssetBundle', 'unloadAssetSafely', 'Asset unload failed', {\n        bundleId: this.bundleId,\n        assetKey: asset.assetKey,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  }\n\n  /**\n   * Update bundle progress (private helper method)\n   */\n  private updateProgress(): void {\n    const totalAssets = this.bundleAssets.size;\n    let loadedAssets = 0;\n    let failedAssets = 0;\n\n    for (const asset of Array.from(this.bundleAssets.values())) {\n      if (asset.isAssetLoaded()) {\n        loadedAssets++;\n      } else if (asset.getAssetState() === 'failed') {\n        failedAssets++;\n      }\n    }\n\n    const percentage = totalAssets > 0 ? Math.round((loadedAssets / totalAssets) * 100) : 0;\n    const estimatedTimeRemaining = this.calculateEstimatedTimeRemaining(loadedAssets, totalAssets);\n\n    this.bundleProgress = {\n      totalAssets,\n      loadedAssets,\n      failedAssets,\n      percentage,\n      estimatedTimeRemaining,\n    };\n\n    this.logger.debug('AssetBundle', 'updateProgress', 'Progress updated', {\n      bundleId: this.bundleId,\n      totalAssets,\n      loadedAssets,\n      failedAssets,\n      percentage,\n    });\n  }\n\n  /**\n   * Reset bundle progress (private helper method)\n   */\n  private resetProgress(): void {\n    this.bundleProgress = {\n      totalAssets: 0,\n      loadedAssets: 0,\n      failedAssets: 0,\n      percentage: 0,\n      estimatedTimeRemaining: 0,\n    };\n  }\n\n  /**\n   * Calculate estimated time remaining (private helper method)\n   */\n  private calculateEstimatedTimeRemaining(loadedAssets: number, totalAssets: number): number {\n    if (loadedAssets === 0 || totalAssets === 0) {\n      return 0;\n    }\n\n    // Simple estimation based on average load time\n    const averageLoadTime = 100; // 100ms average per asset\n    const remainingAssets = totalAssets - loadedAssets;\n\n    return remainingAssets * averageLoadTime;\n  }\n}\n","/**\n * AssetBundleFactory Class Implementation\n *\n * Concrete implementation of the IAssetBundleFactory interface.\n * Handles asset bundle creation, configuration, validation, and factory management.\n */\n\nimport type { IAssetBundleFactory } from '../interfaces/factories/IAssetBundleFactory';\nimport type { IAssetBundle } from '../interfaces/IAssetBundle';\nimport type { IAsset } from '../interfaces/IAsset';\nimport {\n  BundleFactoryConfig,\n  BundleFactoryStatistics,\n  BundleCreationOptions,\n} from '../interfaces/factories/IAssetBundleFactory';\nimport { BundleType, BundleConfig } from '../interfaces/IAssetBundle';\nimport { AssetPriority } from '../interfaces/IAsset';\nimport { AssetBundle } from './AssetBundle';\nimport { Logger } from '../../core/Logger';\n\n/**\n * Bundle type creator function type\n */\ntype BundleTypeCreator = (options: BundleCreationOptions) => Promise<IAssetBundle>;\n\n/**\n * Concrete AssetBundleFactory implementation\n */\nexport class AssetBundleFactory implements IAssetBundleFactory {\n  readonly bundleFactoryId: string;\n\n  bundleFactoryConfig: BundleFactoryConfig;\n  bundleFactoryStatistics: BundleFactoryStatistics;\n  bundleFactoryMetadata: Record<string, unknown>;\n\n  private readonly logger: Logger = Logger.getInstance();\n  private readonly bundleTypeCreators: Map<BundleType, BundleTypeCreator> = new Map();\n  private readonly creationTimes: number[] = [];\n\n  /**\n   * Constructor\n   */\n  constructor(bundleFactoryId: string, bundleFactoryConfig?: Partial<BundleFactoryConfig>) {\n    this.bundleFactoryId = bundleFactoryId;\n\n    // Initialize default configuration\n    this.bundleFactoryConfig = {\n      enableValidation: true,\n      enableCaching: true,\n      enablePooling: false,\n      defaultPriority: AssetPriority.NORMAL,\n      defaultPreload: true,\n      defaultCache: true,\n      maxBundleSize: 100 * 1024 * 1024, // 100MB default\n      metadata: {},\n      ...bundleFactoryConfig,\n    };\n\n    // Initialize statistics\n    this.bundleFactoryStatistics = {\n      totalCreated: 0,\n      createdByType: {} as Record<BundleType, number>,\n      totalCloned: 0,\n      totalConfigured: 0,\n      totalValidated: 0,\n      validationFailures: 0,\n      lastCreationTime: 0,\n    };\n\n    this.bundleFactoryMetadata = {};\n\n    // Initialize bundle type creators for all supported types\n    this.initializeDefaultBundleTypeCreators();\n\n    this.logger.debug(\n      'AssetBundleFactory',\n      'constructor',\n      `Bundle factory created: ${bundleFactoryId}`,\n      {\n        bundleFactoryId,\n        enableValidation: this.bundleFactoryConfig.enableValidation,\n        enableCaching: this.bundleFactoryConfig.enableCaching,\n        defaultPriority: this.bundleFactoryConfig.defaultPriority,\n        maxBundleSize: this.bundleFactoryConfig.maxBundleSize,\n      }\n    );\n  }\n\n  /**\n   * Set bundle factory configuration\n   */\n  setBundleFactoryConfig(config: BundleFactoryConfig): this {\n    this.bundleFactoryConfig = config;\n\n    this.logger.debug('AssetBundleFactory', 'setBundleFactoryConfig', 'Configuration updated', {\n      bundleFactoryId: this.bundleFactoryId,\n      enableValidation: config.enableValidation,\n      enableCaching: config.enableCaching,\n      defaultPriority: config.defaultPriority,\n      maxBundleSize: config.maxBundleSize,\n    });\n\n    return this;\n  }\n\n  /**\n   * Set bundle factory metadata\n   */\n  setBundleFactoryMetadata(metadata: Record<string, unknown>): this {\n    this.bundleFactoryMetadata = { ...this.bundleFactoryMetadata, ...metadata };\n\n    this.logger.debug('AssetBundleFactory', 'setBundleFactoryMetadata', 'Metadata updated', {\n      bundleFactoryId: this.bundleFactoryId,\n      metadataKeys: Object.keys(metadata),\n    });\n\n    return this;\n  }\n\n  /**\n   * Get bundle factory configuration\n   */\n  getBundleFactoryConfig(): BundleFactoryConfig {\n    return this.bundleFactoryConfig;\n  }\n\n  /**\n   * Get bundle factory statistics\n   */\n  getBundleFactoryStatistics(): BundleFactoryStatistics {\n    return this.bundleFactoryStatistics;\n  }\n\n  /**\n   * Get bundle factory metadata\n   */\n  getBundleFactoryMetadata(): Record<string, unknown> {\n    return this.bundleFactoryMetadata;\n  }\n\n  /**\n   * Create bundle\n   */\n  async createBundle(options: BundleCreationOptions): Promise<IAssetBundle> {\n    const startTime = Date.now();\n\n    try {\n      this.logger.info('AssetBundleFactory', 'createBundle', 'Creating bundle', {\n        bundleFactoryId: this.bundleFactoryId,\n        bundleType: options.bundleType,\n        bundleId: options.bundleId,\n        bundleName: options.bundleName,\n      });\n\n      // Validate bundle type is supported\n      if (!this.isBundleTypeSupported(options.bundleType)) {\n        throw new Error(`Unsupported bundle type: ${options.bundleType}`);\n      }\n\n      // Get bundle type creator\n      const creator = this.bundleTypeCreators.get(options.bundleType);\n      if (!creator) {\n        throw new Error(`No creator registered for bundle type: ${options.bundleType}`);\n      }\n\n      // Create bundle using registered creator\n      const bundle = await creator(options);\n\n      // Update statistics\n      this.updateCreationStatistics(options.bundleType, startTime);\n\n      this.logger.info('AssetBundleFactory', 'createBundle', 'Bundle created successfully', {\n        bundleFactoryId: this.bundleFactoryId,\n        bundleId: bundle.bundleId,\n        bundleType: bundle.bundleType,\n        creationTime: Date.now() - startTime,\n      });\n\n      return bundle;\n    } catch (error) {\n      this.bundleFactoryStatistics.validationFailures++;\n\n      this.logger.error('AssetBundleFactory', 'createBundle', 'Bundle creation failed', {\n        bundleFactoryId: this.bundleFactoryId,\n        bundleType: options.bundleType,\n        bundleId: options.bundleId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Create bundle from configuration\n   */\n  async createBundleFromConfig(config: BundleConfig): Promise<IAssetBundle> {\n    const startTime = Date.now();\n\n    try {\n      this.logger.info(\n        'AssetBundleFactory',\n        'createBundleFromConfig',\n        'Creating bundle from config',\n        {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleType: config.bundleType,\n          bundleId: config.bundleId,\n          bundleName: config.bundleName,\n        }\n      );\n\n      // Validate configuration if validation is enabled\n      if (this.bundleFactoryConfig.enableValidation) {\n        const isValid = await this.validateBundleConfig(config);\n        if (!isValid) {\n          throw new Error(`Invalid bundle configuration for ID: ${config.bundleId}`);\n        }\n      }\n\n      // Convert BundleConfig to BundleCreationOptions\n      const options: BundleCreationOptions = {\n        bundleType: config.bundleType,\n        bundleId: config.bundleId,\n        bundleName: config.bundleName,\n        priority: config.priority,\n        preload: config.preload,\n        cache: config.cache,\n        assets: [], // Will be populated by the creator\n        metadata: config.metadata,\n      };\n\n      // Create bundle using standard creation method\n      const bundle = await this.createBundle(options);\n\n      this.logger.info(\n        'AssetBundleFactory',\n        'createBundleFromConfig',\n        'Bundle created from config successfully',\n        {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleId: bundle.bundleId,\n          creationTime: Date.now() - startTime,\n        }\n      );\n\n      return bundle;\n    } catch (error) {\n      this.logger.error(\n        'AssetBundleFactory',\n        'createBundleFromConfig',\n        'Bundle creation from config failed',\n        {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleId: config.bundleId,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      throw error;\n    }\n  }\n\n  /**\n   * Clone bundle\n   */\n  async cloneBundle(bundle: IAssetBundle, newId?: string): Promise<IAssetBundle> {\n    const startTime = Date.now();\n\n    try {\n      this.logger.info('AssetBundleFactory', 'cloneBundle', 'Cloning bundle', {\n        bundleFactoryId: this.bundleFactoryId,\n        originalBundleId: bundle.bundleId,\n        newId,\n      });\n\n      // Clone the bundle\n      const clonedBundle = bundle.cloneBundle();\n\n      // Update statistics\n      this.bundleFactoryStatistics.totalCloned++;\n      this.bundleFactoryStatistics.lastCreationTime = Date.now();\n\n      this.logger.info('AssetBundleFactory', 'cloneBundle', 'Bundle cloned successfully', {\n        bundleFactoryId: this.bundleFactoryId,\n        originalBundleId: bundle.bundleId,\n        clonedBundleId: clonedBundle.bundleId,\n        cloneTime: Date.now() - startTime,\n      });\n\n      return clonedBundle;\n    } catch (error) {\n      this.logger.error('AssetBundleFactory', 'cloneBundle', 'Bundle cloning failed', {\n        bundleFactoryId: this.bundleFactoryId,\n        originalBundleId: bundle.bundleId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Configure bundle\n   */\n  async configureBundle(\n    bundle: IAssetBundle,\n    config: Partial<BundleConfig>\n  ): Promise<IAssetBundle> {\n    try {\n      this.logger.info('AssetBundleFactory', 'configureBundle', 'Configuring bundle', {\n        bundleFactoryId: this.bundleFactoryId,\n        bundleId: bundle.bundleId,\n        configKeys: Object.keys(config),\n      });\n\n      // Update bundle configuration\n      const currentConfig = bundle.getBundleConfig();\n      const newConfig: BundleConfig = {\n        ...currentConfig,\n        ...config,\n      };\n\n      // Validate new configuration if validation is enabled\n      if (this.bundleFactoryConfig.enableValidation) {\n        const isValid = await this.validateBundleConfig(newConfig);\n        if (!isValid) {\n          throw new Error(`Invalid bundle configuration for ID: ${bundle.bundleId}`);\n        }\n      }\n\n      // Apply new configuration\n      bundle.setBundleConfig(newConfig);\n\n      // Update statistics\n      this.bundleFactoryStatistics.totalConfigured++;\n\n      this.logger.info('AssetBundleFactory', 'configureBundle', 'Bundle configured successfully', {\n        bundleFactoryId: this.bundleFactoryId,\n        bundleId: bundle.bundleId,\n      });\n\n      return bundle;\n    } catch (error) {\n      this.logger.error('AssetBundleFactory', 'configureBundle', 'Bundle configuration failed', {\n        bundleFactoryId: this.bundleFactoryId,\n        bundleId: bundle.bundleId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Validate bundle configuration\n   */\n  async validateBundleConfig(config: BundleConfig): Promise<boolean> {\n    try {\n      this.logger.debug('AssetBundleFactory', 'validateBundleConfig', 'Validating bundle config', {\n        bundleFactoryId: this.bundleFactoryId,\n        bundleId: config.bundleId,\n        bundleType: config.bundleType,\n      });\n\n      // Basic validation checks\n      if (!config.bundleId || typeof config.bundleId !== 'string') {\n        this.logger.warn('AssetBundleFactory', 'validateBundleConfig', 'Invalid bundle ID', {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleId: config.bundleId,\n        });\n        this.bundleFactoryStatistics.validationFailures++;\n        return false;\n      }\n\n      if (!config.bundleName || typeof config.bundleName !== 'string') {\n        this.logger.warn('AssetBundleFactory', 'validateBundleConfig', 'Invalid bundle name', {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleName: config.bundleName,\n        });\n        this.bundleFactoryStatistics.validationFailures++;\n        return false;\n      }\n\n      if (!Object.values(BundleType).includes(config.bundleType)) {\n        this.logger.warn('AssetBundleFactory', 'validateBundleConfig', 'Invalid bundle type', {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleType: config.bundleType,\n        });\n        this.bundleFactoryStatistics.validationFailures++;\n        return false;\n      }\n\n      if (!Object.values(AssetPriority).includes(config.priority)) {\n        this.logger.warn('AssetBundleFactory', 'validateBundleConfig', 'Invalid bundle priority', {\n          bundleFactoryId: this.bundleFactoryId,\n          priority: config.priority,\n        });\n        this.bundleFactoryStatistics.validationFailures++;\n        return false;\n      }\n\n      if (typeof config.preload !== 'boolean') {\n        this.logger.warn('AssetBundleFactory', 'validateBundleConfig', 'Invalid preload value', {\n          bundleFactoryId: this.bundleFactoryId,\n          preload: config.preload,\n        });\n        this.bundleFactoryStatistics.validationFailures++;\n        return false;\n      }\n\n      if (typeof config.cache !== 'boolean') {\n        this.logger.warn('AssetBundleFactory', 'validateBundleConfig', 'Invalid cache value', {\n          bundleFactoryId: this.bundleFactoryId,\n          cache: config.cache,\n        });\n        this.bundleFactoryStatistics.validationFailures++;\n        return false;\n      }\n\n      // Update statistics\n      this.bundleFactoryStatistics.totalValidated++;\n\n      this.logger.debug(\n        'AssetBundleFactory',\n        'validateBundleConfig',\n        'Bundle config validation passed',\n        {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleId: config.bundleId,\n        }\n      );\n\n      return true;\n    } catch (error) {\n      this.bundleFactoryStatistics.validationFailures++;\n\n      this.logger.error(\n        'AssetBundleFactory',\n        'validateBundleConfig',\n        'Bundle config validation failed',\n        {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleId: config.bundleId,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      return false;\n    }\n  }\n\n  /**\n   * Register bundle type creator\n   */\n  registerBundleTypeCreator(bundleType: BundleType, creator: BundleTypeCreator): this {\n    this.bundleTypeCreators.set(bundleType, creator);\n\n    this.logger.debug(\n      'AssetBundleFactory',\n      'registerBundleTypeCreator',\n      'Bundle type creator registered',\n      {\n        bundleFactoryId: this.bundleFactoryId,\n        bundleType,\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Unregister bundle type creator\n   */\n  unregisterBundleTypeCreator(bundleType: BundleType): this {\n    const removed = this.bundleTypeCreators.delete(bundleType);\n\n    if (removed) {\n      this.logger.debug(\n        'AssetBundleFactory',\n        'unregisterBundleTypeCreator',\n        'Bundle type creator unregistered',\n        {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleType,\n        }\n      );\n    } else {\n      this.logger.warn(\n        'AssetBundleFactory',\n        'unregisterBundleTypeCreator',\n        'Bundle type creator not found',\n        {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleType,\n        }\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Check if bundle type is supported\n   */\n  isBundleTypeSupported(bundleType: BundleType): boolean {\n    return this.bundleTypeCreators.has(bundleType);\n  }\n\n  /**\n   * Get supported bundle types\n   */\n  getSupportedBundleTypes(): BundleType[] {\n    return Array.from(this.bundleTypeCreators.keys());\n  }\n\n  /**\n   * Get bundle type creator\n   */\n  getBundleTypeCreator(bundleType: BundleType): BundleTypeCreator | null {\n    return this.bundleTypeCreators.get(bundleType) || null;\n  }\n\n  /**\n   * Create multiple bundles\n   */\n  async createBundles(options: BundleCreationOptions[]): Promise<IAssetBundle[]> {\n    this.logger.info('AssetBundleFactory', 'createBundles', 'Creating multiple bundles', {\n      bundleFactoryId: this.bundleFactoryId,\n      count: options.length,\n    });\n\n    const creationPromises = options.map(option => this.createBundle(option));\n    const bundles = await Promise.allSettled(creationPromises);\n\n    const successfulBundles: IAssetBundle[] = [];\n    const failedCreations: number = bundles.filter(result => result.status === 'rejected').length;\n\n    for (const result of bundles) {\n      if (result.status === 'fulfilled') {\n        successfulBundles.push(result.value);\n      }\n    }\n\n    this.logger.info('AssetBundleFactory', 'createBundles', 'Multiple bundles creation completed', {\n      bundleFactoryId: this.bundleFactoryId,\n      total: options.length,\n      successful: successfulBundles.length,\n      failed: failedCreations,\n    });\n\n    return successfulBundles;\n  }\n\n  /**\n   * Create bundles from configurations\n   */\n  async createBundlesFromConfigs(configs: BundleConfig[]): Promise<IAssetBundle[]> {\n    this.logger.info(\n      'AssetBundleFactory',\n      'createBundlesFromConfigs',\n      'Creating multiple bundles from configs',\n      {\n        bundleFactoryId: this.bundleFactoryId,\n        count: configs.length,\n      }\n    );\n\n    const creationPromises = configs.map(config => this.createBundleFromConfig(config));\n    const bundles = await Promise.allSettled(creationPromises);\n\n    const successfulBundles: IAssetBundle[] = [];\n    const failedCreations: number = bundles.filter(result => result.status === 'rejected').length;\n\n    for (const result of bundles) {\n      if (result.status === 'fulfilled') {\n        successfulBundles.push(result.value);\n      }\n    }\n\n    this.logger.info(\n      'AssetBundleFactory',\n      'createBundlesFromConfigs',\n      'Multiple bundles creation from configs completed',\n      {\n        bundleFactoryId: this.bundleFactoryId,\n        total: configs.length,\n        successful: successfulBundles.length,\n        failed: failedCreations,\n      }\n    );\n\n    return successfulBundles;\n  }\n\n  /**\n   * Create bundle from assets\n   */\n  async createBundleFromAssets(\n    assets: IAsset[],\n    bundleType: BundleType,\n    bundleId: string,\n    bundleName: string\n  ): Promise<IAssetBundle> {\n    const startTime = Date.now();\n\n    try {\n      this.logger.info(\n        'AssetBundleFactory',\n        'createBundleFromAssets',\n        'Creating bundle from assets',\n        {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleType,\n          bundleId,\n          bundleName,\n          assetCount: assets.length,\n        }\n      );\n\n      // Create bundle options\n      const options: BundleCreationOptions = {\n        bundleType,\n        bundleId,\n        bundleName,\n        priority: this.bundleFactoryConfig.defaultPriority,\n        preload: this.bundleFactoryConfig.defaultPreload,\n        cache: this.bundleFactoryConfig.defaultCache,\n        assets,\n        metadata: {},\n      };\n\n      // Create bundle\n      const bundle = await this.createBundle(options);\n\n      // Add all assets to the bundle\n      for (const asset of assets) {\n        bundle.addAsset(asset);\n      }\n\n      this.logger.info(\n        'AssetBundleFactory',\n        'createBundleFromAssets',\n        'Bundle created from assets successfully',\n        {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleId: bundle.bundleId,\n          assetCount: assets.length,\n          creationTime: Date.now() - startTime,\n        }\n      );\n\n      return bundle;\n    } catch (error) {\n      this.logger.error(\n        'AssetBundleFactory',\n        'createBundleFromAssets',\n        'Bundle creation from assets failed',\n        {\n          bundleFactoryId: this.bundleFactoryId,\n          bundleId,\n          assetCount: assets.length,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      throw error;\n    }\n  }\n\n  /**\n   * Get creation statistics\n   */\n  getCreationStatistics(): {\n    totalCreated: number;\n    successRate: number;\n    averageCreationTime: number;\n    mostCreatedType: BundleType;\n  } {\n    const totalCreated = this.bundleFactoryStatistics.totalCreated;\n    const totalAttempts = totalCreated + this.bundleFactoryStatistics.validationFailures;\n    const successRate = totalAttempts > 0 ? (totalCreated / totalAttempts) * 100 : 100;\n\n    const averageCreationTime =\n      this.creationTimes.length > 0\n        ? this.creationTimes.reduce((sum, time) => sum + time, 0) / this.creationTimes.length\n        : 0;\n\n    const mostCreatedType = this.getMostCreatedBundleType();\n\n    return {\n      totalCreated,\n      successRate,\n      averageCreationTime,\n      mostCreatedType,\n    };\n  }\n\n  /**\n   * Clear bundle factory\n   */\n  clearBundleFactory(): this {\n    this.logger.info('AssetBundleFactory', 'clearBundleFactory', 'Clearing bundle factory', {\n      bundleFactoryId: this.bundleFactoryId,\n    });\n\n    // Reset statistics\n    this.bundleFactoryStatistics = {\n      totalCreated: 0,\n      createdByType: {} as Record<BundleType, number>,\n      totalCloned: 0,\n      totalConfigured: 0,\n      totalValidated: 0,\n      validationFailures: 0,\n      lastCreationTime: 0,\n    };\n\n    // Clear creation times\n    this.creationTimes.length = 0;\n\n    // Clear metadata\n    this.bundleFactoryMetadata = {};\n\n    this.logger.info('AssetBundleFactory', 'clearBundleFactory', 'Bundle factory cleared', {\n      bundleFactoryId: this.bundleFactoryId,\n    });\n\n    return this;\n  }\n\n  /**\n   * Update bundle factory\n   */\n  updateBundleFactory(deltaTime: number): void {\n    // This method can be used for periodic factory maintenance\n    // For now, we'll just log the update\n    this.logger.debug('AssetBundleFactory', 'updateBundleFactory', 'Bundle factory updated', {\n      bundleFactoryId: this.bundleFactoryId,\n      deltaTime,\n    });\n  }\n\n  /**\n   * Initialize default bundle type creators (private helper method)\n   */\n  private initializeDefaultBundleTypeCreators(): void {\n    // Register default creator for all bundle types\n    const bundleTypes = Object.values(BundleType);\n\n    for (const bundleType of bundleTypes) {\n      this.registerBundleTypeCreator(bundleType, this.createDefaultBundle.bind(this));\n    }\n\n    this.logger.debug(\n      'AssetBundleFactory',\n      'initializeDefaultBundleTypeCreators',\n      'Default bundle type creators initialized',\n      {\n        bundleFactoryId: this.bundleFactoryId,\n        supportedTypes: bundleTypes.length,\n      }\n    );\n  }\n\n  /**\n   * Create default bundle (private helper method)\n   */\n  private async createDefaultBundle(options: BundleCreationOptions): Promise<IAssetBundle> {\n    const bundleConfig: BundleConfig = {\n      bundleId: options.bundleId,\n      bundleName: options.bundleName,\n      bundleType: options.bundleType,\n      priority: options.priority || this.bundleFactoryConfig.defaultPriority,\n      preload:\n        options.preload !== undefined ? options.preload : this.bundleFactoryConfig.defaultPreload,\n      cache: options.cache !== undefined ? options.cache : this.bundleFactoryConfig.defaultCache,\n      metadata: options.metadata || {},\n    };\n\n    return new AssetBundle(options.bundleId, options.bundleType, bundleConfig);\n  }\n\n  /**\n   * Update creation statistics (private helper method)\n   */\n  private updateCreationStatistics(bundleType: BundleType, startTime: number): void {\n    const creationTime = Date.now() - startTime;\n\n    this.bundleFactoryStatistics.totalCreated++;\n    this.bundleFactoryStatistics.createdByType[bundleType] =\n      (this.bundleFactoryStatistics.createdByType[bundleType] || 0) + 1;\n    this.bundleFactoryStatistics.lastCreationTime = Date.now();\n\n    // Keep only last 100 creation times for average calculation\n    this.creationTimes.push(creationTime);\n    if (this.creationTimes.length > 100) {\n      this.creationTimes.shift();\n    }\n  }\n\n  /**\n   * Get most created bundle type (private helper method)\n   */\n  private getMostCreatedBundleType(): BundleType {\n    let mostCreatedType = BundleType.SCENE;\n    let maxCount = 0;\n\n    for (const [bundleType, count] of Object.entries(this.bundleFactoryStatistics.createdByType)) {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCreatedType = bundleType as BundleType;\n      }\n    }\n\n    return mostCreatedType;\n  }\n}\n","/**\n * Asset Manager\n *\n * Main orchestrator for asset loading and management. Coordinates between factories,\n * loaders, and sub-managers to provide comprehensive asset lifecycle management.\n */\n\nimport { Logger } from '../../core/Logger';\nimport type {\n  IAssetManager,\n  AssetManagerConfig,\n  AssetManagerStatistics,\n  AssetLoadingOptions,\n  BundleLoadingOptions,\n} from '../interfaces/IAssetManager';\nimport type { IAsset } from '../interfaces/IAsset';\nimport type { IAssetBundle } from '../interfaces/IAssetBundle';\nimport type { IAssetFactory } from '../interfaces/factories/IAssetFactory';\nimport type { IAssetBundleFactory } from '../interfaces/factories/IAssetBundleFactory';\nimport type { IAssetCacheManager } from '../interfaces/managers/IAssetCacheManager';\nimport type { IAssetPoolManager } from '../interfaces/managers/IAssetPoolManager';\nimport type { IAssetValidationManager } from '../interfaces/managers/IAssetValidationManager';\nimport type { IAssetStatisticsManager } from '../interfaces/managers/IAssetStatisticsManager';\nimport { AssetType, AssetPriority, AssetState } from '../interfaces/IAsset';\nimport { BundleType, BundleState } from '../interfaces/IAssetBundle';\nimport { AssetFactory } from './AssetFactory';\nimport { AssetBundleFactory } from './AssetBundleFactory';\n\n/**\n * Asset Manager implementation\n */\nexport class AssetManager implements IAssetManager {\n  private readonly logger: Logger = Logger.getInstance();\n\n  public readonly managerId: string;\n  public managerConfig: AssetManagerConfig;\n  public assetFactory!: IAssetFactory;\n  public bundleFactory!: IAssetBundleFactory;\n  public cacheManager!: IAssetCacheManager;\n  public poolManager!: IAssetPoolManager;\n  public validationManager!: IAssetValidationManager;\n  public statisticsManager!: IAssetStatisticsManager;\n  public managerMetadata: Record<string, unknown> = {};\n\n  private managedAssets: Map<string, IAsset> = new Map();\n  private assetBundles: Map<string, IAssetBundle> = new Map();\n\n  constructor(managerId: string, managerConfig?: Partial<AssetManagerConfig>) {\n    this.managerId = managerId;\n\n    // Set default manager configuration\n    this.managerConfig = {\n      enableCaching: true,\n      enablePooling: true,\n      enableValidation: true,\n      enableStatistics: true,\n      maxCacheSize: 100 * 1024 * 1024, // 100MB\n      maxPoolSize: 50,\n      defaultTimeout: 30000,\n      retryAttempts: 3,\n      retryDelay: 1000,\n      metadata: {},\n      ...managerConfig,\n    };\n\n    // Initialize sub-managers with default implementations\n    this.initializeSubManagers();\n\n    this.logger.info('AssetManager', 'constructor', 'Asset manager created', {\n      managerId: this.managerId,\n      managerConfig: this.managerConfig,\n    });\n  }\n\n  /**\n   * Initialize sub-managers with default implementations\n   */\n  private initializeSubManagers(): void {\n    // Initialize with default implementations\n    this.assetFactory = new AssetFactory('default-asset-factory');\n    this.bundleFactory = new AssetBundleFactory('default-bundle-factory');\n\n    // Initialize other managers with mock implementations for now\n    this.cacheManager = {\n      cacheId: 'default-cache-manager',\n      cacheConfig: { maxSize: this.managerConfig.maxCacheSize },\n      cacheMetadata: {},\n      getCacheSize: () => 0,\n      getCacheHitRate: () => 0,\n      clearCache: () => {},\n      isCached: () => false,\n      getCachedAsset: () => undefined,\n      cacheAsset: () => {},\n      removeCachedAsset: () => {},\n    } as unknown as IAssetCacheManager;\n\n    this.poolManager = {\n      poolId: 'default-pool-manager',\n      poolConfig: { maxSize: this.managerConfig.maxPoolSize },\n      poolMetadata: {},\n      getPoolSize: () => 0,\n      getPooledAsset: () => undefined,\n      poolAsset: () => {},\n      removePooledAsset: () => {},\n      clearPool: () => {},\n    } as unknown as IAssetPoolManager;\n\n    this.validationManager = {\n      validationId: 'default-validation-manager',\n      validationConfig: { strictMode: true },\n      validationMetadata: {},\n      validateAssetConfig: (config: any) => {\n        // Basic validation - check required fields\n        return !!(config && config.key && config.path && config.type);\n      },\n      validateBundleConfig: (config: any) => {\n        // Basic validation - check required fields\n        return !!(\n          config &&\n          config.bundleId &&\n          config.bundleType &&\n          Array.isArray(config.assetKeys)\n        );\n      },\n      validateAsset: () => true,\n      validateBundle: () => true,\n      getValidationErrors: () => [],\n      clearValidationErrors: () => {},\n    } as unknown as IAssetValidationManager;\n\n    this.statisticsManager = {\n      statisticsId: 'default-statistics-manager',\n      statisticsConfig: { enableTracking: true },\n      statisticsMetadata: {},\n      getStatistics: () => ({\n        totalAssets: 0,\n        loadedAssets: 0,\n        failedAssets: 0,\n        totalBundles: 0,\n        loadedBundles: 0,\n        failedBundles: 0,\n        totalLoadTime: 0,\n        averageLoadTime: 0,\n        cacheHitRate: 0,\n        successRate: 0,\n      }),\n      updateStatistics: () => {},\n      resetStatistics: () => {},\n    } as unknown as IAssetStatisticsManager;\n  }\n\n  /**\n   * Set manager configuration\n   */\n  setManagerConfig(config: AssetManagerConfig): this {\n    this.managerConfig = { ...this.managerConfig, ...config };\n    this.logger.debug('AssetManager', 'setManagerConfig', 'Manager configuration updated', {\n      managerId: this.managerId,\n      config: this.managerConfig,\n    });\n    return this;\n  }\n\n  /**\n   * Set asset factory\n   */\n  setAssetFactory(factory: IAssetFactory): this {\n    this.assetFactory = factory;\n    this.logger.debug('AssetManager', 'setAssetFactory', 'Asset factory set', {\n      managerId: this.managerId,\n      factoryId: factory.factoryId,\n    });\n    return this;\n  }\n\n  /**\n   * Set bundle factory\n   */\n  setBundleFactory(factory: IAssetBundleFactory): this {\n    this.bundleFactory = factory;\n    this.logger.debug('AssetManager', 'setBundleFactory', 'Bundle factory set', {\n      managerId: this.managerId,\n      bundleFactoryId: factory.bundleFactoryId,\n    });\n    return this;\n  }\n\n  /**\n   * Set cache manager\n   */\n  setCacheManager(manager: IAssetCacheManager): this {\n    this.cacheManager = manager;\n    this.logger.debug('AssetManager', 'setCacheManager', 'Cache manager set', {\n      managerId: this.managerId,\n      cacheManagerId: manager.cacheManagerId,\n    });\n    return this;\n  }\n\n  /**\n   * Set pool manager\n   */\n  setPoolManager(manager: IAssetPoolManager): this {\n    this.poolManager = manager;\n    this.logger.debug('AssetManager', 'setPoolManager', 'Pool manager set', {\n      managerId: this.managerId,\n      poolManagerId: manager.poolManagerId,\n    });\n    return this;\n  }\n\n  /**\n   * Set validation manager\n   */\n  setValidationManager(manager: IAssetValidationManager): this {\n    this.validationManager = manager;\n    this.logger.debug('AssetManager', 'setValidationManager', 'Validation manager set', {\n      managerId: this.managerId,\n      validationManagerId: manager.validationManagerId,\n    });\n    return this;\n  }\n\n  /**\n   * Set statistics manager\n   */\n  setStatisticsManager(manager: IAssetStatisticsManager): this {\n    this.statisticsManager = manager;\n    this.logger.debug('AssetManager', 'setStatisticsManager', 'Statistics manager set', {\n      managerId: this.managerId,\n      statisticsManagerId: manager.statisticsManagerId,\n    });\n    return this;\n  }\n\n  /**\n   * Set manager metadata\n   */\n  setManagerMetadata(metadata: Record<string, unknown>): this {\n    this.managerMetadata = { ...this.managerMetadata, ...metadata };\n    this.logger.debug('AssetManager', 'setManagerMetadata', 'Manager metadata updated', {\n      managerId: this.managerId,\n      metadata: this.managerMetadata,\n    });\n    return this;\n  }\n\n  /**\n   * Get manager configuration\n   */\n  getManagerConfig(): AssetManagerConfig {\n    return { ...this.managerConfig };\n  }\n\n  /**\n   * Get asset factory\n   */\n  getAssetFactory(): IAssetFactory {\n    return this.assetFactory;\n  }\n\n  /**\n   * Get bundle factory\n   */\n  getBundleFactory(): IAssetBundleFactory {\n    return this.bundleFactory;\n  }\n\n  /**\n   * Get cache manager\n   */\n  getCacheManager(): IAssetCacheManager {\n    return this.cacheManager;\n  }\n\n  /**\n   * Get pool manager\n   */\n  getPoolManager(): IAssetPoolManager {\n    return this.poolManager;\n  }\n\n  /**\n   * Get validation manager\n   */\n  getValidationManager(): IAssetValidationManager {\n    return this.validationManager;\n  }\n\n  /**\n   * Get statistics manager\n   */\n  getStatisticsManager(): IAssetStatisticsManager {\n    return this.statisticsManager;\n  }\n\n  /**\n   * Get manager metadata\n   */\n  getManagerMetadata(): Record<string, unknown> {\n    return { ...this.managerMetadata };\n  }\n\n  /**\n   * Load asset\n   */\n  async loadAsset(assetKey: string, _options?: AssetLoadingOptions): Promise<IAsset | null> {\n    try {\n      const asset = this.managedAssets.get(assetKey);\n      if (!asset) {\n        this.logger.warn('AssetManager', 'loadAsset', 'Asset not found', {\n          managerId: this.managerId,\n          assetKey,\n        });\n        return null;\n      }\n\n      // Check if already loaded\n      if (asset.isAssetLoaded()) {\n        return asset;\n      }\n\n      // Load the asset\n      await asset.loadAsset();\n\n      if (asset.isAssetLoaded()) {\n        this.logger.info('AssetManager', 'loadAsset', 'Asset loaded successfully', {\n          managerId: this.managerId,\n          assetKey,\n          assetType: asset.assetType,\n          assetSize: asset.assetSize,\n        });\n      } else {\n        this.logger.error('AssetManager', 'loadAsset', 'Asset loading failed', {\n          managerId: this.managerId,\n          assetKey,\n          assetType: asset.assetType,\n        });\n      }\n\n      return asset;\n    } catch (error) {\n      this.logger.error('AssetManager', 'loadAsset', 'Asset loading error', {\n        managerId: this.managerId,\n        assetKey,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Load assets by type\n   */\n  async loadAssetsByType(assetType: AssetType, options?: AssetLoadingOptions): Promise<IAsset[]> {\n    const assets = Array.from(this.managedAssets.values()).filter(\n      asset => asset.assetType === assetType\n    );\n    const loadedAssets: IAsset[] = [];\n\n    for (const asset of assets) {\n      const loadedAsset = await this.loadAsset(asset.assetKey, options);\n      if (loadedAsset) {\n        loadedAssets.push(loadedAsset);\n      }\n    }\n\n    return loadedAssets;\n  }\n\n  /**\n   * Load assets by priority\n   */\n  async loadAssetsByPriority(\n    priority: AssetPriority,\n    options?: AssetLoadingOptions\n  ): Promise<IAsset[]> {\n    const assets = Array.from(this.managedAssets.values()).filter(\n      asset => asset.assetConfig.priority === priority\n    );\n    const loadedAssets: IAsset[] = [];\n\n    for (const asset of assets) {\n      const loadedAsset = await this.loadAsset(asset.assetKey, options);\n      if (loadedAsset) {\n        loadedAssets.push(loadedAsset);\n      }\n    }\n\n    return loadedAssets;\n  }\n\n  /**\n   * Load bundle\n   */\n  async loadBundle(\n    bundleId: string,\n    _options?: BundleLoadingOptions\n  ): Promise<IAssetBundle | null> {\n    try {\n      const bundle = this.assetBundles.get(bundleId);\n      if (!bundle) {\n        this.logger.warn('AssetManager', 'loadBundle', 'Bundle not found', {\n          managerId: this.managerId,\n          bundleId,\n        });\n        return null;\n      }\n\n      // Check if already loaded\n      if (bundle.isBundleLoaded()) {\n        return bundle;\n      }\n\n      // Load the bundle\n      await bundle.loadBundle();\n\n      if (bundle.isBundleLoaded()) {\n        this.logger.info('AssetManager', 'loadBundle', 'Bundle loaded successfully', {\n          managerId: this.managerId,\n          bundleId,\n          bundleType: bundle.bundleType,\n        });\n      } else {\n        this.logger.error('AssetManager', 'loadBundle', 'Bundle loading failed', {\n          managerId: this.managerId,\n          bundleId,\n          bundleType: bundle.bundleType,\n        });\n      }\n\n      return bundle;\n    } catch (error) {\n      this.logger.error('AssetManager', 'loadBundle', 'Bundle loading error', {\n        managerId: this.managerId,\n        bundleId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Load bundles by type\n   */\n  async loadBundlesByType(\n    bundleType: BundleType,\n    options?: BundleLoadingOptions\n  ): Promise<IAssetBundle[]> {\n    const bundles = Array.from(this.assetBundles.values()).filter(\n      bundle => bundle.bundleType === bundleType\n    );\n    const loadedBundles: IAssetBundle[] = [];\n\n    for (const bundle of bundles) {\n      const loadedBundle = await this.loadBundle(bundle.bundleId, options);\n      if (loadedBundle) {\n        loadedBundles.push(loadedBundle);\n      }\n    }\n\n    return loadedBundles;\n  }\n\n  /**\n   * Unload asset\n   */\n  async unloadAsset(assetKey: string): Promise<boolean> {\n    try {\n      const asset = this.managedAssets.get(assetKey);\n      if (!asset) {\n        return false;\n      }\n\n      // Unload the asset\n      await asset.unloadAsset();\n\n      if (asset.assetState === AssetState.PENDING) {\n        this.logger.info('AssetManager', 'unloadAsset', 'Asset unloaded successfully', {\n          managerId: this.managerId,\n          assetKey,\n        });\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      this.logger.error('AssetManager', 'unloadAsset', 'Asset unloading error', {\n        managerId: this.managerId,\n        assetKey,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Unload bundle\n   */\n  async unloadBundle(bundleId: string): Promise<boolean> {\n    try {\n      const bundle = this.assetBundles.get(bundleId);\n      if (!bundle) {\n        return false;\n      }\n\n      // Unload the bundle\n      await bundle.unloadBundle();\n\n      if (bundle.bundleState === BundleState.PENDING) {\n        this.logger.info('AssetManager', 'unloadBundle', 'Bundle unloaded successfully', {\n          managerId: this.managerId,\n          bundleId,\n        });\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      this.logger.error('AssetManager', 'unloadBundle', 'Bundle unloading error', {\n        managerId: this.managerId,\n        bundleId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Get asset\n   */\n  getAsset(assetKey: string): IAsset | null {\n    return this.managedAssets.get(assetKey) || null;\n  }\n\n  /**\n   * Register asset\n   */\n  registerAsset(asset: IAsset): this {\n    this.managedAssets.set(asset.assetKey, asset);\n    this.logger.debug('AssetManager', 'registerAsset', 'Asset registered', {\n      managerId: this.managerId,\n      assetKey: asset.assetKey,\n      assetType: asset.assetType,\n    });\n    return this;\n  }\n\n  /**\n   * Unregister asset\n   */\n  unregisterAsset(assetKey: string): this {\n    const removed = this.managedAssets.delete(assetKey);\n    if (removed) {\n      this.logger.debug('AssetManager', 'unregisterAsset', 'Asset unregistered', {\n        managerId: this.managerId,\n        assetKey,\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Get bundle\n   */\n  getBundle(bundleId: string): IAssetBundle | null {\n    return this.assetBundles.get(bundleId) || null;\n  }\n\n  /**\n   * Get all assets\n   */\n  getAllAssets(): IAsset[] {\n    return Array.from(this.managedAssets.values());\n  }\n\n  /**\n   * Get all bundles\n   */\n  getAllBundles(): IAssetBundle[] {\n    return Array.from(this.assetBundles.values());\n  }\n\n  /**\n   * Get assets by type\n   */\n  getAssetsByType(assetType: AssetType): IAsset[] {\n    return Array.from(this.managedAssets.values()).filter(asset => asset.assetType === assetType);\n  }\n\n  /**\n   * Get assets by priority\n   */\n  getAssetsByPriority(priority: AssetPriority): IAsset[] {\n    return Array.from(this.managedAssets.values()).filter(\n      asset => asset.assetConfig.priority === priority\n    );\n  }\n\n  /**\n   * Get bundles by type\n   */\n  getBundlesByType(bundleType: BundleType): IAssetBundle[] {\n    return Array.from(this.assetBundles.values()).filter(\n      bundle => bundle.bundleType === bundleType\n    );\n  }\n\n  /**\n   * Check if asset is loaded\n   */\n  isAssetLoaded(assetKey: string): boolean {\n    const asset = this.managedAssets.get(assetKey);\n    return asset ? asset.assetState === AssetState.LOADED : false;\n  }\n\n  /**\n   * Check if bundle is loaded\n   */\n  isBundleLoaded(bundleId: string): boolean {\n    const bundle = this.assetBundles.get(bundleId);\n    return bundle ? bundle.bundleState === BundleState.LOADED : false;\n  }\n\n  /**\n   * Check if asset is cached\n   */\n  isAssetCached(assetKey: string): boolean {\n    const asset = this.managedAssets.get(assetKey);\n    return asset ? asset.assetState === AssetState.CACHED : false;\n  }\n\n  /**\n   * Check if bundle is cached\n   */\n  isBundleCached(bundleId: string): boolean {\n    // BundleState doesn't have CACHED state, so we'll check if it's loaded\n    const bundle = this.assetBundles.get(bundleId);\n    return bundle ? bundle.bundleState === BundleState.LOADED : false;\n  }\n\n  /**\n   * Validate asset\n   */\n  validateAsset(asset: IAsset): boolean {\n    if (!this.managerConfig.enableValidation || !this.validationManager) {\n      return true;\n    }\n\n    try {\n      // Since validateAsset returns a Promise, we need to handle it synchronously\n      // For now, we'll return true and let the validation happen asynchronously\n      this.validationManager.validateAsset(asset);\n      return true;\n    } catch (error) {\n      this.logger.error('AssetManager', 'validateAsset', 'Asset validation error', {\n        managerId: this.managerId,\n        assetKey: asset.assetKey,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Validate bundle\n   */\n  validateBundle(bundle: IAssetBundle): boolean {\n    if (!this.managerConfig.enableValidation || !this.validationManager) {\n      return true;\n    }\n\n    try {\n      // Since validateBundle returns a Promise, we need to handle it synchronously\n      // For now, we'll return true and let the validation happen asynchronously\n      this.validationManager.validateBundle(bundle);\n      return true;\n    } catch (error) {\n      this.logger.error('AssetManager', 'validateBundle', 'Bundle validation error', {\n        managerId: this.managerId,\n        bundleId: bundle.bundleId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Validate asset configuration\n   */\n  validateAssetConfig(assetConfig: any): boolean {\n    if (!this.managerConfig.enableValidation) {\n      return true;\n    }\n\n    try {\n      // Basic validation - check required fields\n      return !!(assetConfig && assetConfig.key && assetConfig.path && assetConfig.type);\n    } catch (error) {\n      this.logger.error('AssetManager', 'validateAssetConfig', 'Asset config validation error', {\n        managerId: this.managerId,\n        assetConfig,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Validate bundle configuration\n   */\n  validateBundleConfig(bundleConfig: any): boolean {\n    if (!this.managerConfig.enableValidation) {\n      return true;\n    }\n\n    try {\n      // Basic validation - check required fields\n      return !!(\n        bundleConfig &&\n        bundleConfig.bundleId &&\n        bundleConfig.bundleType &&\n        Array.isArray(bundleConfig.assetKeys)\n      );\n    } catch (error) {\n      this.logger.error('AssetManager', 'validateBundleConfig', 'Bundle config validation error', {\n        managerId: this.managerId,\n        bundleConfig,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Get manager statistics\n   */\n  getManagerStatistics(): AssetManagerStatistics {\n    const totalAssets = this.managedAssets.size;\n    const loadedAssets = Array.from(this.managedAssets.values()).filter(\n      asset => asset.assetState === AssetState.LOADED\n    ).length;\n    const failedAssets = Array.from(this.managedAssets.values()).filter(\n      asset => asset.assetState === AssetState.FAILED\n    ).length;\n    const cachedAssets = Array.from(this.managedAssets.values()).filter(\n      asset => asset.assetState === AssetState.CACHED\n    ).length;\n\n    const totalBundles = this.assetBundles.size;\n    const loadedBundles = Array.from(this.assetBundles.values()).filter(\n      bundle => bundle.bundleState === BundleState.LOADED\n    ).length;\n    const failedBundles = Array.from(this.assetBundles.values()).filter(\n      bundle => bundle.bundleState === BundleState.FAILED\n    ).length;\n    const cachedBundles = Array.from(this.assetBundles.values()).filter(\n      bundle => bundle.bundleState === BundleState.LOADED\n    ).length;\n\n    const totalLoadTime = Array.from(this.managedAssets.values()).reduce(\n      (sum, asset) => sum + asset.assetLoadTime,\n      0\n    );\n    const averageLoadTime = totalAssets > 0 ? totalLoadTime / totalAssets : 0;\n\n    const successRate = totalAssets > 0 ? (loadedAssets / totalAssets) * 100 : 0;\n    const cacheHitRate = totalAssets > 0 ? (cachedAssets / totalAssets) * 100 : 0;\n\n    return {\n      totalAssets,\n      loadedAssets,\n      failedAssets,\n      cachedAssets,\n      totalBundles,\n      loadedBundles,\n      failedBundles,\n      cachedBundles,\n      totalLoadTime,\n      averageLoadTime,\n      cacheHitRate,\n      successRate,\n      lastUpdateTime: Date.now(),\n    };\n  }\n\n  /**\n   * Clear manager\n   */\n  clearManager(): this {\n    try {\n      // Clear all assets\n      this.managedAssets.clear();\n\n      // Clear all bundles\n      this.assetBundles.clear();\n\n      this.logger.info('AssetManager', 'clearManager', 'Manager cleared', {\n        managerId: this.managerId,\n      });\n    } catch (error) {\n      this.logger.error('AssetManager', 'clearManager', 'Clear manager error', {\n        managerId: this.managerId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Update manager\n   */\n  updateManager(deltaTime: number): void {\n    try {\n      // Update statistics if enabled\n      if (this.managerConfig.enableStatistics && this.statisticsManager) {\n        this.statisticsManager.updateStatisticsManager(deltaTime);\n      }\n    } catch (error) {\n      this.logger.error('AssetManager', 'updateManager', 'Manager update error', {\n        managerId: this.managerId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  }\n}\n","/**\n * Scene Asset Loader Interface\n *\n * Defines scene-specific asset loading functionality that integrates with the Scene System.\n */\n\nimport type { IAsset } from '../IAsset';\nimport type { IAssetBundle } from '../IAssetBundle';\nimport type { IAssetManager } from '../IAssetManager';\n\nimport type { ISceneAssetConfigData } from './ISceneAssetConfigData';\nimport type { AssetType, AssetPriority } from '../IAsset';\nimport type { BundleType } from '../IAssetBundle';\nimport type { SceneAssetProgress, SceneAssetValidation } from './ISceneAssetConfig';\n\n/**\n * Scene loading phases\n */\nexport enum SceneLoadingPhase {\n  INITIALIZATION = 'initialization',\n  ASSET_LOADING = 'asset_loading',\n  BUNDLE_LOADING = 'bundle_loading',\n  VALIDATION = 'validation',\n  OPTIMIZATION = 'optimization',\n  COMPLETION = 'completion',\n}\n\n/**\n * Scene loading states\n */\nexport enum SceneLoadingState {\n  PENDING = 'pending',\n  LOADING = 'loading',\n  VALIDATING = 'validating',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n  CANCELLED = 'cancelled',\n}\n\n/**\n * Scene loading configuration\n */\nexport interface SceneLoadingConfig {\n  enablePreloading: boolean;\n  enableValidation: boolean;\n  enableOptimization: boolean;\n  maxConcurrentLoads: number;\n  timeout: number;\n  retryAttempts: number;\n  retryDelay: number;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Interface for scene asset loaders\n */\nexport interface ISceneAssetLoader {\n  readonly loaderId: string;\n  readonly sceneId: string;\n\n  /** Scene loading state */\n  loadingState: SceneLoadingState;\n\n  /** Current loading phase */\n  currentPhase: SceneLoadingPhase;\n\n  /** Loading configuration */\n  loadingConfig: SceneLoadingConfig;\n\n  /** Asset manager */\n  assetManager: IAssetManager;\n\n  /** Scene asset configuration */\n  sceneAssetConfig: ISceneAssetConfigData;\n\n  /** Loading progress */\n  loadingProgress: SceneAssetProgress;\n\n  /** Validation result */\n  validationResult: SceneAssetValidation;\n\n  /** Loader metadata */\n  loaderMetadata: Record<string, any>;\n\n  /** Set loading state */\n  setLoadingState(state: SceneLoadingState): this;\n\n  /** Set current phase */\n  setCurrentPhase(phase: SceneLoadingPhase): this;\n\n  /** Set loading configuration */\n  setLoadingConfig(config: SceneLoadingConfig): this;\n\n  /** Set asset manager */\n  setAssetManager(manager: IAssetManager): this;\n\n  /** Set scene asset configuration */\n  setSceneAssetConfig(config: ISceneAssetConfigData): this;\n\n  /** Set loading progress */\n  setLoadingProgress(progress: SceneAssetProgress): this;\n\n  /** Set validation result */\n  setValidationResult(validation: SceneAssetValidation): this;\n\n  /** Set loader metadata */\n  setLoaderMetadata(metadata: Record<string, any>): this;\n\n  /** Get loading state */\n  getLoadingState(): SceneLoadingState;\n\n  /** Get current phase */\n  getCurrentPhase(): SceneLoadingPhase;\n\n  /** Get loading configuration */\n  getLoadingConfig(): SceneLoadingConfig;\n\n  /** Get asset manager */\n  getAssetManager(): IAssetManager;\n\n  /** Get scene asset configuration */\n  getSceneAssetConfig(): ISceneAssetConfigData;\n\n  /** Get loader ID */\n  getLoaderId(): string;\n\n  /** Get scene ID */\n  getSceneId(): string;\n\n  /** Get loading progress */\n  getLoadingProgress(): SceneAssetProgress;\n\n  /** Get validation result */\n  getValidationResult(): SceneAssetValidation;\n\n  /** Get loader metadata */\n  getLoaderMetadata(): Record<string, any>;\n\n  /** Load scene assets */\n  loadSceneAssets(): Promise<boolean>;\n\n  /** Load scene assets for breakpoint */\n  loadSceneAssetsForBreakpoint(breakpoint: string): Promise<boolean>;\n\n  /** Load required assets */\n  loadRequiredAssets(): Promise<boolean>;\n\n  /** Load optional assets */\n  loadOptionalAssets(): Promise<boolean>;\n\n  /** Load asset by key */\n  loadAsset(assetKey: string): Promise<IAsset | null>;\n\n  /** Load assets by type */\n  loadAssetsByType(assetType: AssetType): Promise<IAsset[]>;\n\n  /** Load assets by priority */\n  loadAssetsByPriority(priority: AssetPriority): Promise<IAsset[]>;\n\n  /** Load bundle by ID */\n  loadBundle(bundleId: string): Promise<IAssetBundle | null>;\n\n  /** Load bundles by type */\n  loadBundlesByType(bundleType: BundleType): Promise<IAssetBundle[]>;\n\n  /** Unload scene assets */\n  unloadSceneAssets(): Promise<boolean>;\n\n  /** Unload asset */\n  unloadAsset(assetKey: string): Promise<boolean>;\n\n  /** Unload bundle */\n  unloadBundle(bundleId: string): Promise<boolean>;\n\n  /** Validate scene assets */\n  validateSceneAssets(): Promise<SceneAssetValidation>;\n\n  /** Optimize scene assets */\n  optimizeSceneAssets(): Promise<boolean>;\n\n  /** Cancel loading */\n  cancelLoading(): Promise<boolean>;\n\n  /** Pause loading */\n  pauseLoading(): Promise<boolean>;\n\n  /** Resume loading */\n  resumeLoading(): Promise<boolean>;\n\n  /** Check if loading is complete */\n  isLoadingComplete(): boolean;\n\n  /** Check if loading failed */\n  isLoadingFailed(): boolean;\n\n  /** Check if asset is loaded */\n  isAssetLoaded(assetKey: string): boolean;\n\n  /** Check if bundle is loaded */\n  isBundleLoaded(bundleId: string): boolean;\n\n  /** Get loaded assets count */\n  getLoadedAssetsCount(): number;\n\n  /** Get loaded bundles count */\n  getLoadedBundlesCount(): number;\n\n  /** Get failed assets count */\n  getFailedAssetsCount(): number;\n\n  /** Get failed bundles count */\n  getFailedBundlesCount(): number;\n\n  /** Clear loader */\n  clearLoader(): this;\n\n  /** Update loader */\n  updateLoader(deltaTime: number): void;\n}\n","/**\n * Asset System Enums\n *\n * Centralized enum definitions for the asset system.\n * Provides type-safe constants for asset operations, states, and configurations.\n */\n\n// ============================================================================\n// ASSET LOADER ENUMS\n// ============================================================================\n\n/**\n * Loader types enum\n */\nexport enum LoaderType {\n  HTTP = 'http',\n  FETCH = 'fetch',\n  XHR = 'xhr',\n  WEBSOCKET = 'websocket',\n  CUSTOM = 'custom',\n}\n\n/**\n * Loader states enum\n */\nexport enum LoaderState {\n  IDLE = 'idle',\n  LOADING = 'loading',\n  PAUSED = 'paused',\n  COMPLETED = 'completed',\n  ERROR = 'error',\n  CANCELLED = 'cancelled',\n}\n\n/**\n * Loading strategy enum\n */\nexport enum LoadingStrategy {\n  SEQUENTIAL = 'sequential',\n  PARALLEL = 'parallel',\n  PRIORITY_BASED = 'priority_based',\n  LAZY = 'lazy',\n  CUSTOM = 'custom',\n}\n\n/**\n * Loading strategy types enum\n */\nexport enum LoadingStrategyType {\n  SEQUENTIAL = 'sequential',\n  PARALLEL = 'parallel',\n  PRIORITY_BASED = 'priority_based',\n  LAZY = 'lazy',\n  BATCH = 'batch',\n  STREAMING = 'streaming',\n  CUSTOM = 'custom',\n}\n\n// ============================================================================\n// ASSET MANAGER ENUMS\n// ============================================================================\n\n/**\n * Manager operations enum\n */\nexport enum ManagerOperation {\n  LOAD = 'load',\n  UNLOAD = 'unload',\n  CACHE = 'cache',\n  UNCACHE = 'uncache',\n  VALIDATE = 'validate',\n  OPTIMIZE = 'optimize',\n  CLEANUP = 'cleanup',\n}\n\n// ============================================================================\n// ASSET FACTORY ENUMS\n// ============================================================================\n\n/**\n * Factory operations enum\n */\nexport enum FactoryOperation {\n  CREATE = 'create',\n  CLONE = 'clone',\n  CONFIGURE = 'configure',\n  VALIDATE = 'validate',\n  REGISTER = 'register',\n  UNREGISTER = 'unregister',\n}\n\n/**\n * Loader factory operations enum\n */\nexport enum LoaderFactoryOperation {\n  CREATE = 'create',\n  CLONE = 'clone',\n  CONFIGURE = 'configure',\n  VALIDATE = 'validate',\n  REGISTER = 'register',\n  UNREGISTER = 'unregister',\n}\n\n// ============================================================================\n// ASSET STRATEGY ENUMS\n// ============================================================================\n\n/**\n * Validation strategy types enum\n */\nexport enum ValidationStrategyType {\n  STRICT = 'strict',\n  LENIENT = 'lenient',\n  CUSTOM = 'custom',\n  BATCH = 'batch',\n  INCREMENTAL = 'incremental',\n  PARALLEL = 'parallel',\n  CACHED = 'cached',\n}\n\n// ============================================================================\n// ASSET SCENE ENUMS\n// ============================================================================\n\n/**\n * Scene asset loading phases enum\n */\nexport enum SceneAssetPhase {\n  ASSETS = 'assets',\n  BUNDLES = 'bundles',\n  VALIDATION = 'validation',\n  COMPLETE = 'complete',\n}\n","/**\n * Scene Asset Config Loader\n *\n * Concrete implementation of ISceneAssetLoader for loading and processing scene configurations.\n */\n\nimport { Logger } from '../../core/Logger';\nimport type { ISceneAssetLoader, SceneLoadingConfig } from '../interfaces/scene/ISceneAssetLoader';\nimport { SceneLoadingState, SceneLoadingPhase } from '../interfaces/scene/ISceneAssetLoader';\nimport type {\n  SceneAssetProgress,\n  SceneAssetValidation,\n} from '../interfaces/scene/ISceneAssetConfig';\nimport type { ISceneAssetConfigData } from '../interfaces/scene/ISceneAssetConfigData';\nimport type { IAssetManager } from '../interfaces/IAssetManager';\nimport type { IAsset } from '../interfaces/IAsset';\nimport type { IAssetBundle } from '../interfaces/IAssetBundle';\nimport type { AssetType, AssetPriority } from '../interfaces/IAsset';\nimport type { BundleType } from '../interfaces/IAssetBundle';\nimport { SceneAssetPhase } from '../enums/AssetEnums';\n\n/**\n * Scene Asset Config Loader implementation\n */\nexport class SceneAssetConfigLoader implements ISceneAssetLoader {\n  private readonly logger: Logger = Logger.getInstance();\n\n  public readonly loaderId: string;\n  public readonly sceneId: string;\n\n  public loadingState: SceneLoadingState = SceneLoadingState.PENDING;\n  public currentPhase: SceneLoadingPhase = SceneLoadingPhase.INITIALIZATION;\n  public loadingConfig: SceneLoadingConfig;\n  public assetManager: IAssetManager;\n  public sceneAssetConfig: ISceneAssetConfigData;\n  public loadingProgress: SceneAssetProgress;\n  public validationResult: SceneAssetValidation;\n  public loaderMetadata: Record<string, unknown> = {};\n\n  private loadingStartTime: number = 0;\n  private loadingEndTime: number = 0;\n  private loadingErrors: string[] = [];\n  private loadedAssets: Map<string, IAsset> = new Map();\n  private loadedBundles: Map<string, IAssetBundle> = new Map();\n  private failedAssets: Set<string> = new Set();\n  private failedBundles: Set<string> = new Set();\n\n  constructor(\n    loaderId: string,\n    sceneId: string,\n    assetManager: IAssetManager,\n    sceneAssetConfig: ISceneAssetConfigData,\n    loadingConfig?: Partial<SceneLoadingConfig>\n  ) {\n    this.loaderId = loaderId;\n    this.sceneId = sceneId;\n    this.assetManager = assetManager;\n    this.sceneAssetConfig = sceneAssetConfig;\n\n    // Set default loading configuration\n    this.loadingConfig = {\n      enablePreloading: true,\n      enableValidation: true,\n      enableOptimization: true,\n      maxConcurrentLoads: 5,\n      timeout: 30000,\n      retryAttempts: 3,\n      retryDelay: 1000,\n      metadata: {},\n      ...loadingConfig,\n    };\n\n    // Initialize progress\n    this.loadingProgress = {\n      totalAssets: 0,\n      loadedAssets: 0,\n      failedAssets: 0,\n      totalBundles: 0,\n      loadedBundles: 0,\n      failedBundles: 0,\n      percentage: 0,\n      estimatedTimeRemaining: 0,\n      currentPhase: SceneAssetPhase.ASSETS,\n    };\n\n    // Initialize validation result\n    this.validationResult = {\n      isValid: false,\n      errors: [],\n      warnings: [],\n      missingAssets: [],\n      missingBundles: [],\n      invalidAssets: [],\n      invalidBundles: [],\n    };\n\n    // Initialize progress with correct values from config\n    this.updateProgress();\n\n    this.logger.info('SceneAssetConfigLoader', 'constructor', 'Scene asset config loader created', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n      loadingConfig: this.loadingConfig,\n    });\n  }\n\n  /**\n   * Set loading state\n   */\n  setLoadingState(state: SceneLoadingState): this {\n    const previousState = this.loadingState;\n    this.loadingState = state;\n\n    this.logger.debug(\n      'SceneAssetConfigLoader',\n      'setLoadingState',\n      `Loading state changed: ${previousState} → ${state}`,\n      {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Set current phase\n   */\n  setCurrentPhase(phase: SceneLoadingPhase): this {\n    const previousPhase = this.currentPhase;\n    this.currentPhase = phase;\n\n    this.logger.debug(\n      'SceneAssetConfigLoader',\n      'setCurrentPhase',\n      `Loading phase changed: ${previousPhase} → ${phase}`,\n      {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Set loading configuration\n   */\n  setLoadingConfig(config: SceneLoadingConfig): this {\n    this.loadingConfig = config;\n\n    this.logger.debug(\n      'SceneAssetConfigLoader',\n      'setLoadingConfig',\n      'Loading configuration updated',\n      {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n        config,\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Set asset manager\n   */\n  setAssetManager(manager: IAssetManager): this {\n    this.assetManager = manager;\n\n    this.logger.debug('SceneAssetConfigLoader', 'setAssetManager', 'Asset manager updated', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n      managerId: manager.managerId,\n    });\n\n    return this;\n  }\n\n  /**\n   * Set scene asset configuration\n   */\n  setSceneAssetConfig(config: ISceneAssetConfigData): this {\n    this.sceneAssetConfig = config;\n\n    this.logger.debug(\n      'SceneAssetConfigLoader',\n      'setSceneAssetConfig',\n      'Scene asset configuration updated',\n      {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n        configSceneId: config.sceneId,\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Set loading progress\n   */\n  setLoadingProgress(progress: SceneAssetProgress): this {\n    this.loadingProgress = progress;\n\n    this.logger.debug('SceneAssetConfigLoader', 'setLoadingProgress', 'Loading progress updated', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n      progress,\n    });\n\n    return this;\n  }\n\n  /**\n   * Set validation result\n   */\n  setValidationResult(validation: SceneAssetValidation): this {\n    this.validationResult = validation;\n\n    this.logger.debug(\n      'SceneAssetConfigLoader',\n      'setValidationResult',\n      'Validation result updated',\n      {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n        isValid: validation.isValid,\n        errorCount: validation.errors.length,\n        warningCount: validation.warnings.length,\n      }\n    );\n\n    return this;\n  }\n\n  /**\n   * Set loader metadata\n   */\n  setLoaderMetadata(metadata: Record<string, unknown>): this {\n    this.loaderMetadata = metadata;\n\n    this.logger.debug('SceneAssetConfigLoader', 'setLoaderMetadata', 'Loader metadata updated', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n      metadata,\n    });\n\n    return this;\n  }\n\n  /**\n   * Get loading state\n   */\n  getLoadingState(): SceneLoadingState {\n    return this.loadingState;\n  }\n\n  /**\n   * Get current phase\n   */\n  getCurrentPhase(): SceneLoadingPhase {\n    return this.currentPhase;\n  }\n\n  /**\n   * Get loading configuration\n   */\n  getLoadingConfig(): SceneLoadingConfig {\n    return this.loadingConfig;\n  }\n\n  /**\n   * Get asset manager\n   */\n  getAssetManager(): IAssetManager {\n    return this.assetManager;\n  }\n\n  /**\n   * Get scene asset configuration\n   */\n  getSceneAssetConfig(): ISceneAssetConfigData {\n    return this.sceneAssetConfig;\n  }\n\n  /**\n   * Get loader ID\n   */\n  getLoaderId(): string {\n    return this.loaderId;\n  }\n\n  /**\n   * Get scene ID\n   */\n  getSceneId(): string {\n    return this.sceneId;\n  }\n\n  /**\n   * Get responsive assets for breakpoint\n   */\n  private getResponsiveAssets(breakpoint: string): { assets: any[]; bundles: any[] } {\n    const config = this.sceneAssetConfig;\n    const responsiveConfig = config.responsive?.breakpoints?.[breakpoint];\n\n    if (!responsiveConfig) {\n      return { assets: [], bundles: [] };\n    }\n\n    const assets = responsiveConfig.assets\n      .map(assetKey => config.assets.find(asset => asset.key === assetKey))\n      .filter(Boolean);\n\n    const bundles = responsiveConfig.bundles\n      .map(bundleId => config.bundles.find(bundle => bundle.bundleId === bundleId))\n      .filter(Boolean);\n\n    return { assets, bundles };\n  }\n\n  /**\n   * Validate configuration\n   */\n  private validateConfiguration(): any {\n    const config = this.sceneAssetConfig;\n    const validation = {\n      isValid: true,\n      errors: [] as string[],\n      warnings: [] as string[],\n      invalidAssets: [] as string[],\n      invalidBundles: [] as string[],\n    };\n\n    // Basic validation\n    if (!config.sceneId) {\n      validation.errors.push('Scene ID is required');\n      validation.isValid = false;\n    }\n\n    if (!config.assets || config.assets.length === 0) {\n      validation.warnings.push('No assets configured');\n    }\n\n    if (!config.bundles || config.bundles.length === 0) {\n      validation.warnings.push('No bundles configured');\n    }\n\n    return validation;\n  }\n\n  /**\n   * Get loading progress\n   */\n  getLoadingProgress(): SceneAssetProgress {\n    return this.loadingProgress;\n  }\n\n  /**\n   * Get validation result\n   */\n  getValidationResult(): SceneAssetValidation {\n    return this.validationResult;\n  }\n\n  /**\n   * Get loader metadata\n   */\n  getLoaderMetadata(): Record<string, unknown> {\n    return this.loaderMetadata;\n  }\n\n  /**\n   * Load scene assets\n   */\n  async loadSceneAssets(): Promise<boolean> {\n    this.logger.info('SceneAssetConfigLoader', 'loadSceneAssets', 'Starting scene asset loading', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n    });\n\n    try {\n      this.loadingStartTime = Date.now();\n      this.setLoadingState(SceneLoadingState.LOADING);\n      this.setCurrentPhase(SceneLoadingPhase.INITIALIZATION);\n\n      // Initialize progress\n      this.updateProgress();\n\n      // Load required assets first\n      if (this.loadingConfig.enablePreloading) {\n        await this.loadRequiredAssets();\n      }\n\n      // Load optional assets\n      await this.loadOptionalAssets();\n\n      // Validate if enabled\n      if (this.loadingConfig.enableValidation) {\n        this.setCurrentPhase(SceneLoadingPhase.VALIDATION);\n        await this.validateSceneAssets();\n      }\n\n      // Optimize if enabled\n      if (this.loadingConfig.enableOptimization) {\n        this.setCurrentPhase(SceneLoadingPhase.OPTIMIZATION);\n        await this.optimizeSceneAssets();\n      }\n\n      this.setCurrentPhase(SceneLoadingPhase.COMPLETION);\n      this.loadingEndTime = Date.now();\n      this.setLoadingState(SceneLoadingState.COMPLETED);\n\n      this.logger.info(\n        'SceneAssetConfigLoader',\n        'loadSceneAssets',\n        'Scene asset loading completed successfully',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          loadTime: this.loadingEndTime - this.loadingStartTime,\n          loadedAssets: this.loadedAssets.size,\n          loadedBundles: this.loadedBundles.size,\n        }\n      );\n\n      return true;\n    } catch (error) {\n      this.loadingEndTime = Date.now();\n      this.setLoadingState(SceneLoadingState.FAILED);\n      this.loadingErrors.push(error instanceof Error ? error.message : String(error));\n\n      this.logger.error('SceneAssetConfigLoader', 'loadSceneAssets', 'Scene asset loading failed', {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n        error: error instanceof Error ? error.message : String(error),\n        loadTime: this.loadingEndTime - this.loadingStartTime,\n      });\n\n      return false;\n    }\n  }\n\n  /**\n   * Load scene assets for breakpoint\n   */\n  async loadSceneAssetsForBreakpoint(breakpoint: string): Promise<boolean> {\n    this.logger.info(\n      'SceneAssetConfigLoader',\n      'loadSceneAssetsForBreakpoint',\n      'Loading scene assets for breakpoint',\n      {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n        breakpoint,\n      }\n    );\n\n    try {\n      const responsiveAssets = this.getResponsiveAssets(breakpoint);\n\n      // Load responsive assets\n      for (const asset of responsiveAssets.assets) {\n        await this.loadAsset(asset.assetKey);\n      }\n\n      // Load responsive bundles\n      for (const bundle of responsiveAssets.bundles) {\n        await this.loadBundle(bundle.bundleId);\n      }\n\n      this.logger.info(\n        'SceneAssetConfigLoader',\n        'loadSceneAssetsForBreakpoint',\n        'Breakpoint assets loaded successfully',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          breakpoint,\n          assetCount: responsiveAssets.assets.length,\n          bundleCount: responsiveAssets.bundles.length,\n        }\n      );\n\n      return true;\n    } catch (error) {\n      this.logger.error(\n        'SceneAssetConfigLoader',\n        'loadSceneAssetsForBreakpoint',\n        'Breakpoint asset loading failed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          breakpoint,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      return false;\n    }\n  }\n\n  /**\n   * Load required assets\n   */\n  async loadRequiredAssets(): Promise<boolean> {\n    this.logger.info('SceneAssetConfigLoader', 'loadRequiredAssets', 'Loading required assets', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n    });\n\n    try {\n      const config = this.sceneAssetConfig;\n      const requiredAssets = config.validation.required;\n\n      for (const assetKey of requiredAssets) {\n        const asset = await this.loadAsset(assetKey);\n        if (!asset) {\n          this.failedAssets.add(assetKey);\n          this.logger.warn(\n            'SceneAssetConfigLoader',\n            'loadRequiredAssets',\n            'Required asset failed to load',\n            {\n              loaderId: this.loaderId,\n              sceneId: this.sceneId,\n              assetKey,\n            }\n          );\n        }\n      }\n\n      this.logger.info(\n        'SceneAssetConfigLoader',\n        'loadRequiredAssets',\n        'Required assets loading completed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          totalRequired: requiredAssets.length,\n          loaded: this.loadedAssets.size,\n          failed: this.failedAssets.size,\n        }\n      );\n\n      return true;\n    } catch (error) {\n      this.logger.error(\n        'SceneAssetConfigLoader',\n        'loadRequiredAssets',\n        'Required assets loading failed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      return false;\n    }\n  }\n\n  /**\n   * Load optional assets\n   */\n  async loadOptionalAssets(): Promise<boolean> {\n    this.logger.info('SceneAssetConfigLoader', 'loadOptionalAssets', 'Loading optional assets', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n    });\n\n    try {\n      const config = this.sceneAssetConfig;\n      const optionalAssets = config.validation.optional;\n\n      for (const assetKey of optionalAssets) {\n        const asset = await this.loadAsset(assetKey);\n        if (!asset) {\n          this.failedAssets.add(assetKey);\n          this.logger.debug(\n            'SceneAssetConfigLoader',\n            'loadOptionalAssets',\n            'Optional asset failed to load',\n            {\n              loaderId: this.loaderId,\n              sceneId: this.sceneId,\n              assetKey,\n            }\n          );\n        }\n      }\n\n      this.logger.info(\n        'SceneAssetConfigLoader',\n        'loadOptionalAssets',\n        'Optional assets loading completed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          totalOptional: optionalAssets.length,\n          loaded: this.loadedAssets.size,\n          failed: this.failedAssets.size,\n        }\n      );\n\n      return true;\n    } catch (error) {\n      this.logger.error(\n        'SceneAssetConfigLoader',\n        'loadOptionalAssets',\n        'Optional assets loading failed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      return false;\n    }\n  }\n\n  /**\n   * Load asset by key\n   */\n  async loadAsset(assetKey: string): Promise<IAsset | null> {\n    this.logger.debug('SceneAssetConfigLoader', 'loadAsset', 'Loading asset', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n      assetKey,\n    });\n\n    try {\n      const asset = await this.assetManager.loadAsset(assetKey);\n\n      if (asset) {\n        this.loadedAssets.set(assetKey, asset);\n        this.updateProgress();\n      } else {\n        this.failedAssets.add(assetKey);\n      }\n\n      return asset;\n    } catch (error) {\n      this.failedAssets.add(assetKey);\n      this.logger.error('SceneAssetConfigLoader', 'loadAsset', 'Asset loading failed', {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n        assetKey,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      return null;\n    }\n  }\n\n  /**\n   * Load assets by type\n   */\n  async loadAssetsByType(assetType: AssetType): Promise<IAsset[]> {\n    this.logger.debug('SceneAssetConfigLoader', 'loadAssetsByType', 'Loading assets by type', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n      assetType,\n    });\n\n    try {\n      // Get assets by type from the manager and load them individually\n      const existingAssets = this.assetManager.getAssetsByType(assetType);\n      const assets: IAsset[] = [];\n\n      for (const existingAsset of existingAssets) {\n        const loadedAsset = await this.assetManager.loadAsset(existingAsset.assetKey);\n        if (loadedAsset) {\n          assets.push(loadedAsset);\n        }\n      }\n\n      for (const asset of assets) {\n        this.loadedAssets.set(asset.assetKey, asset);\n      }\n\n      this.updateProgress();\n\n      return assets;\n    } catch (error) {\n      this.logger.error(\n        'SceneAssetConfigLoader',\n        'loadAssetsByType',\n        'Assets by type loading failed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          assetType,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      return [];\n    }\n  }\n\n  /**\n   * Load assets by priority\n   */\n  async loadAssetsByPriority(priority: AssetPriority): Promise<IAsset[]> {\n    this.logger.debug(\n      'SceneAssetConfigLoader',\n      'loadAssetsByPriority',\n      'Loading assets by priority',\n      {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n        priority,\n      }\n    );\n\n    try {\n      // Get assets by priority from the manager and load them individually\n      const existingAssets = this.assetManager.getAssetsByPriority(priority);\n      const assets: IAsset[] = [];\n\n      for (const existingAsset of existingAssets) {\n        const loadedAsset = await this.assetManager.loadAsset(existingAsset.assetKey);\n        if (loadedAsset) {\n          assets.push(loadedAsset);\n        }\n      }\n\n      for (const asset of assets) {\n        this.loadedAssets.set(asset.assetKey, asset);\n      }\n\n      this.updateProgress();\n\n      return assets;\n    } catch (error) {\n      this.logger.error(\n        'SceneAssetConfigLoader',\n        'loadAssetsByPriority',\n        'Assets by priority loading failed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          priority,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      return [];\n    }\n  }\n\n  /**\n   * Load bundle by ID\n   */\n  async loadBundle(bundleId: string): Promise<IAssetBundle | null> {\n    this.logger.debug('SceneAssetConfigLoader', 'loadBundle', 'Loading bundle', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n      bundleId,\n    });\n\n    try {\n      const bundle = await this.assetManager.loadBundle(bundleId);\n\n      if (bundle) {\n        this.loadedBundles.set(bundleId, bundle);\n        this.updateProgress();\n      } else {\n        this.failedBundles.add(bundleId);\n      }\n\n      return bundle;\n    } catch (error) {\n      this.failedBundles.add(bundleId);\n      this.logger.error('SceneAssetConfigLoader', 'loadBundle', 'Bundle loading failed', {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n        bundleId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      return null;\n    }\n  }\n\n  /**\n   * Load bundles by type\n   */\n  async loadBundlesByType(bundleType: BundleType): Promise<IAssetBundle[]> {\n    this.logger.debug('SceneAssetConfigLoader', 'loadBundlesByType', 'Loading bundles by type', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n      bundleType,\n    });\n\n    try {\n      // Get bundles by type from the manager and load them individually\n      const existingBundles = this.assetManager.getBundlesByType(bundleType);\n      const bundles: IAssetBundle[] = [];\n\n      for (const existingBundle of existingBundles) {\n        const loadedBundle = await this.assetManager.loadBundle(existingBundle.bundleId);\n        if (loadedBundle) {\n          bundles.push(loadedBundle);\n        }\n      }\n\n      for (const bundle of bundles) {\n        this.loadedBundles.set(bundle.bundleId, bundle);\n      }\n\n      this.updateProgress();\n\n      return bundles;\n    } catch (error) {\n      this.logger.error(\n        'SceneAssetConfigLoader',\n        'loadBundlesByType',\n        'Bundles by type loading failed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          bundleType,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      return [];\n    }\n  }\n\n  /**\n   * Unload scene assets\n   */\n  async unloadSceneAssets(): Promise<boolean> {\n    this.logger.info('SceneAssetConfigLoader', 'unloadSceneAssets', 'Unloading scene assets', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n    });\n\n    try {\n      // Unload all assets\n      for (const assetKey of Array.from(this.loadedAssets.keys())) {\n        await this.unloadAsset(assetKey);\n      }\n\n      // Unload all bundles\n      for (const bundleId of Array.from(this.loadedBundles.keys())) {\n        await this.unloadBundle(bundleId);\n      }\n\n      // Clear collections\n      this.loadedAssets.clear();\n      this.loadedBundles.clear();\n      this.failedAssets.clear();\n      this.failedBundles.clear();\n\n      this.updateProgress();\n\n      this.logger.info(\n        'SceneAssetConfigLoader',\n        'unloadSceneAssets',\n        'Scene assets unloaded successfully',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n        }\n      );\n\n      return true;\n    } catch (error) {\n      this.logger.error(\n        'SceneAssetConfigLoader',\n        'unloadSceneAssets',\n        'Scene assets unloading failed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      return false;\n    }\n  }\n\n  /**\n   * Unload asset\n   */\n  async unloadAsset(assetKey: string): Promise<boolean> {\n    this.logger.debug('SceneAssetConfigLoader', 'unloadAsset', 'Unloading asset', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n      assetKey,\n    });\n\n    try {\n      const success = await this.assetManager.unloadAsset(assetKey);\n\n      if (success) {\n        this.loadedAssets.delete(assetKey);\n        this.failedAssets.delete(assetKey);\n        this.updateProgress();\n      }\n\n      return success;\n    } catch (error) {\n      this.logger.error('SceneAssetConfigLoader', 'unloadAsset', 'Asset unloading failed', {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n        assetKey,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      return false;\n    }\n  }\n\n  /**\n   * Unload bundle\n   */\n  async unloadBundle(bundleId: string): Promise<boolean> {\n    this.logger.debug('SceneAssetConfigLoader', 'unloadBundle', 'Unloading bundle', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n      bundleId,\n    });\n\n    try {\n      const success = await this.assetManager.unloadBundle(bundleId);\n\n      if (success) {\n        this.loadedBundles.delete(bundleId);\n        this.failedBundles.delete(bundleId);\n        this.updateProgress();\n      }\n\n      return success;\n    } catch (error) {\n      this.logger.error('SceneAssetConfigLoader', 'unloadBundle', 'Bundle unloading failed', {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n        bundleId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      return false;\n    }\n  }\n\n  /**\n   * Validate scene assets\n   */\n  async validateSceneAssets(): Promise<SceneAssetValidation> {\n    this.logger.info('SceneAssetConfigLoader', 'validateSceneAssets', 'Validating scene assets', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n    });\n\n    try {\n      const validation = this.validateConfiguration();\n\n      // Additional validation for loaded assets\n      for (const [assetKey, asset] of Array.from(this.loadedAssets.entries())) {\n        if (!(await this.assetManager.validateAsset(asset))) {\n          validation.invalidAssets.push(assetKey);\n        }\n      }\n\n      // Additional validation for loaded bundles\n      for (const [bundleId, bundle] of Array.from(this.loadedBundles.entries())) {\n        if (!(await this.assetManager.validateBundle(bundle))) {\n          validation.invalidBundles.push(bundleId);\n        }\n      }\n\n      // Check for missing required assets\n      const config = this.sceneAssetConfig;\n      for (const requiredAsset of config.validation.required) {\n        if (!this.loadedAssets.has(requiredAsset)) {\n          validation.missingAssets.push(requiredAsset);\n        }\n      }\n\n      validation.isValid =\n        validation.errors.length === 0 &&\n        validation.missingAssets.length === 0 &&\n        validation.invalidAssets.length === 0;\n\n      this.setValidationResult(validation);\n\n      this.logger.info(\n        'SceneAssetConfigLoader',\n        'validateSceneAssets',\n        'Scene assets validation completed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          isValid: validation.isValid,\n          errorCount: validation.errors.length,\n          warningCount: validation.warnings.length,\n          missingAssets: validation.missingAssets.length,\n          invalidAssets: validation.invalidAssets.length,\n        }\n      );\n\n      return validation;\n    } catch (error) {\n      const validation: SceneAssetValidation = {\n        isValid: false,\n        errors: [error instanceof Error ? error.message : String(error)],\n        warnings: [],\n        missingAssets: [],\n        missingBundles: [],\n        invalidAssets: [],\n        invalidBundles: [],\n      };\n\n      this.setValidationResult(validation);\n\n      this.logger.error(\n        'SceneAssetConfigLoader',\n        'validateSceneAssets',\n        'Scene assets validation failed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      return validation;\n    }\n  }\n\n  /**\n   * Optimize scene assets\n   */\n  async optimizeSceneAssets(): Promise<boolean> {\n    this.logger.info('SceneAssetConfigLoader', 'optimizeSceneAssets', 'Optimizing scene assets', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n    });\n\n    try {\n      // This is a placeholder for optimization logic\n      // In a real implementation, this could include:\n      // - Asset compression\n      // - Memory optimization\n      // - Loading order optimization\n      // - Cache optimization\n\n      this.logger.info(\n        'SceneAssetConfigLoader',\n        'optimizeSceneAssets',\n        'Scene assets optimization completed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n        }\n      );\n\n      return true;\n    } catch (error) {\n      this.logger.error(\n        'SceneAssetConfigLoader',\n        'optimizeSceneAssets',\n        'Scene assets optimization failed',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n\n      return false;\n    }\n  }\n\n  /**\n   * Cancel loading\n   */\n  async cancelLoading(): Promise<boolean> {\n    this.logger.info('SceneAssetConfigLoader', 'cancelLoading', 'Cancelling loading', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n    });\n\n    try {\n      this.setLoadingState(SceneLoadingState.CANCELLED);\n\n      // Unload any partially loaded assets\n      await this.unloadSceneAssets();\n\n      this.logger.info(\n        'SceneAssetConfigLoader',\n        'cancelLoading',\n        'Loading cancelled successfully',\n        {\n          loaderId: this.loaderId,\n          sceneId: this.sceneId,\n        }\n      );\n\n      return true;\n    } catch (error) {\n      this.logger.error('SceneAssetConfigLoader', 'cancelLoading', 'Loading cancellation failed', {\n        loaderId: this.loaderId,\n        sceneId: this.sceneId,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      return false;\n    }\n  }\n\n  /**\n   * Pause loading\n   */\n  async pauseLoading(): Promise<boolean> {\n    this.logger.info('SceneAssetConfigLoader', 'pauseLoading', 'Pausing loading', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n    });\n\n    // In a real implementation, this would pause ongoing loading operations\n    // For now, we'll just log the action\n    return true;\n  }\n\n  /**\n   * Resume loading\n   */\n  async resumeLoading(): Promise<boolean> {\n    this.logger.info('SceneAssetConfigLoader', 'resumeLoading', 'Resuming loading', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n    });\n\n    // In a real implementation, this would resume paused loading operations\n    // For now, we'll just log the action\n    return true;\n  }\n\n  /**\n   * Check if loading is complete\n   */\n  isLoadingComplete(): boolean {\n    return this.loadingState === SceneLoadingState.COMPLETED;\n  }\n\n  /**\n   * Check if loading failed\n   */\n  isLoadingFailed(): boolean {\n    return this.loadingState === SceneLoadingState.FAILED;\n  }\n\n  /**\n   * Check if asset is loaded\n   */\n  isAssetLoaded(assetKey: string): boolean {\n    return this.loadedAssets.has(assetKey);\n  }\n\n  /**\n   * Check if bundle is loaded\n   */\n  isBundleLoaded(bundleId: string): boolean {\n    return this.loadedBundles.has(bundleId);\n  }\n\n  /**\n   * Get loaded assets count\n   */\n  getLoadedAssetsCount(): number {\n    return this.loadedAssets.size;\n  }\n\n  /**\n   * Get loaded bundles count\n   */\n  getLoadedBundlesCount(): number {\n    return this.loadedBundles.size;\n  }\n\n  /**\n   * Get failed assets count\n   */\n  getFailedAssetsCount(): number {\n    return this.failedAssets.size;\n  }\n\n  /**\n   * Get failed bundles count\n   */\n  getFailedBundlesCount(): number {\n    return this.failedBundles.size;\n  }\n\n  /**\n   * Clear loader\n   */\n  clearLoader(): this {\n    this.logger.info('SceneAssetConfigLoader', 'clearLoader', 'Clearing loader', {\n      loaderId: this.loaderId,\n      sceneId: this.sceneId,\n    });\n\n    this.loadedAssets.clear();\n    this.loadedBundles.clear();\n    this.failedAssets.clear();\n    this.failedBundles.clear();\n    this.loadingErrors = [];\n    this.loadingStartTime = 0;\n    this.loadingEndTime = 0;\n\n    this.setLoadingState(SceneLoadingState.PENDING);\n    this.setCurrentPhase(SceneLoadingPhase.INITIALIZATION);\n    this.updateProgress();\n\n    return this;\n  }\n\n  /**\n   * Update loader\n   */\n  updateLoader(_deltaTime: number): void {\n    // Update progress\n    this.updateProgress();\n\n    // Update estimated time remaining\n    if (this.loadingState === SceneLoadingState.LOADING && this.loadingStartTime > 0) {\n      const elapsedTime = Date.now() - this.loadingStartTime;\n      const totalItems = this.loadingProgress.totalAssets + this.loadingProgress.totalBundles;\n      const completedItems = this.loadingProgress.loadedAssets + this.loadingProgress.loadedBundles;\n\n      if (completedItems > 0 && totalItems > completedItems) {\n        const averageTimePerItem = elapsedTime / completedItems;\n        const remainingItems = totalItems - completedItems;\n        this.loadingProgress.estimatedTimeRemaining = averageTimePerItem * remainingItems;\n      }\n    }\n  }\n\n  /**\n   * Map loading phase to asset phase\n   */\n  private mapLoadingPhaseToAssetPhase(phase: SceneLoadingPhase): SceneAssetPhase {\n    switch (phase) {\n      case SceneLoadingPhase.INITIALIZATION:\n      case SceneLoadingPhase.ASSET_LOADING:\n        return SceneAssetPhase.ASSETS;\n      case SceneLoadingPhase.BUNDLE_LOADING:\n        return SceneAssetPhase.BUNDLES;\n      case SceneLoadingPhase.VALIDATION:\n        return SceneAssetPhase.VALIDATION;\n      case SceneLoadingPhase.OPTIMIZATION:\n      case SceneLoadingPhase.COMPLETION:\n        return SceneAssetPhase.COMPLETE;\n      default:\n        return SceneAssetPhase.ASSETS;\n    }\n  }\n\n  /**\n   * Update loading progress\n   */\n  private updateProgress(): void {\n    const config = this.sceneAssetConfig;\n    const totalAssets = config.assets.length;\n    const totalBundles = config.bundles.length;\n    const loadedAssets = this.loadedAssets.size;\n    const loadedBundles = this.loadedBundles.size;\n    const failedAssets = this.failedAssets.size;\n    const failedBundles = this.failedBundles.size;\n\n    const totalItems = totalAssets + totalBundles;\n    const completedItems = loadedAssets + loadedBundles;\n    const percentage = totalItems > 0 ? (completedItems / totalItems) * 100 : 0;\n\n    this.loadingProgress = {\n      totalAssets,\n      loadedAssets,\n      failedAssets,\n      totalBundles,\n      loadedBundles,\n      failedBundles,\n      percentage,\n      estimatedTimeRemaining: this.loadingProgress.estimatedTimeRemaining,\n      currentPhase: this.mapLoadingPhaseToAssetPhase(this.getCurrentPhase()),\n    };\n  }\n}\n","import { logger } from './Logger';\nimport { LoggingConfigLoader, LoggerConfig } from './LoggingConfigLoader';\nimport { ResponsiveConfigLoader, ResponsiveConfig } from './ResponsiveConfigLoader';\nimport { SceneLoaderConfigLoader, SceneConfig } from './SceneLoaderConfigLoader';\nimport { AssetManager } from '../asset/classes/AssetManager';\nimport { SceneAssetConfigLoader } from '../asset/classes/SceneAssetConfigLoader';\nimport type { IAssetManager } from '../asset/interfaces/IAssetManager';\nimport type { ISceneAssetLoader } from '../asset/interfaces/scene/ISceneAssetLoader';\nimport type { ISceneAssetConfigData } from '../asset/interfaces/scene/ISceneAssetConfigData';\nimport type { ITheme } from '../layout/interfaces/ITheme';\nimport type { IConfigManager } from './interfaces/IConfigManager';\n\n/**\n * Unified configuration manager for scenes\n * Coordinates all configuration loaders and provides a single interface\n */\nexport class ConfigManager implements IConfigManager {\n  private static instance: ConfigManager;\n  private loggingLoader: LoggingConfigLoader;\n  private responsiveLoader: ResponsiveConfigLoader;\n  private sceneLoader: SceneLoaderConfigLoader;\n  private assetManager: IAssetManager;\n  private sceneAssetLoaders: Map<string, ISceneAssetLoader> = new Map();\n  private themes: Map<string, ITheme> = new Map();\n\n  private constructor() {\n    this.loggingLoader = LoggingConfigLoader.getInstance();\n    this.responsiveLoader = ResponsiveConfigLoader.getInstance();\n    this.sceneLoader = SceneLoaderConfigLoader.getInstance();\n    this.assetManager = new AssetManager('config-manager-asset-manager');\n    // Themes are now managed directly without deprecated ThemeConfigLoader\n  }\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): ConfigManager {\n    if (!ConfigManager.instance) {\n      ConfigManager.instance = new ConfigManager();\n    }\n    return ConfigManager.instance;\n  }\n\n  /**\n   * Register all configurations for a scene\n   */\n  public registerSceneConfigs(\n    sceneName: string,\n    loggingConfig: LoggerConfig,\n    responsiveConfig: ResponsiveConfig,\n    sceneConfig: SceneConfig,\n    assetConfig: ISceneAssetConfigData,\n    themeConfig?: ITheme\n  ): void {\n    try {\n      // Register all configs\n      this.loggingLoader.registerConfig(sceneName, loggingConfig);\n      this.responsiveLoader.registerConfig(sceneName, responsiveConfig);\n      this.sceneLoader.registerConfig(sceneName, sceneConfig);\n\n      // Create and register scene asset loader with the newest asset system\n      const sceneAssetLoader = new SceneAssetConfigLoader(\n        `${sceneName}-asset-loader`,\n        sceneName,\n        this.assetManager,\n        assetConfig\n      );\n      this.sceneAssetLoaders.set(sceneName, sceneAssetLoader);\n\n      // Register theme config if provided\n      if (themeConfig) {\n        this.themes.set(sceneName, themeConfig);\n        logger.debug(\n          'ConfigManager',\n          'registerSceneConfigs',\n          'Registered theme configuration for scene',\n          { sceneName }\n        );\n      }\n\n      logger.debug(\n        'ConfigManager',\n        'registerSceneConfigs',\n        'Registered all configurations for scene',\n        { sceneName }\n      );\n    } catch (error) {\n      logger.error(\n        'ConfigManager',\n        'registerSceneConfigs',\n        'Failed to register configurations for scene',\n        { sceneName, error }\n      );\n    }\n  }\n\n  /**\n   * Load all configurations for a scene\n   */\n  public loadSceneConfigs(sceneName: string): {\n    logging: boolean;\n    responsive: ResponsiveConfig | null;\n    scene: SceneConfig | null;\n    asset: ISceneAssetLoader | null;\n    theme: ITheme | null;\n  } {\n    try {\n      // Load logging config\n      const loggingLoaded = this.loggingLoader.loadConfig(sceneName);\n\n      // Load other configs\n      const responsiveConfig = this.responsiveLoader.loadConfig(sceneName);\n      const sceneConfig = this.sceneLoader.loadConfig(sceneName);\n      const sceneAssetLoader = this.sceneAssetLoaders.get(sceneName) || null;\n      const themeConfig = this.themes.get(sceneName) || null;\n\n      const result = {\n        logging: loggingLoaded,\n        responsive: responsiveConfig,\n        scene: sceneConfig,\n        asset: sceneAssetLoader,\n        theme: themeConfig,\n      };\n\n      logger.debug('ConfigManager', 'loadSceneConfigs', 'Loaded configurations for scene', {\n        sceneName,\n        result,\n      });\n      return result;\n    } catch (error) {\n      logger.error('ConfigManager', 'loadSceneConfigs', 'Failed to load configurations for scene', {\n        sceneName,\n        error,\n      });\n      return {\n        logging: false,\n        responsive: null,\n        scene: null,\n        asset: null,\n        theme: null,\n      };\n    }\n  }\n\n  /**\n   * Check if a scene has all required configurations\n   */\n  public hasAllConfigs(sceneName: string): boolean {\n    return (\n      this.loggingLoader.hasConfig(sceneName) &&\n      this.responsiveLoader.hasConfig(sceneName) &&\n      this.sceneLoader.hasConfig(sceneName) &&\n      this.sceneAssetLoaders.has(sceneName)\n      // Note: Theme config is optional, so we don't check for it here\n    );\n  }\n\n  /**\n   * Get available scene configurations\n   */\n  public getAvailableScenes(): string[] {\n    const loggingScenes = this.loggingLoader.getAvailableConfigs();\n    const responsiveScenes = this.responsiveLoader.getAvailableConfigs();\n    const sceneScenes = this.sceneLoader.getAvailableConfigs();\n    const assetScenes = Array.from(this.sceneAssetLoaders.keys());\n\n    // Return scenes that have all configs\n    return loggingScenes.filter(\n      scene =>\n        responsiveScenes.includes(scene) &&\n        sceneScenes.includes(scene) &&\n        assetScenes.includes(scene)\n    );\n  }\n\n  /**\n   * Get individual loaders for direct access if needed\n   */\n  public getLoggingLoader(): LoggingConfigLoader {\n    return this.loggingLoader;\n  }\n\n  public getResponsiveLoader(): ResponsiveConfigLoader {\n    return this.responsiveLoader;\n  }\n\n  public getSceneLoader(): SceneLoaderConfigLoader {\n    return this.sceneLoader;\n  }\n\n  public getAssetManager(): IAssetManager {\n    return this.assetManager;\n  }\n\n  public getSceneAssetLoader(sceneName: string): ISceneAssetLoader | null {\n    return this.sceneAssetLoaders.get(sceneName) || null;\n  }\n\n  public getTheme(sceneName: string): ITheme | null {\n    return this.themes.get(sceneName) || null;\n  }\n\n  public getAllThemes(): Map<string, ITheme> {\n    return new Map(this.themes);\n  }\n}\n\nexport default ConfigManager;\n","import * as Phaser from 'phaser';\nimport type { IFactoryInput } from '../../factory/interfaces/IFactoryInput';\n\n/**\n * Abstract factory interface for creating game objects\n * Follows the Abstract Factory pattern for game object creation\n */\nexport interface IGameObjectFactory {\n  /**\n   * Create a game object based on configuration\n   */\n  createGameObject(input: IFactoryInput): Phaser.GameObjects.GameObject | null;\n\n  /**\n   * Check if this factory can create the specified object type\n   */\n  canCreate(objectType: string): boolean;\n\n  /**\n   * Get the object types this factory supports\n   */\n  getSupportedTypes(): string[];\n}\n\n/**\n * Base abstract factory class with common functionality\n */\nexport abstract class BaseGameObjectFactory implements IGameObjectFactory {\n  protected supportedTypes: string[];\n\n  constructor(supportedTypes: string[]) {\n    this.supportedTypes = supportedTypes;\n  }\n\n  /**\n   * Abstract method to create game objects - must be implemented by subclasses\n   */\n  abstract createGameObject(input: IFactoryInput): Phaser.GameObjects.GameObject | null;\n\n  /**\n   * Check if this factory can create the specified object type\n   */\n  canCreate(objectType: string): boolean {\n    return this.supportedTypes.includes(objectType);\n  }\n\n  /**\n   * Get the object types this factory supports\n   */\n  getSupportedTypes(): string[] {\n    return this.supportedTypes;\n  }\n\n  /**\n   * Common method to set basic properties on game objects\n   */\n  protected setCommonProperties(\n    gameObject: Phaser.GameObjects.GameObject,\n    input: IFactoryInput\n  ): void {\n    const config = input.config;\n\n    // Set position if the object supports it\n    if ('x' in config && config.x !== undefined && 'setPosition' in gameObject) {\n      (gameObject as any).setPosition(config.x, ('y' in config ? config.y : 0) || 0);\n    }\n\n    // Set size if supported\n    if ('width' in config && config.width && config.width !== 'fill') {\n      if ('setSize' in gameObject) {\n        const height = ('height' in config ? config.height : config.width) || config.width;\n        (gameObject as any).setSize(config.width, height);\n      }\n    }\n\n    // Set name for debugging\n    gameObject.name = ('name' in config ? config.name : undefined) || config.id;\n\n    // Set alpha if specified\n    if ('alpha' in config && config.alpha !== undefined && 'setAlpha' in gameObject) {\n      (gameObject as any).setAlpha(config.alpha);\n    }\n\n    // Set visible if specified\n    if ('visible' in config && config.visible !== undefined && 'setVisible' in gameObject) {\n      (gameObject as any).setVisible(config.visible);\n    }\n  }\n}\n","import * as Phaser from 'phaser';\nimport type { IContainer } from '../../abstract/objects/IContainer';\nimport type { IGameObject } from '../../abstract/base/IGameObject';\nimport type { IBounds } from '../../abstract/objects/IBound';\nimport type { IStyle } from '../../abstract/configs/IStyle';\nimport type {\n  CommonIStyleProperties,\n  ParentWidth,\n  ParentHeight,\n  ParentPositionX,\n  ParentPositionY,\n} from '../../abstract/configs/IStyleProperties';\nimport type { IRandomValueNumber, PositionValue, PositionUnit } from '../../unit';\nimport { Logger } from '../../core/Logger';\n\n/**\n * Container Class\n * Concrete implementation of IContainer that extends Phaser.GameObjects.Container\n *\n * Key Features:\n * - Directly extends Phaser.GameObjects.Container for optimal performance\n * - Implements IStyle for responsive behavior\n * - Implements minimal IContainer interface\n * - Maintains proper Phaser container functionality\n */\nexport class Container extends Phaser.GameObjects.Container implements IContainer, IStyle {\n  // ===== ESSENTIAL PROPERTIES =====\n\n  /** Unique identifier for this container */\n  readonly id: string;\n\n  /** Parent container (null if root) */\n  readonly parent: IContainer | null;\n\n  /** Array of child game objects */\n  readonly children: IGameObject[] = [];\n\n  /** Container type */\n  readonly containerType: IContainer['containerType'] = 'div';\n\n  /** Container constraints */\n  readonly constraints = {\n    maxChildren: 1000,\n    autoSize: false,\n    clipOverflow: false,\n    overflow: 'visible' as const,\n    respectParentBounds: true,\n    maintainAspectRatio: false,\n  };\n\n  /** Current style properties */\n  private currentStyle: CommonIStyleProperties = {\n    maintainAspectRatio: false,\n    scaleStrategy: 'stretch',\n    alignment: 'center',\n  };\n\n  /** Responsive layout properties for this object (IGameObject requirement) */\n  layoutProperties: CommonIStyleProperties = {\n    maintainAspectRatio: false,\n    scaleStrategy: 'stretch',\n    alignment: 'center',\n  };\n\n  /** Spacing properties for layout containers */\n  readonly spacing = {\n    gap: 10,\n    padding: {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n    },\n  };\n\n  // ===== COMPUTED PROPERTIES =====\n\n  /** Number of children */\n  get childCount(): number {\n    return this.children.length;\n  }\n\n  /** Whether this container has children */\n  get hasChildren(): boolean {\n    return this.children.length > 0;\n  }\n\n  /** Whether this container is empty */\n  get isEmpty(): boolean {\n    return this.children.length === 0;\n  }\n\n  /** Whether this game object is currently active/visible */\n  get isActive(): boolean {\n    return this.active;\n  }\n\n  /** Whether this game object is destroyed */\n  get isDestroyed(): boolean {\n    return !this.active;\n  }\n\n  /** Size of the game object */\n  get size(): { width: number; height: number } {\n    return { width: this.width, height: this.height };\n  }\n\n  /** Whether the game object is interactive */\n  get interactive(): boolean {\n    return this.input?.enabled || false;\n  }\n\n  // ===== CONSTRUCTOR =====\n\n  constructor(\n    scene: Phaser.Scene,\n    id: string,\n    x: number = 0,\n    y: number = 0,\n    parent: IContainer | null = null\n  ) {\n    // Call Phaser container constructor\n    super(scene, x, y);\n\n    this.id = id;\n    this.parent = parent;\n\n    // Set up the container\n    this.setupContainer();\n  }\n\n  /** Logger instance */\n  protected logger: Logger = Logger.getInstance();\n\n  // ===== SETUP METHODS =====\n\n  /** Set up the container with default properties */\n  protected setupContainer(): void {\n    // Set default properties\n    this.setSize(100, 100); // Default size\n    this.setInteractive();\n  }\n\n  // ===== IStyle IMPLEMENTATION =====\n\n  /** Set the style properties for this container with enhanced cascade logic */\n  setStyle(layoutProperties: CommonIStyleProperties): void {\n    this.logger.debug('Container', 'setStyle', 'Setting style properties', {\n      id: this.id,\n      newStyle: layoutProperties,\n    });\n\n    // NEW: Enhanced cascade logic using injected configurations\n    let finalProperties = this.applyStyleCascade(layoutProperties);\n\n    // Store the final style\n    this.currentStyle = { ...finalProperties };\n\n    // Apply position properties\n    this.applyPositionProperties(finalProperties);\n\n    // Apply size properties\n    this.applySizeProperties(finalProperties);\n\n    // Apply visual properties\n    this.applyVisualProperties(finalProperties);\n\n    // Apply background properties\n    this.applyBackgroundProperties(finalProperties);\n\n    // Apply additional style properties (typography, borders, shadows, etc.)\n    this.applyAdditionalStyleProperties(finalProperties);\n  }\n\n  /** Get the current style properties */\n  getStyle(): CommonIStyleProperties {\n    return { ...this.currentStyle };\n  }\n\n  /** Get the object ID for responsive config lookup */\n  getStyleId(): string {\n    return this.id;\n  }\n\n  // ===== CONFIGURATION INJECTION =====\n\n  /** Injected configurations from scene */\n  protected injectedConfigs: {\n    responsive: any;\n    theme: any;\n    currentBreakpoint: string;\n  } | null = null;\n\n  /**\n   * Initialize container with injected configurations\n   * Called by ContainerFactory to inject responsive and theme configs\n   */\n  initializeWithConfigs(configs: { responsive: any; theme: any; currentBreakpoint: string }): void {\n    this.logger.debug('Container', 'getStyleId', 'Initializing with injected configurations', {\n      id: this.id,\n      hasResponsive: !!configs.responsive,\n      hasTheme: !!configs.theme,\n      currentBreakpoint: configs.currentBreakpoint,\n      responsiveKeys: configs.responsive ? Object.keys(configs.responsive) : [],\n      themeKeys: configs.theme ? Object.keys(configs.theme) : [],\n    });\n\n    this.injectedConfigs = configs;\n\n    // Apply initial responsive configuration if available\n    if (configs.responsive) {\n      this.logger.debug('Container', 'getStyleId', 'Applying initial responsive configuration', {\n        id: this.id,\n        responsiveConfig: configs.responsive,\n        hasDefault: !!configs.responsive.default,\n        defaultCount: configs.responsive.default?.length || 0,\n        hasResponsiveSettings: !!configs.responsive.responsiveSettings,\n        responsiveBreakpoints: configs.responsive.responsiveSettings\n          ? Object.keys(configs.responsive.responsiveSettings)\n          : [],\n      });\n\n      // Find the default layout for this specific container\n      if (configs.responsive.default) {\n        const defaultLayout = configs.responsive.default.find(\n          (layout: any) => layout.id === this.id\n        );\n\n        if (defaultLayout?.layoutProperties) {\n          this.logger.debug('Container', 'getStyleId', 'Found default layout for container', {\n            id: this.id,\n            defaultLayout,\n            layoutProperties: defaultLayout.layoutProperties,\n          });\n\n          // Apply the responsive layout properties\n          this.setStyle(defaultLayout.layoutProperties);\n        } else {\n          this.logger.warn('Container', 'getStyleId', 'No default layout found for container', {\n            id: this.id,\n            availableLayouts: configs.responsive.default.map((l: any) => l.id),\n          });\n        }\n      }\n    }\n\n    // Apply initial theme configuration if available\n    if (configs.theme && configs.responsive?.default) {\n      // Find the default layout to get classes\n      const defaultLayout = configs.responsive.default.find((layout: any) => layout.id === this.id);\n\n      if (defaultLayout?.layoutProperties?.classes) {\n        this.logger.debug('Container', 'getStyleId', 'Applying initial theme configuration', {\n          id: this.id,\n          themeName: configs.theme.themeName,\n          classes: defaultLayout.layoutProperties.classes,\n          availableThemeClasses: Object.keys(configs.theme.themeClasses || {}),\n        });\n\n        // Apply theme classes if specified\n        this.applyThemeClasses(defaultLayout.layoutProperties.classes, configs.theme);\n      }\n    }\n  }\n\n  /**\n   * Get injected configurations\n   */\n  getInjectedConfigs(): {\n    responsive: any;\n    theme: any;\n    currentBreakpoint: string;\n  } | null {\n    return this.injectedConfigs;\n  }\n\n  /**\n   * Apply theme classes to this container\n   */\n  private applyThemeClasses(classes: string[], theme: any): void {\n    if (!classes || !theme?.themeClasses) return;\n\n    this.logger.debug('Container', 'applyThemeClasses', 'Applying theme classes', {\n      id: this.id,\n      classes,\n      availableThemeClasses: Object.keys(theme.themeClasses),\n    });\n\n    // Apply each theme class\n    classes.forEach(className => {\n      // Try to find the theme class with or without the dot prefix\n      let themeClass = theme.themeClasses[className];\n\n      // If not found, try with dot prefix\n      if (!themeClass && !className.startsWith('.')) {\n        themeClass = theme.themeClasses[`.${className}`];\n      }\n\n      // If still not found, try without dot prefix\n      if (!themeClass && className.startsWith('.')) {\n        themeClass = theme.themeClasses[className.substring(1)];\n      }\n\n      if (themeClass) {\n        this.logger.debug('Container', 'unknown', 'Applying theme class', {\n          id: this.id,\n          className,\n          themeClass,\n          foundWithPrefix: className.startsWith('.'),\n          foundWithoutPrefix: !className.startsWith('.'),\n        });\n\n        // Apply theme class properties to current style\n        this.currentStyle = { ...this.currentStyle, ...themeClass };\n\n        // Apply the theme class properties directly to avoid infinite recursion\n        this.applyStylePropertiesDirectly(themeClass);\n      } else {\n        this.logger.warn('Container', 'unknown', 'Theme class not found', {\n          id: this.id,\n          className,\n          availableClasses: Object.keys(theme.themeClasses),\n          triedWithDot: !className.startsWith('.') ? `.${className}` : null,\n          triedWithoutDot: className.startsWith('.') ? className.substring(1) : null,\n        });\n      }\n    });\n  }\n\n  // ===== STYLE APPLICATION METHODS =====\n\n  /** Apply position properties from style */\n  private applyPositionProperties(style: CommonIStyleProperties): void {\n    // Apply position type first (affects other positioning)\n    if (style.position !== undefined) {\n      this.logger.debug('Container', 'applyPositionProperties', 'Applying position type', {\n        id: this.id,\n        position: style.position,\n      });\n\n      // Note: Phaser containers don't have native position types like CSS\n      // This is logged for future implementation or theme integration\n    }\n\n    // Handle X position with all supported types\n    if (style.positionX !== undefined) {\n      this.x = this.calculatePositionValue(style.positionX, 'x');\n      this.logger.debug('Container', 'applyPositionProperties', 'X position calculated', {\n        id: this.id,\n        x: this.x,\n        originalValue: style.positionX,\n      });\n    }\n\n    // Handle Y position with all supported types\n    if (style.positionY !== undefined) {\n      this.y = this.calculatePositionValue(style.positionY, 'y');\n      this.logger.debug('Container', 'applyPositionProperties', 'Y position calculated', {\n        id: this.id,\n        y: this.y,\n        originalValue: style.positionY,\n      });\n    }\n\n    if (style.positionZ !== undefined) {\n      this.setDepth(style.positionZ);\n    }\n\n    // Apply zIndex (alternative to positionZ)\n    if (style.zIndex !== undefined) {\n      this.setDepth(style.zIndex);\n      this.logger.debug('Container', 'applyPositionProperties', 'Applied zIndex', {\n        id: this.id,\n        zIndex: style.zIndex,\n      });\n    }\n  }\n\n  /**\n   * Calculate position value from various input types\n   * Supports: number, string keywords, ParentPositionX/ParentPositionY, IRandomValueNumber, and new unit system types\n   */\n  private calculatePositionValue(\n    value:\n      | number\n      | 'center'\n      | 'left'\n      | 'right'\n      | 'top'\n      | 'bottom'\n      | ParentPositionX\n      | ParentPositionY\n      | IRandomValueNumber\n      | PositionValue\n      | PositionUnit,\n    axis: 'x' | 'y'\n  ): number {\n    // Handle direct numbers\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    // Handle string keywords\n    if (typeof value === 'string') {\n      switch (value) {\n        case 'center':\n          // Center on the specified axis\n          if (axis === 'x') {\n            // Center horizontally - will be calculated when parent bounds are known\n            return 0; // Placeholder for now\n          } else {\n            // Center vertically - will be calculated when parent bounds are known\n            return 0; // Placeholder for now\n          }\n        case 'left':\n          return axis === 'x' ? 0 : this.y; // Only affect X axis\n        case 'right':\n          if (axis === 'x' && this.parent) {\n            // Position at right edge of parent\n            const parentSize = (this.parent as any).getSize?.() || { width: 800 };\n            return parentSize.width - (this.width || 100);\n          }\n          return axis === 'x' ? 0 : this.y;\n        case 'top':\n          return axis === 'y' ? 0 : this.x; // Only affect Y axis\n        case 'bottom':\n          if (axis === 'y' && this.parent) {\n            // Position at bottom edge of parent\n            const parentSize = (this.parent as any).getSize?.() || { height: 600 };\n            return parentSize.height - (this.height || 100);\n          }\n          return axis === 'y' ? 0 : this.x;\n        default:\n          this.logger.warn('Container', 'applyPositionProperties', 'Unknown position keyword', {\n            id: this.id,\n            axis,\n            value,\n          });\n          return axis === 'x' ? this.x : this.y;\n      }\n    }\n\n    // Handle ParentPositionX/ParentPositionY classes\n    if (typeof value === 'object' && 'getValue' in value) {\n      // This is a ParentPositionX/ParentPositionY class\n      if (this.parent && typeof (this.parent as any).getSize === 'function') {\n        try {\n          return (value as any).getValue(this.parent);\n        } catch (error) {\n          this.logger.warn('Container', 'return', 'Failed to calculate parent-relative position', {\n            id: this.id,\n            axis,\n            error: error instanceof Error ? error.message : String(error),\n          });\n        }\n      } else {\n        this.logger.warn(\n          'Container',\n          'return',\n          'Parent-relative positioning requested but no parent available',\n          {\n            id: this.id,\n            axis,\n            value,\n          }\n        );\n      }\n      // Fallback to current position\n      return axis === 'x' ? this.x : this.y;\n    }\n\n    // Handle IRandomValueNumber\n    if (typeof value === 'object' && 'getRandomValue' in value) {\n      try {\n        return (value as IRandomValueNumber).getRandomValue();\n      } catch (error) {\n        this.logger.warn('Container', 'return', 'Failed to get random position value', {\n          id: this.id,\n          axis,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n      // Fallback to current position\n      return axis === 'x' ? this.x : this.y;\n    }\n\n    // Unknown type - log warning and use current position\n    this.logger.warn('Container', 'return', 'Unknown position value type', {\n      id: this.id,\n      axis,\n      value,\n      valueType: typeof value,\n    });\n\n    return axis === 'x' ? this.x : this.y;\n  }\n\n  /** Apply size properties from style */\n  private applySizeProperties(style: CommonIStyleProperties): void {\n    // Handle width with all supported types\n    if (style.width !== undefined) {\n      this.width = this.calculateSizeValue(style.width, 'width');\n      this.logger.debug('Container', 'applySizeProperties', 'Width calculated', {\n        id: this.id,\n        width: this.width,\n        originalValue: style.width,\n      });\n    }\n\n    // Handle height with all supported types\n    if (style.height !== undefined) {\n      this.height = this.calculateSizeValue(style.height, 'height');\n      this.logger.debug('Container', 'applySizeProperties', 'Height calculated', {\n        id: this.id,\n        height: this.height,\n        originalValue: style.height,\n      });\n    }\n\n    // Apply margin if specified\n    this.applyMarginProperties(style);\n\n    // Apply padding if specified\n    this.applyPaddingProperties(style);\n  }\n\n  /**\n   * Calculate size value from various input types\n   * Supports: number, string keywords, ParentWidth/ParentHeight, IRandomValueNumber\n   */\n  private calculateSizeValue(\n    value: number | 'fill' | 'auto' | ParentWidth | ParentHeight | IRandomValueNumber,\n    dimension: 'width' | 'height'\n  ): number {\n    // Handle direct numbers\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    // Handle string keywords\n    if (typeof value === 'string') {\n      switch (value) {\n        case 'fill':\n          // Fill the scene dimension\n          return dimension === 'width'\n            ? (this.scene.game.config.width as number)\n            : (this.scene.game.config.height as number);\n        case 'auto':\n          // Auto sizing - use content-based sizing or default\n          // For now, use a reasonable default (could be enhanced later)\n          return dimension === 'width' ? 200 : 150;\n        default:\n          this.logger.warn('Container', 'applySizeProperties', 'Unknown size keyword', {\n            id: this.id,\n            dimension,\n            value,\n          });\n          return dimension === 'width' ? 100 : 100;\n      }\n    }\n\n    // Handle ParentWidth/ParentHeight classes\n    if (typeof value === 'object' && 'getValue' in value) {\n      // This is a ParentWidth/ParentHeight class\n      if (this.parent && typeof (this.parent as any).getSize === 'function') {\n        try {\n          return (value as any).getValue(this.parent);\n        } catch (error) {\n          this.logger.warn('Container', 'return', 'Failed to calculate parent-relative size', {\n            id: this.id,\n            dimension,\n            error: error instanceof Error ? error.message : String(error),\n          });\n        }\n      } else {\n        this.logger.warn(\n          'Container',\n          'return',\n          'Parent-relative sizing requested but no parent available',\n          {\n            id: this.id,\n            dimension,\n            value,\n          }\n        );\n      }\n      // Fallback to default size\n      return dimension === 'width' ? 100 : 100;\n    }\n\n    // Handle IRandomValueNumber\n    if (typeof value === 'object' && 'getRandomValue' in value) {\n      try {\n        return (value as IRandomValueNumber).getRandomValue();\n      } catch (error) {\n        this.logger.warn('Container', 'return', 'Failed to get random size value', {\n          id: this.id,\n          dimension,\n          error: error instanceof Error ? error.message : String(error),\n        });\n      }\n      // Fallback to default size\n      return dimension === 'width' ? 100 : 100;\n    }\n\n    // Unknown type - log warning and use default\n    this.logger.warn('Container', 'return', 'Unknown size value type', {\n      id: this.id,\n      dimension,\n      value,\n      valueType: typeof value,\n    });\n\n    return dimension === 'width' ? 100 : 100;\n  }\n\n  /** Apply margin properties from style */\n  private applyMarginProperties(style: CommonIStyleProperties): void {\n    // Apply uniform margin\n    if (style.margin !== undefined) {\n      this.logger.debug('Container', 'applyMarginProperties', 'Applying uniform margin', {\n        id: this.id,\n        margin: style.margin,\n      });\n\n      // Note: Margin affects positioning relative to parent\n      // For now, we log it for future implementation\n      // This could be used to adjust container position within parent\n    }\n\n    // Apply individual margin properties\n    const marginProps = ['marginTop', 'marginRight', 'marginBottom', 'marginLeft'] as const;\n    marginProps.forEach(prop => {\n      if (style[prop] !== undefined) {\n        this.logger.debug('Container', 'applyMarginProperties', 'Applying individual margin', {\n          id: this.id,\n          property: prop,\n          value: style[prop],\n        });\n        // Note: Individual margins would need parent container coordination\n      }\n    });\n  }\n\n  /** Apply padding properties from style */\n  private applyPaddingProperties(style: CommonIStyleProperties): void {\n    // Apply uniform padding\n    if (style.padding !== undefined) {\n      this.logger.debug('Container', 'applyPaddingProperties', 'Applying uniform padding', {\n        id: this.id,\n        padding: style.padding,\n      });\n\n      // Update container spacing with new padding\n      if (typeof style.padding === 'number') {\n        // Single value padding\n        this.spacing.padding = {\n          left: style.padding,\n          right: style.padding,\n          top: style.padding,\n          bottom: style.padding,\n        };\n      } else if (typeof style.padding === 'object' && 'getRandomValue' in style.padding) {\n        // RandomValueNumber padding\n        const randomPadding = (style.padding as IRandomValueNumber).getRandomValue();\n        this.spacing.padding = {\n          left: randomPadding,\n          right: randomPadding,\n          top: randomPadding,\n          bottom: randomPadding,\n        };\n      }\n\n      this.logger.debug('Container', 'applyPaddingProperties', 'Padding updated', {\n        id: this.id,\n        newPadding: this.spacing.padding,\n      });\n    }\n\n    // Apply individual padding properties\n    const paddingProps = ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'] as const;\n    paddingProps.forEach(prop => {\n      if (style[prop] !== undefined) {\n        const value =\n          typeof style[prop] === 'number'\n            ? style[prop]\n            : (style[prop] as IRandomValueNumber)?.getRandomValue() || 0;\n\n        // Update specific padding side\n        switch (prop) {\n          case 'paddingTop':\n            this.spacing.padding.top = value as number;\n            break;\n          case 'paddingRight':\n            this.spacing.padding.right = value as number;\n            break;\n          case 'paddingBottom':\n            this.spacing.padding.bottom = value as number;\n            break;\n          case 'paddingLeft':\n            this.spacing.padding.left = value as number;\n            break;\n        }\n\n        this.logger.debug('Container', 'applyPaddingProperties', 'Applied individual padding', {\n          id: this.id,\n          property: prop,\n          value,\n        });\n      }\n    });\n  }\n\n  /** Apply visual properties from style */\n  private applyVisualProperties(style: CommonIStyleProperties): void {\n    if (style.alpha !== undefined) {\n      if (typeof style.alpha === 'number') {\n        this.setAlpha(style.alpha);\n      } else if (typeof style.alpha === 'object' && 'min' in style.alpha && 'max' in style.alpha) {\n        // Handle RandomValueNumber\n        const randomValue = (style.alpha as IRandomValueNumber).getRandomValue();\n        this.setAlpha(randomValue);\n      }\n    }\n\n    if (style.rotation !== undefined) {\n      if (typeof style.rotation === 'number') {\n        this.setRotation(style.rotation);\n      } else if (\n        typeof style.rotation === 'object' &&\n        'min' in style.rotation &&\n        'max' in style.rotation\n      ) {\n        // Handle RandomValueNumber\n        const randomValue = (style.rotation as IRandomValueNumber).getRandomValue();\n        this.setRotation(randomValue);\n      }\n    }\n\n    if (style.visible !== undefined) {\n      this.setVisible(style.visible);\n    }\n\n    if (style.interactive !== undefined) {\n      if (style.interactive) {\n        this.setInteractive();\n      } else {\n        this.disableInteractive();\n      }\n    }\n  }\n\n  /** Apply background properties from style */\n  private applyBackgroundProperties(style: CommonIStyleProperties): void {\n    // Apply background color\n    if (style.backgroundColor !== undefined) {\n      this.logger.debug('Container', 'applyBackgroundProperties', 'Applying background color', {\n        id: this.id,\n        backgroundColor: style.backgroundColor,\n      });\n\n      // For containers, we need to create a background rectangle\n      // Remove existing background if any\n      const existingBackground = this.getByName('background-rectangle');\n      if (existingBackground) {\n        existingBackground.destroy();\n      }\n\n      // Create new background rectangle\n      if (typeof style.backgroundColor === 'string') {\n        // Use container size or scene size as fallback\n        const rectWidth = this.width || (this.scene.game.config.width as number);\n        const rectHeight = this.height || (this.scene.game.config.height as number);\n\n        const backgroundRect = this.scene.add.rectangle(\n          0,\n          0, // Position relative to container\n          rectWidth,\n          rectHeight,\n          Phaser.Display.Color.ValueToColor(style.backgroundColor).color\n        );\n\n        // Set the background as the first child (behind everything)\n        backgroundRect.setName('background-rectangle');\n        this.addAt(backgroundRect, 0);\n\n        this.logger.debug(\n          'Container',\n          'applyBackgroundProperties',\n          'Background rectangle created',\n          {\n            id: this.id,\n            backgroundColor: style.backgroundColor,\n            size: { width: backgroundRect.width, height: backgroundRect.height },\n          }\n        );\n      }\n    }\n\n    // Note: Background image logic is handled by BackgroundContainer\n    // This container only handles background color\n  }\n\n  /** Apply additional style properties (shadows, borders, transforms, etc.) */\n  private applyAdditionalStyleProperties(style: any): void {\n    // Apply shadow properties\n    this.applyShadowProperties(style);\n\n    // Apply border properties\n    this.applyBorderProperties(style);\n\n    // Apply transform properties\n    this.applyTransformProperties(style);\n\n    // Apply border radius\n    this.applyBorderRadius(style);\n\n    // Apply box shadow\n    this.applyBoxShadow(style);\n  }\n\n  /** Apply shadow properties from style */\n  private applyShadowProperties(style: any): void {\n    // Remove existing shadow if any\n    const existingShadow = this.getByName('container-shadow');\n    if (existingShadow) {\n      existingShadow.destroy();\n    }\n\n    // Check if we have any shadow properties\n    if (\n      style.shadowColor !== undefined ||\n      style.shadowBlur !== undefined ||\n      style.shadowOffsetX !== undefined ||\n      style.shadowOffsetY !== undefined ||\n      style.shadowAlpha !== undefined\n    ) {\n      this.logger.debug('Container', 'applyShadowProperties', 'Applying shadow properties', {\n        id: this.id,\n        shadowColor: style.shadowColor,\n        shadowBlur: style.shadowBlur,\n        shadowOffsetX: style.shadowOffsetX,\n        shadowOffsetY: style.shadowOffsetY,\n        shadowAlpha: style.shadowAlpha,\n      });\n\n      // Create shadow rectangle\n      const shadowColor = style.shadowColor || '#000000';\n      const shadowBlur = style.shadowBlur || 0;\n      const shadowOffsetX = style.shadowOffsetX || 0;\n      const shadowOffsetY = style.shadowOffsetY || 0;\n      const shadowAlpha = style.shadowAlpha !== undefined ? style.shadowAlpha : 0.3;\n\n      // Create shadow as a slightly larger, offset rectangle\n      const shadowRect = this.scene.add.rectangle(\n        shadowOffsetX,\n        shadowOffsetY, // Offset position\n        (this.width || (this.scene.game.config.width as number)) + shadowBlur * 2,\n        (this.height || (this.scene.game.config.height as number)) + shadowBlur * 2,\n        Phaser.Display.Color.ValueToColor(shadowColor).color,\n        shadowAlpha\n      );\n\n      // Set the shadow behind everything\n      shadowRect.setName('container-shadow');\n      this.addAt(shadowRect, 0); // Add at index 0 (behind background)\n\n      this.logger.debug('Container', 'applyShadowProperties', 'Shadow created', {\n        id: this.id,\n        shadowColor,\n        shadowBlur,\n        shadowOffset: { x: shadowOffsetX, y: shadowOffsetY },\n        shadowAlpha,\n      });\n    }\n  }\n\n  /** Apply border properties from style */\n  private applyBorderProperties(style: any): void {\n    // Remove existing border if any\n    const existingBorder = this.getByName('container-border');\n    if (existingBorder) {\n      existingBorder.destroy();\n    }\n\n    // Check if we have border properties\n    if (\n      style.borderColor !== undefined ||\n      style.borderWidth !== undefined ||\n      style.borderBottomWidth !== undefined\n    ) {\n      const borderColor = style.borderColor || '#000000';\n      const borderWidth = style.borderWidth || 1;\n      const borderBottomWidth = style.borderBottomWidth || borderWidth;\n\n      this.logger.debug('Container', 'applyBorderProperties', 'Applying border properties', {\n        id: this.id,\n        borderColor,\n        borderWidth,\n        borderBottomWidth,\n      });\n\n      // Create border as a larger rectangle with a hole\n      const borderRect = this.scene.add.rectangle(\n        0,\n        0,\n        (this.width || (this.scene.game.config.width as number)) + borderWidth * 2,\n        (this.height || (this.scene.game.config.height as number)) + borderBottomWidth * 2, // Use bottom width for height\n        Phaser.Display.Color.ValueToColor(borderColor).color\n      );\n\n      // Create inner rectangle for the hole effect\n      const innerRect = this.scene.add.rectangle(\n        0,\n        0,\n        this.width || (this.scene.game.config.width as number),\n        this.height || (this.scene.game.config.height as number),\n        0x000000 // Black color for the hole\n      );\n\n      // Set the border above background but below content\n      borderRect.setName('container-border');\n      this.addAt(borderRect, 1); // Add after background\n      this.addAt(innerRect, 2); // Add after border\n\n      this.logger.debug('Container', 'applyBorderProperties', 'Border created', {\n        id: this.id,\n        borderColor,\n        borderWidth,\n        borderBottomWidth,\n      });\n    }\n  }\n\n  /** Apply transform properties from style */\n  private applyTransformProperties(style: any): void {\n    // Apply overall scale first (affects both X and Y)\n    if (style.scale !== undefined) {\n      const scale =\n        typeof style.scale === 'number'\n          ? style.scale\n          : (style.scale as IRandomValueNumber)?.getRandomValue() || 1;\n      this.setScale(scale, scale);\n\n      this.logger.debug('Container', 'applyTransformProperties', 'Applied overall scale', {\n        id: this.id,\n        scale,\n      });\n    }\n\n    // Apply scale mode/strategy (alias for scaleStrategy)\n    if (style.scaleMode !== undefined) {\n      this.logger.debug('Container', 'applyTransformProperties', 'Applied scale mode', {\n        id: this.id,\n        scaleMode: style.scaleMode,\n      });\n      // Note: scaleMode is an alias for scaleStrategy, already handled in layout properties\n    }\n\n    // Apply individual scale transformations (skew removed - not well supported in Phaser containers)\n    if (style.scaleX !== undefined) {\n      const scaleX =\n        typeof style.scaleX === 'number'\n          ? style.scaleX\n          : (style.scaleX as IRandomValueNumber)?.getRandomValue() || 1;\n      this.scaleX = scaleX;\n\n      this.logger.debug('Container', 'applyTransformProperties', 'Applied scale X', {\n        id: this.id,\n        scaleX,\n      });\n    }\n\n    if (style.scaleY !== undefined) {\n      const scaleY =\n        typeof style.scaleY === 'number'\n          ? style.scaleY\n          : (style.scaleY as IRandomValueNumber)?.getRandomValue() || 1;\n      this.scaleY = scaleY;\n\n      this.logger.debug('Container', 'applyTransformProperties', 'Applied scale Y', {\n        id: this.id,\n        scaleY,\n      });\n    }\n  }\n\n  /** Apply border radius to background and border */\n  private applyBorderRadius(style: any): void {\n    // Check if we have border radius (either from IStyleProperties or theme)\n    const borderRadius = style.borderRadius || style.borderRadiusValue;\n\n    if (borderRadius !== undefined) {\n      this.logger.debug('Container', 'applyBorderRadius', 'Applying border radius', {\n        id: this.id,\n        borderRadius,\n      });\n\n      // Note: Phaser rectangles don't support border radius natively\n      // This would require creating a custom shape or using graphics\n      // For now, we'll log it as a placeholder for future implementation\n      this.logger.debug(\n        'Container',\n        'applyBorderRadius',\n        'Border radius placeholder - would create rounded rectangle',\n        {\n          id: this.id,\n          borderRadius,\n        }\n      );\n    }\n  }\n\n  /** Apply box shadow effect */\n  private applyBoxShadow(style: any): void {\n    if (style.boxShadow !== undefined) {\n      this.logger.debug('Container', 'applyBoxShadow', 'Applying box shadow', {\n        id: this.id,\n        boxShadow: style.boxShadow,\n      });\n\n      // Parse box shadow string (e.g., \"0 2px 4px rgba(139, 69, 19, 0.2)\")\n      const boxShadow = this.parseBoxShadow(style.boxShadow);\n\n      if (boxShadow) {\n        // Remove existing box shadow if any\n        const existingBoxShadow = this.getByName('box-shadow');\n        if (existingBoxShadow) {\n          existingBoxShadow.destroy();\n        }\n\n        // Create box shadow as a larger, offset rectangle\n        const shadowRect = this.scene.add.rectangle(\n          boxShadow.offsetX,\n          boxShadow.offsetY,\n          (this.width || (this.scene.game.config.width as number)) + boxShadow.blur * 2,\n          (this.height || (this.scene.game.config.height as number)) + boxShadow.blur * 2,\n          Phaser.Display.Color.ValueToColor(boxShadow.color).color,\n          boxShadow.alpha\n        );\n\n        // Set the box shadow behind everything\n        shadowRect.setName('box-shadow');\n        this.addAt(shadowRect, 0); // Add at index 0 (behind everything)\n\n        this.logger.debug('Container', 'applyBoxShadow', 'Box shadow created', {\n          id: this.id,\n          boxShadow: boxShadow,\n        });\n      }\n    }\n  }\n\n  /** Parse CSS box-shadow string into usable values */\n  private parseBoxShadow(boxShadow: string): {\n    offsetX: number;\n    offsetY: number;\n    blur: number;\n    color: string;\n    alpha: number;\n  } | null {\n    try {\n      // Simple regex to parse box-shadow values\n      // Format: \"offsetX offsetY blur color\" or \"offsetX offsetY blur color alpha\"\n      const match = boxShadow.match(/(-?\\d+(?:px)?)\\s+(-?\\d+(?:px)?)\\s+(\\d+(?:px)?)\\s+(.+)/);\n\n      if (match) {\n        const offsetX = parseInt(match[1]) || 0;\n        const offsetY = parseInt(match[2]) || 0;\n        const blur = parseInt(match[3]) || 0;\n\n        // Extract color and alpha from the last part\n        let color = '#000000';\n        let alpha = 0.3;\n\n        const colorPart = match[4].trim();\n        if (colorPart.includes('rgba')) {\n          // Parse rgba(r, g, b, a)\n          const rgbaMatch = colorPart.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*([\\d.]+))?\\)/);\n          if (rgbaMatch) {\n            const r = parseInt(rgbaMatch[1]);\n            const g = parseInt(rgbaMatch[2]);\n            const b = parseInt(rgbaMatch[3]);\n            alpha = rgbaMatch[4] ? parseFloat(rgbaMatch[4]) : 1;\n            color = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n          }\n        } else if (colorPart.includes('#')) {\n          color = colorPart;\n        } else {\n          color = colorPart;\n        }\n\n        return { offsetX, offsetY, blur, color, alpha };\n      }\n    } catch (error) {\n      this.logger.warn('Container', 'parseBoxShadow', 'Failed to parse box shadow', {\n        id: this.id,\n        boxShadow,\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n\n    return null;\n  }\n\n  /**\n   * Apply style properties directly without triggering the full style cascade\n   * This prevents infinite recursion when applying theme classes\n   */\n  private applyStylePropertiesDirectly(styleProperties: CommonIStyleProperties): void {\n    // Apply position properties\n    this.applyPositionProperties(styleProperties);\n\n    // Apply size properties\n    this.applySizeProperties(styleProperties);\n\n    // Apply visual properties\n    this.applyVisualProperties(styleProperties);\n\n    // Apply background properties\n    this.applyBackgroundProperties(styleProperties);\n\n    // Apply additional style properties (typography, borders, shadows, etc.)\n    this.applyAdditionalStyleProperties(styleProperties);\n  }\n\n  /**\n   * NEW: Apply style cascade logic (default responsive -> breakpoint responsive -> theme config)\n   */\n  private applyStyleCascade(layoutProperties: CommonIStyleProperties): CommonIStyleProperties {\n    if (!this.injectedConfigs) {\n      this.logger.debug(\n        'Container',\n        'applyStyleCascade',\n        'No injected configs, using layout properties directly',\n        { id: this.id }\n      );\n      return layoutProperties;\n    }\n\n    let finalProperties = { ...layoutProperties };\n\n    // Step 1: Apply default responsive settings (Highest priority)\n    if (this.injectedConfigs.responsive?.default) {\n      // Find the default layout for this specific container\n      const defaultLayout = this.injectedConfigs.responsive.default.find(\n        (layout: any) => layout.id === this.id\n      );\n\n      if (defaultLayout?.layoutProperties) {\n        this.logger.debug(\n          'Container',\n          'applyStyleCascade',\n          'Applying default responsive settings',\n          {\n            id: this.id,\n            defaultProperties: defaultLayout.layoutProperties,\n          }\n        );\n        finalProperties = { ...finalProperties, ...defaultLayout.layoutProperties };\n      }\n    }\n\n    // Step 2: Apply breakpoint-specific responsive settings (Medium priority)\n    if (\n      this.injectedConfigs.responsive?.responsiveSettings &&\n      this.injectedConfigs.currentBreakpoint\n    ) {\n      const breakpointLayouts =\n        this.injectedConfigs.responsive.responsiveSettings[this.injectedConfigs.currentBreakpoint];\n\n      if (breakpointLayouts) {\n        // Find the breakpoint-specific layout for this container\n        const breakpointLayout = breakpointLayouts.find((layout: any) => layout.id === this.id);\n\n        if (breakpointLayout?.layoutProperties) {\n          this.logger.debug(\n            'Container',\n            'applyStyleCascade',\n            'Applying breakpoint-specific settings',\n            {\n              id: this.id,\n              breakpoint: this.injectedConfigs.currentBreakpoint,\n              breakpointProperties: breakpointLayout.layoutProperties,\n            }\n          );\n          finalProperties = { ...finalProperties, ...breakpointLayout.layoutProperties };\n        }\n      }\n    }\n\n    // Step 3: Apply theme config classes (Lowest priority)\n    if (finalProperties.classes && this.injectedConfigs.theme?.themeClasses) {\n      this.logger.debug('Container', 'applyStyleCascade', 'Applying theme classes', {\n        id: this.id,\n        classes: finalProperties.classes,\n        themeName: this.injectedConfigs.theme.themeName,\n      });\n\n      // Apply theme classes from theme config (not responsive config)\n      this.applyThemeClasses(finalProperties.classes, this.injectedConfigs.theme);\n\n      // Merge theme class properties into final properties\n      if (finalProperties.classes && this.injectedConfigs?.theme?.themeClasses) {\n        const themeClasses = this.injectedConfigs.theme!.themeClasses;\n        finalProperties.classes.forEach(className => {\n          const themeClass = themeClasses[className];\n          if (themeClass) {\n            this.logger.debug('Container', 'unknown', 'Merging theme class properties', {\n              id: this.id,\n              className,\n              themeClass,\n            });\n            finalProperties = { ...finalProperties, ...themeClass };\n          }\n        });\n      }\n    }\n\n    this.logger.debug('Container', 'unknown', 'Style cascade completed', {\n      id: this.id,\n      originalProperties: layoutProperties,\n      finalProperties,\n    });\n\n    return finalProperties;\n  }\n\n  // ===== IContainer IMPLEMENTATION =====\n\n  /** Add a child game object to this container */\n  addChild(child: IGameObject): void {\n    if (this.children.length >= this.constraints.maxChildren) {\n      this.logger.warn('Container', 'addChild', 'Cannot add child - max children reached', {\n        id: this.id,\n        currentCount: this.children.length,\n        maxCount: this.constraints.maxChildren,\n      });\n      return;\n    }\n\n    this.children.push(child);\n\n    // If the child has a phaserObject, add it to the Phaser container\n    if ((child as any).phaserObject) {\n      this.add((child as any).phaserObject);\n    } else if (child instanceof Phaser.GameObjects.GameObject) {\n      this.add(child);\n    }\n\n    this.logger.debug('Container', 'addChild', 'Child added to container', {\n      id: this.id,\n      childId: (child as any).id || 'unknown',\n      childCount: this.children.length,\n    });\n  }\n\n  /** Remove a child game object from this container */\n  removeChild(child: IGameObject): void {\n    const index = this.children.indexOf(child);\n    if (index !== -1) {\n      this.children.splice(index, 1);\n\n      // If the child has a phaserObject, remove it from the Phaser container\n      if ((child as any).phaserObject) {\n        this.remove((child as any).phaserObject);\n      } else if (child instanceof Phaser.GameObjects.GameObject) {\n        this.remove(child);\n      }\n\n      this.logger.debug('Container', 'removeChild', 'Child removed from container', {\n        id: this.id,\n        childId: (child as any).id || 'unknown',\n        childCount: this.children.length,\n      });\n    }\n  }\n\n  /** Get child by ID */\n  getChild(id: string): IGameObject | undefined {\n    return this.children.find(child => (child as any).id === id);\n  }\n\n  /** Get all children */\n  getAllChildren(): IGameObject[] {\n    return [...this.children];\n  }\n\n  /** Clear all children */\n  clearChildren(): void {\n    this.children.length = 0;\n    this.removeAll();\n    this.logger.debug('Container', 'clearChildren', 'All children cleared', { id: this.id });\n  }\n\n  // ===== RESPONSIVE BEHAVIOR =====\n\n  /** Handle responsive resize from scene - now delegates to setStyle */\n  handleResponsiveResize(width: number, height: number): void {\n    this.logger.debug('Container', 'handleResponsiveResize', 'Handling responsive resize', {\n      id: this.id,\n      newDimensions: { width, height },\n      currentDimensions: this.size,\n    });\n\n    // Update layout properties with new dimensions and apply via setStyle\n    if (this.layoutProperties) {\n      this.layoutProperties = {\n        ...this.layoutProperties,\n        width,\n        height,\n      };\n      this.setStyle(this.layoutProperties);\n    }\n  }\n\n  /** Handle resize events and propagate to children */\n  resize(width: number, height: number): void {\n    this.logger.debug('Container', 'resize', 'Resize called', {\n      id: this.id,\n      newDimensions: { width, height },\n      currentDimensions: this.size,\n    });\n\n    // Template method pattern: split resize into three phases\n\n    // Phase 1: Resize self (can be overridden by subclasses)\n    this.resizeSelf(width, height);\n\n    // Phase 2: Propagate resize to children\n    this.propagateResizeToChildren(width, height);\n\n    // Phase 3: Post-resize operations (can be overridden by subclasses)\n    this.resizeAfter(width, height);\n  }\n\n  /**\n   * Phase 1: Resize the container itself\n   * This method can be overridden by subclasses to implement custom resize logic\n   */\n  protected resizeSelf(width: number, height: number): void {\n    this.logger.debug('Container', 'resizeSelf', 'Resizing self', {\n      id: this.id,\n      newDimensions: { width, height },\n      currentDimensions: this.size,\n    });\n\n    // Apply responsive styling if we have layout properties\n    if (this.layoutProperties) {\n      // Update the layout properties with the new dimensions\n      this.layoutProperties = {\n        ...this.layoutProperties,\n        width,\n        height,\n      };\n\n      // Apply the updated style properties (including size)\n      this.setStyle(this.layoutProperties);\n    }\n\n    // Note: setSize is now handled by setStyle through applySizeProperties\n  }\n\n  /**\n   * Phase 2: Propagate resize event to all children\n   */\n  protected propagateResizeToChildren(width: number, height: number): void {\n    this.logger.debug('Container', 'propagateResizeToChildren', 'Propagating resize to children', {\n      id: this.id,\n      newDimensions: { width, height },\n      childCount: this.children.length,\n    });\n\n    // Loop through all children and call their resize method if available\n    this.children.forEach((child: any, index: number) => {\n      if (child && typeof child.resize === 'function') {\n        try {\n          child.resize(width, height);\n          this.logger.debug('Container', 'propagateResizeToChildren', 'Child resize called', {\n            id: this.id,\n            childName: child.name || child.id || `child-${index}`,\n            childType: child.constructor.name,\n          });\n        } catch (error) {\n          this.logger.warn('Container', 'propagateResizeToChildren', 'Failed to resize child', {\n            id: this.id,\n            childName: child.name || child.id || `child-${index}`,\n            error: error instanceof Error ? error.message : String(error),\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Phase 3: Post-resize operations\n   * This method can be overridden by subclasses to implement post-resize logic\n   */\n  protected resizeAfter(width: number, height: number): void {\n    this.logger.debug('Container', 'resizeAfter', 'Post-resize operations', {\n      id: this.id,\n      newDimensions: { width, height },\n    });\n\n    // Default implementation is empty\n    // Subclasses can override this to implement custom post-resize logic\n  }\n\n  // ===== UTILITY METHODS =====\n\n  /** Get bounds of this container */\n  getContainerBounds(): IBounds {\n    return {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n    };\n  }\n\n  /** Get layout information */\n  getLayoutInfo(): any {\n    return {\n      id: this.id,\n      type: this.containerType,\n      childCount: this.children.length,\n    };\n  }\n\n  /** Invalidate layout (trigger recalculation) */\n  invalidateLayout(): void {\n    this.logger.debug('Container', 'invalidateLayout', 'Layout invalidated', { id: this.id });\n    // Implementation for layout invalidation\n  }\n\n  /** Update layout */\n  updateLayout(): void {\n    this.logger.debug('Container', 'updateLayout', 'Updating layout', { id: this.id });\n    // Implementation for layout update\n  }\n\n  /** Destroy the container */\n  destroy(fromScene?: boolean): void {\n    this.logger.debug('Container', 'destroy', 'Destroying container', { id: this.id });\n\n    // Clear children\n    this.clearChildren();\n\n    // Call parent destroy\n    super.destroy(fromScene);\n  }\n\n  // ===== STATIC FACTORY METHOD =====\n\n  /**\n   * Static factory method to create a Container from configuration\n   * This method is called by the scene loader system\n   */\n  static createFromConfig(\n    config: any,\n    scene: Phaser.Scene,\n    parent?: Phaser.GameObjects.Container\n  ): Container {\n    const logger = Logger.getInstance();\n\n    logger.debug('Container', 'createFromConfig', 'Creating Container from config', {\n      objectId: config.id,\n      objectName: config.name,\n      hasParent: !!parent,\n      parentId: parent?.name || 'none',\n    });\n\n    try {\n      // Create the container\n      const container = new Container(scene, config.x || 0, config.y || 0);\n\n      // Set basic properties\n      if (config.name) {\n        container.name = config.name;\n      }\n\n      // Set ID for internal tracking\n      (container as any).id = config.id;\n\n      // NEW: Inject responsive and theme configurations from scene\n      if ((scene as any).getGameObjectConfigs) {\n        logger.debug(\n          'Container',\n          'createFromConfig',\n          'Scene supports getGameObjectConfigs, injecting configs',\n          {\n            objectId: config.id,\n            sceneType: scene.constructor.name,\n          }\n        );\n\n        const configs = (scene as any).getGameObjectConfigs(config.id);\n        logger.debug('Container', 'createFromConfig', 'Received configs from scene', {\n          objectId: config.id,\n          hasResponsive: !!configs?.responsive,\n          hasTheme: !!configs?.theme,\n          currentBreakpoint: configs?.currentBreakpoint,\n        });\n\n        container.initializeWithConfigs(configs);\n      } else {\n        logger.warn(\n          'Container',\n          'createFromConfig',\n          'Scene does not support getGameObjectConfigs',\n          {\n            objectId: config.id,\n            sceneType: scene.constructor.name,\n          }\n        );\n      }\n\n      // Set properties if provided\n      if (config.properties) {\n        // Set background color if specified\n        if (config.properties.backgroundColor) {\n          container.setStyle({\n            backgroundColor: config.properties.backgroundColor,\n            maintainAspectRatio: false,\n            scaleStrategy: 'stretch',\n            alignment: 'center',\n          });\n        }\n\n        // Set size properties if specified\n        if (config.properties.width || config.properties.height) {\n          // Handle 'fill' values by setting to scene dimensions\n          let width = config.properties.width;\n          let height = config.properties.height;\n\n          if (width === 'fill') {\n            width = scene.game.config.width as number;\n          }\n          if (height === 'fill') {\n            height = scene.game.config.height as number;\n          }\n\n          container.setStyle({\n            width: width,\n            height: height,\n            maintainAspectRatio: false,\n            scaleStrategy: 'stretch',\n            alignment: 'center',\n          });\n        }\n\n        // Set interactive state if specified\n        if (config.properties.interactive !== undefined) {\n          container.setInteractive(config.properties.interactive);\n        }\n      }\n\n      // Add to parent if specified\n      if (parent) {\n        parent.add(container);\n        logger.debug('Container', 'createFromConfig', 'Container added to parent', {\n          objectId: config.id,\n          parentId: parent.name || 'unnamed',\n        });\n      } else {\n        // Add to scene if no parent\n        scene.add.existing(container);\n        logger.debug('Container', 'createFromConfig', 'Container added to scene', {\n          objectId: config.id,\n        });\n      }\n\n      logger.info('Container', 'createFromConfig', 'Container created successfully from config', {\n        objectId: config.id,\n        objectName: config.name,\n        phaserObjectType: container.constructor.name,\n      });\n\n      return container;\n    } catch (error) {\n      logger.error('Container', 'createFromConfig', 'Failed to create Container from config', {\n        objectId: config.id,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n}\n","import * as Phaser from 'phaser';\nimport { logger } from '../core/Logger';\nimport { BaseGameObjectFactory } from '../abstract/factories/IGameObjectFactory';\nimport type { IFactoryInput } from './interfaces/IFactoryInput';\nimport { Container } from '../object/container/Container';\n\n/**\n * Factory for creating container game objects\n * Now creates custom Container wrapper with injected configurations\n */\nexport class ContainerFactory extends BaseGameObjectFactory {\n  constructor() {\n    super(['container']);\n    logger.debug('ContainerFactory', 'constructor', 'ContainerFactory initialized', {\n      supportedTypes: this.getSupportedTypes(),\n    });\n  }\n\n  /**\n   * Create a container game object from configuration\n   * Now creates custom Container wrapper with injected configurations\n   */\n  createGameObject(input: IFactoryInput): Phaser.GameObjects.Container | null {\n    // Type guard to ensure we have a container factory input\n    if (input.type !== 'container') {\n      logger.error(\n        'ContainerFactory',\n        'createGameObject',\n        'Invalid input type for container factory',\n        {\n          expectedType: 'container',\n          actualType: input.type,\n        }\n      );\n      return null;\n    }\n\n    const config = input.config;\n    const scene = input.scene;\n\n    logger.debug('ContainerFactory', 'createGameObject', 'Creating container game object', {\n      objectId: config.id,\n      objectType: input.type,\n      config: {\n        x: config.x,\n        y: config.y,\n        width: config.width,\n        height: config.height,\n        name: config.name,\n      },\n    });\n\n    try {\n      // NEW: Create our custom Container wrapper instead of plain Phaser container\n      const container = new Container(\n        scene,\n        config.id,\n        config.x || 0,\n        config.y || 0,\n        (input.parent as any) || null // parent from input\n      );\n\n      logger.debug('ContainerFactory', 'createGameObject', 'Custom Container wrapper created', {\n        objectId: config.id,\n        containerType: container.constructor.name,\n        position: { x: container.x, y: container.y },\n      });\n\n      // NEW: Inject responsive and theme configurations from scene\n      if ((scene as any).getGameObjectConfigs) {\n        logger.debug(\n          'ContainerFactory',\n          'createGameObject',\n          'Scene supports getGameObjectConfigs, calling it',\n          {\n            objectId: config.id,\n            sceneType: scene.constructor.name,\n          }\n        );\n\n        const configs = (scene as any).getGameObjectConfigs(config.id);\n        logger.debug('ContainerFactory', 'createGameObject', 'Received configs from scene', {\n          objectId: config.id,\n          configs,\n          hasResponsive: !!configs?.responsive,\n          hasTheme: !!configs?.theme,\n          currentBreakpoint: configs?.currentBreakpoint,\n        });\n\n        container.initializeWithConfigs(configs);\n\n        logger.debug(\n          'ContainerFactory',\n          'createGameObject',\n          'Configurations injected into container',\n          {\n            objectId: config.id,\n            hasResponsive: !!configs.responsive,\n            hasTheme: !!configs.theme,\n            currentBreakpoint: configs.currentBreakpoint,\n          }\n        );\n      } else {\n        logger.warn(\n          'ContainerFactory',\n          'createGameObject',\n          'Scene does not support getGameObjectConfigs',\n          {\n            objectId: config.id,\n            sceneType: scene.constructor.name,\n          }\n        );\n      }\n\n      // Set common properties\n      this.setCommonProperties(container, input);\n\n      // Set container size\n      if (config.width && config.width !== 'fill') {\n        logger.debug('ContainerFactory', 'createGameObject', 'Setting container size', {\n          objectId: config.id,\n          width: config.width,\n          height: config.height || config.width,\n        });\n        container.setSize(\n          config.width,\n          typeof config.height === 'number' ? config.height : config.width\n        );\n      }\n\n      // Set name for debugging\n      container.name = config.name || config.id;\n\n      // Make container interactive if specified\n      if (config.interactive !== undefined) {\n        logger.debug('ContainerFactory', 'createGameObject', 'Setting container interactivity', {\n          objectId: config.id,\n          interactive: config.interactive,\n        });\n        if (config.interactive) {\n          container.setInteractive();\n        } else {\n          container.disableInteractive();\n        }\n      }\n\n      // Set background color if specified\n      if (config.backgroundColor) {\n        logger.debug('ContainerFactory', 'createGameObject', 'Setting container background color', {\n          objectId: config.id,\n          backgroundColor: config.backgroundColor,\n        });\n        // Create a background rectangle\n        const background = scene.add.rectangle(\n          0,\n          0,\n          typeof config.width === 'number' ? config.width : 100,\n          typeof config.height === 'number' ? config.height : 100,\n          this.parseColor(String(config.backgroundColor))\n        );\n        container.add(background);\n\n        // Set the background as the container's background\n        container.setSize(background.width, background.height);\n\n        logger.debug('ContainerFactory', 'createGameObject', 'Container background added', {\n          objectId: config.id,\n          backgroundSize: { width: background.width, height: background.height },\n        });\n      }\n\n      logger.info('ContainerFactory', 'createGameObject', 'Custom Container created successfully', {\n        objectId: config.id,\n        containerType: container.constructor.name,\n        containerName: container.name,\n        hasBackground: !!config.backgroundColor,\n        size: { width: container.width, height: container.height },\n      });\n\n      return container;\n    } catch (error) {\n      logger.error(\n        'ContainerFactory',\n        'createGameObject',\n        'Failed to create container: ${config.id}',\n        error\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Parse color string to hex number\n   */\n  private parseColor(color: string): number {\n    try {\n      // Remove # if present\n      const cleanColor = color.startsWith('#') ? color.slice(1) : color;\n\n      // Parse hex color\n      const hexColor = parseInt(cleanColor, 16);\n\n      logger.debug('ContainerFactory', 'parseColor', 'Parsed color', {\n        originalColor: color,\n        cleanColor,\n        hexColor: `0x${cleanColor}`,\n        parsedValue: hexColor,\n      });\n\n      return hexColor;\n    } catch (error) {\n      logger.warn('ContainerFactory', 'parseColor', 'Failed to parse color, using default', {\n        color,\n        error: error instanceof Error ? error.message : String(error),\n      });\n      return 0x808080; // Default gray color\n    }\n  }\n}\n","import * as Phaser from 'phaser';\nimport { BaseGameObjectFactory } from '../abstract/factories/IGameObjectFactory';\nimport { Logger } from '../core/Logger';\nimport type { IFactoryInput } from './interfaces/IFactoryInput';\n\n/**\n * Factory for creating image game objects\n */\nexport class ImageFactory extends BaseGameObjectFactory {\n  private logger: Logger = Logger.getInstance();\n\n  constructor() {\n    super(['image']);\n  }\n\n  /**\n   * Create an image game object from configuration\n   */\n  createGameObject(input: IFactoryInput): Phaser.GameObjects.Image | null {\n    // Extract config and scene from input\n    const config = (input as any).config || {};\n    const scene = input.scene;\n\n    try {\n      // Check if the texture key exists\n      if (!config.textureKey || !scene.textures.exists(config.textureKey)) {\n        this.logger.warn(\n          'ImageFactory',\n          'createGameObject',\n          `Texture key '${config.textureKey}' not found for image: ${config.id}`,\n          null\n        );\n        return null;\n      }\n\n      const image = scene.add.image(config.x || 0, config.y || 0, config.textureKey);\n\n      // Set common properties\n      this.setCommonProperties(image, config);\n\n      // Set image-specific properties\n      if (config.scale) {\n        if (typeof config.scale === 'number') {\n          image.setScale(config.scale);\n        } else if (config.scale.x !== undefined || config.scale.y !== undefined) {\n          image.setScale(config.scale.x || 1, config.scale.y || 1);\n        }\n      }\n\n      // Set origin if specified\n      if (config.origin) {\n        image.setOrigin(config.origin.x || 0.5, config.origin.y || 0.5);\n      }\n\n      // Set interactive if specified\n      if (config.interactive) {\n        image.setInteractive();\n      }\n\n      return image;\n    } catch (error) {\n      this.logger.error(\n        'ImageFactory',\n        'createGameObject',\n        `Error creating image '${config?.id || 'unknown'}':`,\n        error\n      );\n      return null;\n    }\n  }\n}\n","import * as Phaser from 'phaser';\nimport { BaseGameObjectFactory } from '../abstract/factories/IGameObjectFactory';\nimport { Logger } from '../core/Logger';\nimport type { IFactoryInput } from './interfaces/IFactoryInput';\n\n/**\n * Factory for creating text game objects\n */\nexport class TextFactory extends BaseGameObjectFactory {\n  private logger: Logger = Logger.getInstance();\n\n  constructor() {\n    super(['text']);\n  }\n\n  /**\n   * Create a text game object from configuration\n   */\n  createGameObject(input: IFactoryInput): Phaser.GameObjects.Text | null {\n    // Extract config and scene from input\n    const config = (input as any).config || {};\n    const scene = input.scene;\n\n    try {\n      const textConfig: Phaser.Types.GameObjects.Text.TextStyle = {\n        fontSize: config.fontSize || '32px',\n        fontFamily: config.fontFamily || 'Arial',\n        color: config.color || '#ffffff',\n        backgroundColor: config.backgroundColor,\n        stroke: config.stroke,\n        strokeThickness: config.strokeThickness || 0,\n        shadow: config.shadow,\n        align: config.align || 'left',\n        wordWrap: config.wordWrap || false,\n        maxLines: config.maxLines,\n      };\n\n      const text = scene.add.text(config.x || 0, config.y || 0, config.content || '', textConfig);\n\n      // Set common properties\n      this.setCommonProperties(text, config);\n\n      // Set text-specific properties\n      if (config.origin) {\n        text.setOrigin(config.origin.x || 0, config.origin.y || 0);\n      }\n\n      // Set interactive if specified\n      if (config.interactive) {\n        text.setInteractive();\n      }\n\n      return text;\n    } catch (error) {\n      this.logger.error(\n        'TextFactory',\n        'createGameObject',\n        `Error creating text '${config?.id || 'unknown'}':`,\n        error\n      );\n      return null;\n    }\n  }\n}\n","import * as Phaser from 'phaser';\nimport { BaseGameObjectFactory } from '../abstract/factories/IGameObjectFactory';\nimport { Logger } from '../core/Logger';\nimport type { IFactoryInput } from './interfaces/IFactoryInput';\n\n/**\n * Factory for creating button game objects\n */\nexport class ButtonFactory extends BaseGameObjectFactory {\n  private logger: Logger = Logger.getInstance();\n\n  constructor() {\n    super(['button']);\n  }\n\n  /**\n   * Create a button game object from configuration\n   */\n  createGameObject(input: IFactoryInput): Phaser.GameObjects.Container | null {\n    // Extract config and scene from input\n    const config = (input as any).config || {};\n    const scene = input.scene;\n\n    try {\n      // Create a container for the button\n      const button = scene.add.container(config.x || 0, config.y || 0);\n\n      // Set common properties\n      this.setCommonProperties(button, config);\n\n      // Create button background (rectangle)\n      const background = scene.add.rectangle(\n        0,\n        0,\n        config.width || 200,\n        config.height || 50,\n        config.backgroundColor || 0x4a90e2\n      );\n\n      // Create button text\n      const text = scene.add.text(0, 0, config.text || 'Button', {\n        fontSize: config.fontSize || '18px',\n        color: config.textColor || '#ffffff',\n        fontFamily: config.fontFamily || 'Arial',\n      });\n\n      // Center text in button\n      text.setOrigin(0.5);\n\n      // Add background and text to button container\n      button.add([background, text]);\n\n      // Set button size\n      if (config.width && config.width !== 'fill') {\n        button.setSize(config.width, config.height || config.width);\n      }\n\n      // Make button interactive\n      button.setInteractive();\n\n      // Add hover effects if specified\n      if (config.hoverEffects) {\n        button.on('pointerover', () => {\n          if (config.hoverEffects.scale) {\n            button.setScale(config.hoverEffects.scale);\n          }\n          if (config.hoverEffects.tint) {\n            background.setFillStyle(\n              Phaser.Display.Color.ValueToColor(config.hoverEffects.tint).color\n            );\n          }\n        });\n\n        button.on('pointerout', () => {\n          if (config.hoverEffects.scale) {\n            button.setScale(1);\n          }\n          if (config.hoverEffects.tint) {\n            background.setFillStyle(\n              Phaser.Display.Color.ValueToColor(config.backgroundColor || '#ffffff').color\n            );\n          }\n        });\n      }\n\n      // Add click handler if specified\n      if (config.onClick) {\n        button.on('pointerdown', config.onClick);\n      }\n\n      return button;\n    } catch (error) {\n      this.logger.error(\n        'ButtonFactory',\n        'createGameObject',\n        `Error creating button '${config?.id || 'unknown'}':`,\n        error\n      );\n      return null;\n    }\n  }\n}\n","import * as Phaser from 'phaser';\nimport { BaseGameObjectFactory } from '../abstract/factories/IGameObjectFactory';\nimport { Logger } from '../core/Logger';\nimport type { IFactoryInput } from './interfaces/IFactoryInput';\n\n/**\n * Factory for creating shape game objects\n */\nexport class ShapeFactory extends BaseGameObjectFactory {\n  private logger: Logger = Logger.getInstance();\n\n  constructor() {\n    super(['rectangle', 'circle', 'ellipse', 'triangle', 'polygon']);\n    this.logger.debug('ShapeFactory', 'super', 'ShapeFactory initialized', {\n      supportedTypes: this.getSupportedTypes(),\n    });\n  }\n\n  /**\n   * Create a shape game object from configuration\n   */\n  createGameObject(input: IFactoryInput): Phaser.GameObjects.GameObject | null {\n    // Extract config and scene from input\n    const config = (input as any).config || {};\n    const scene = input.scene;\n\n    this.logger.debug('ShapeFactory', 'createGameObject', 'Creating shape game object', {\n      objectId: config.id,\n      objectType: config.type,\n      config: {\n        x: config.x,\n        y: config.y,\n        width: config.width,\n        height: config.height,\n        fillColor: config.fillColor,\n        name: config.name,\n      },\n    });\n\n    try {\n      let shape: Phaser.GameObjects.GameObject | null = null;\n\n      switch (config.type) {\n        case 'rectangle':\n          shape = this.createRectangle(scene, config);\n          break;\n        case 'circle':\n          shape = this.createCircle(scene, config);\n          break;\n        case 'ellipse':\n          shape = this.createEllipse(scene, config);\n          break;\n        case 'triangle':\n          shape = this.createTriangle(scene, config);\n          break;\n        case 'polygon':\n          shape = this.createPolygon(scene, config);\n          break;\n        default:\n          this.logger.warn(\n            'ShapeFactory',\n            'createGameObject',\n            'Unknown shape type: ${config.type}',\n            {\n              objectId: config.id,\n              supportedTypes: this.getSupportedTypes(),\n            }\n          );\n          return null;\n      }\n\n      if (shape) {\n        // Set common properties\n        this.setCommonProperties(shape, config);\n\n        // Set name for debugging\n        shape.name = config.name || config.id;\n\n        this.logger.info('ShapeFactory', 'createGameObject', 'Shape created successfully', {\n          objectId: config.id,\n          shapeType: config.type,\n          phaserObjectType: shape.constructor.name,\n          shapeName: shape.name,\n        });\n      }\n\n      return shape;\n    } catch (error) {\n      this.logger.error('ShapeFactory', 'createGameObject', 'Error creating shape: ${config.id}', {\n        error: error instanceof Error ? error.message : String(error),\n        objectId: config.id,\n        objectType: config.type,\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Create a rectangle shape\n   */\n  private createRectangle(scene: Phaser.Scene, config: any): Phaser.GameObjects.Rectangle {\n    this.logger.debug('ShapeFactory', 'createRectangle', 'Creating rectangle shape', {\n      objectId: config.id,\n      dimensions: { width: config.width, height: config.height },\n      fillColor: config.fillColor,\n    });\n\n    const rectangle = scene.add.rectangle(\n      config.x || 0,\n      config.y || 0,\n      config.width || 100,\n      config.height || 100,\n      this.parseColor(config.fillColor || 0xffffff)\n    );\n\n    // Set origin to top-left for easier positioning\n    rectangle.setOrigin(0, 0);\n\n    // Set size if specified\n    if (config.width && config.width !== 'fill') {\n      rectangle.setSize(config.width, config.height || config.width);\n    }\n\n    return rectangle;\n  }\n\n  /**\n   * Create a circle shape\n   */\n  private createCircle(scene: Phaser.Scene, config: any): Phaser.GameObjects.Shape {\n    this.logger.debug('ShapeFactory', 'createCircle', 'Creating circle shape', {\n      objectId: config.id,\n      radius: config.radius || config.width / 2,\n      fillColor: config.fillColor,\n    });\n\n    const radius = config.radius || (config.width || 100) / 2;\n    const circle = scene.add.circle(\n      config.x || 0,\n      config.y || 0,\n      radius,\n      this.parseColor(config.fillColor || 0xffffff)\n    );\n\n    // Set origin to center for circles\n    circle.setOrigin(0.5, 0.5);\n\n    return circle;\n  }\n\n  /**\n   * Create an ellipse shape\n   */\n  private createEllipse(scene: Phaser.Scene, config: any): Phaser.GameObjects.Shape {\n    this.logger.debug('ShapeFactory', 'createEllipse', 'Creating ellipse shape', {\n      objectId: config.id,\n      dimensions: { width: config.width, height: config.height },\n      fillColor: config.fillColor,\n    });\n\n    const ellipse = scene.add.ellipse(\n      config.x || 0,\n      config.y || 0,\n      config.width || 100,\n      config.height || 100,\n      this.parseColor(config.fillColor || 0xffffff)\n    );\n\n    // Set origin to center for ellipses\n    ellipse.setOrigin(0.5, 0.5);\n\n    return ellipse;\n  }\n\n  /**\n   * Create a triangle shape\n   */\n  private createTriangle(scene: Phaser.Scene, config: any): Phaser.GameObjects.Shape {\n    this.logger.debug('ShapeFactory', 'createTriangle', 'Creating triangle shape', {\n      objectId: config.id,\n      dimensions: { width: config.width, height: config.height },\n      fillColor: config.fillColor,\n    });\n\n    const width = config.width || 100;\n    const height = config.height || 100;\n\n    // Create a simple triangle\n    const triangle = scene.add.triangle(\n      config.x || 0,\n      config.y || 0,\n      0,\n      -height / 2, // Top point\n      -width / 2,\n      height / 2, // Bottom left\n      width / 2,\n      height / 2, // Bottom right\n      this.parseColor(config.fillColor || 0xffffff)\n    );\n\n    // Set origin to center for triangles\n    triangle.setOrigin(0.5, 0.5);\n\n    return triangle;\n  }\n\n  /**\n   * Create a polygon shape\n   */\n  private createPolygon(scene: Phaser.Scene, config: any): Phaser.GameObjects.Shape {\n    this.logger.debug('ShapeFactory', 'createPolygon', 'Creating polygon shape', {\n      objectId: config.id,\n      points: config.points,\n      fillColor: config.fillColor,\n    });\n\n    // Default to a hexagon if no points specified\n    const points =\n      config.points || this.createHexagonPoints(config.width || 100, config.height || 100);\n\n    const polygon = scene.add.polygon(\n      config.x || 0,\n      config.y || 0,\n      points,\n      this.parseColor(config.fillColor || 0xffffff)\n    );\n\n    // Set origin to center for polygons\n    polygon.setOrigin(0.5, 0.5);\n\n    return polygon;\n  }\n\n  /**\n   * Create hexagon points for default polygon\n   */\n  private createHexagonPoints(width: number, height: number): number[] {\n    const centerX = 0;\n    const centerY = 0;\n    const radiusX = width / 2;\n    const radiusY = height / 2;\n\n    const points: number[] = [];\n    for (let i = 0; i < 6; i++) {\n      const angle = (i * Math.PI) / 3;\n      const x = centerX + radiusX * Math.cos(angle);\n      const y = centerY + radiusY * Math.sin(angle);\n      points.push(x, y);\n    }\n\n    return points;\n  }\n\n  /**\n   * Parse color value (supports hex strings, numbers, and named colors)\n   */\n  private parseColor(color: string | number): number {\n    if (typeof color === 'number') {\n      return color;\n    }\n\n    if (typeof color === 'string') {\n      if (color.startsWith('#')) {\n        return parseInt(color.slice(1), 16);\n      }\n\n      if (color.startsWith('0x')) {\n        return parseInt(color, 16);\n      }\n\n      // Try to parse as hex\n      const hexMatch = color.match(/^([0-9a-fA-F]{6})$/i);\n      if (hexMatch) {\n        return parseInt(hexMatch[1], 16);\n      }\n    }\n\n    // Default to white if parsing fails\n    this.logger.warn('ShapeFactory', 'parseColor', 'Failed to parse color, using default', {\n      color,\n      defaultColor: 0xffffff,\n    });\n\n    return 0xffffff;\n  }\n}\n","import * as Phaser from 'phaser';\nimport { logger } from '../core/Logger';\nimport { IGameObjectFactory } from '../abstract/factories/IGameObjectFactory';\nimport type { IFactoryInput } from './interfaces/IFactoryInput';\nimport { ContainerFactory } from './ContainerFactory';\nimport { ImageFactory } from './ImageFactory';\nimport { TextFactory } from './TextFactory';\nimport { ButtonFactory } from './ButtonFactory';\nimport { ShapeFactory } from './ShapeFactory';\n\n/**\n * GameObject Factory Manager\n * Singleton that manages all concrete game object factories\n * Provides a unified interface for creating game objects\n */\nexport class GameObjectFactoryManager {\n  private static instance: GameObjectFactoryManager;\n  private factories: Map<string, IGameObjectFactory> = new Map();\n\n  private constructor() {\n    logger.debug(\n      'GameObjectFactoryManager',\n      'unknown',\n      'constructor',\n      'Initializing GameObjectFactoryManager'\n    );\n    this.registerDefaultFactories();\n  }\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): GameObjectFactoryManager {\n    if (!GameObjectFactoryManager.instance) {\n      GameObjectFactoryManager.instance = new GameObjectFactoryManager();\n    }\n    return GameObjectFactoryManager.instance;\n  }\n\n  /**\n   * Register default factories\n   */\n  private registerDefaultFactories(): void {\n    logger.debug(\n      'GameObjectFactoryManager',\n      'registerDefaultFactories',\n      'Registering default factories'\n    );\n\n    try {\n      // Register container factory\n      const containerFactory = new ContainerFactory();\n      this.registerFactory('container', containerFactory);\n      logger.debug(\n        'GameObjectFactoryManager',\n        'registerDefaultFactories',\n        'Container factory registered',\n        {\n          supportedTypes: containerFactory.getSupportedTypes(),\n        }\n      );\n\n      // Register image factory\n      const imageFactory = new ImageFactory();\n      this.registerFactory('image', imageFactory);\n      logger.debug(\n        'GameObjectFactoryManager',\n        'registerDefaultFactories',\n        'Image factory registered',\n        {\n          supportedTypes: imageFactory.getSupportedTypes(),\n        }\n      );\n\n      // Register text factory\n      const textFactory = new TextFactory();\n      this.registerFactory('text', textFactory);\n      logger.debug(\n        'GameObjectFactoryManager',\n        'registerDefaultFactories',\n        'Text factory registered',\n        {\n          supportedTypes: textFactory.getSupportedTypes(),\n        }\n      );\n\n      // Register button factory\n      const buttonFactory = new ButtonFactory();\n      this.registerFactory('button', buttonFactory);\n      logger.debug(\n        'GameObjectFactoryManager',\n        'registerDefaultFactories',\n        'Button factory registered',\n        {\n          supportedTypes: buttonFactory.getSupportedTypes(),\n        }\n      );\n\n      // Register shape factory\n      const shapeFactory = new ShapeFactory();\n      this.registerFactory('shape', shapeFactory);\n      logger.debug(\n        'GameObjectFactoryManager',\n        'registerDefaultFactories',\n        'Shape factory registered',\n        {\n          supportedTypes: shapeFactory.getSupportedTypes(),\n        }\n      );\n\n      logger.info(\n        'GameObjectFactoryManager',\n        'registerDefaultFactories',\n        'All default factories registered successfully',\n        {\n          totalFactories: this.factories.size,\n          factoryTypes: Array.from(this.factories.keys()),\n        }\n      );\n    } catch (error) {\n      logger.error(\n        'GameObjectFactoryManager',\n        'registerDefaultFactories',\n        'Error registering default factories',\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Register a factory for a specific object type\n   */\n  public registerFactory(objectType: string, factory: IGameObjectFactory): void {\n    logger.debug('GameObjectFactoryManager', 'registerFactory', 'Registering factory', {\n      objectType,\n      factoryType: factory.constructor.name,\n      supportedTypes: factory.getSupportedTypes(),\n    });\n\n    this.factories.set(objectType, factory);\n\n    logger.debug('GameObjectFactoryManager', 'registerFactory', 'Factory registered successfully', {\n      objectType,\n      totalFactories: this.factories.size,\n    });\n  }\n\n  /**\n   * Create a game object using the appropriate factory\n   */\n  public createGameObject(input: IFactoryInput): Phaser.GameObjects.GameObject | null {\n    logger.debug('GameObjectFactoryManager', 'createGameObject', 'Creating game object', {\n      objectId: input.config.id,\n      objectType: input.type,\n      hasConfig: !!input.config,\n      configKeys: input.config ? Object.keys(input.config) : [],\n    });\n\n    try {\n      if (!input.config || !input.type) {\n        logger.warn('GameObjectFactoryManager', 'createGameObject', 'Invalid input provided', {\n          hasConfig: !!input.config,\n          inputType: input.type,\n          input: input,\n        });\n        return null;\n      }\n\n      const factory = this.getFactoryForType(input.type);\n\n      if (!factory) {\n        logger.warn(\n          'GameObjectFactoryManager',\n          'createGameObject',\n          'No factory found for object type',\n          {\n            objectType: input.type,\n            availableFactories: Array.from(this.factories.keys()),\n            objectId: input.config.id,\n          }\n        );\n        return null;\n      }\n\n      logger.debug(\n        'GameObjectFactoryManager',\n        'createGameObject',\n        'Factory found, creating game object',\n        {\n          objectId: input.config.id,\n          objectType: input.type,\n          factoryType: factory.constructor.name,\n          canCreate: factory.canCreate(input.type),\n        }\n      );\n\n      if (!factory.canCreate(input.type)) {\n        logger.warn(\n          'GameObjectFactoryManager',\n          'createGameObject',\n          'Factory cannot create this object type',\n          {\n            objectType: input.type,\n            factoryType: factory.constructor.name,\n            supportedTypes: factory.getSupportedTypes(),\n            objectId: input.config.id,\n          }\n        );\n        return null;\n      }\n\n      const gameObject = factory.createGameObject(input);\n\n      if (gameObject) {\n        logger.debug(\n          'GameObjectFactoryManager',\n          'createGameObject',\n          'Game object created successfully',\n          {\n            objectId: input.config.id,\n            objectType: input.type,\n            phaserObjectType: gameObject.constructor.name,\n            gameObjectName: gameObject.name,\n          }\n        );\n      } else {\n        logger.error(\n          'GameObjectFactoryManager',\n          'createGameObject',\n          'Factory failed to create game object',\n          {\n            objectId: input.config.id,\n            objectType: input.type,\n            factoryType: factory.constructor.name,\n          }\n        );\n      }\n\n      return gameObject;\n    } catch (error) {\n      logger.error(\n        'GameObjectFactoryManager',\n        'createGameObject',\n        `Error creating game object: ${input.config?.id}`,\n        error\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Get factory for specific type\n   */\n  private getFactoryForType(objectType: string): IGameObjectFactory | undefined {\n    return this.factories.get(objectType);\n  }\n\n  /**\n   * Create a game object using static factory methods from concrete classes\n   * This method handles dynamic class loading and static factory method calls\n   */\n  public async createGameObjectWithStaticFactory(\n    config: any,\n    scene: Phaser.Scene,\n    parent?: Phaser.GameObjects.Container\n  ): Promise<Phaser.GameObjects.GameObject | null> {\n    logger.debug(\n      'GameObjectFactoryManager',\n      'createGameObjectWithStaticFactory',\n      'Creating game object with static factory',\n      {\n        objectId: config.id,\n        className: config.factory?.className,\n        createMethod: config.factory?.createMethod,\n      }\n    );\n\n    try {\n      if (!config.factory?.className) {\n        logger.warn(\n          'GameObjectFactoryManager',\n          'createGameObjectWithStaticFactory',\n          'No factory configuration provided',\n          {\n            objectId: config.id,\n            hasFactory: !!config.factory,\n            factoryConfig: config.factory,\n          }\n        );\n        return null;\n      }\n\n      const { className, createMethod = 'createFromConfig' } = config.factory;\n\n      // Dynamic class loading based on className\n      let ConcreteClass: any;\n\n      switch (className) {\n        case 'BackgroundContainer':\n          logger.debug(\n            'GameObjectFactoryManager',\n            'unknown',\n            'createGameObjectWithStaticFactory',\n            'Loading BackgroundContainer class'\n          );\n          try {\n            const BackgroundContainerModule = await import(\n              '../object/container/BackgroundContainer'\n            );\n            ConcreteClass = BackgroundContainerModule.BackgroundContainer;\n            logger.debug(\n              'GameObjectFactoryManager',\n              'unknown',\n              'createGameObjectWithStaticFactory',\n              'BackgroundContainer class loaded successfully'\n            );\n          } catch (importError) {\n            logger.error(\n              'GameObjectFactoryManager',\n              'createGameObjectWithStaticFactory',\n              'Failed to import BackgroundContainer module',\n              {\n                objectId: config.id,\n                error: importError instanceof Error ? importError.message : String(importError),\n              }\n            );\n            return null;\n          }\n          break;\n\n        case 'Rectangle':\n          logger.debug(\n            'GameObjectFactoryManager',\n            'unknown',\n            'createGameObjectWithStaticFactory',\n            'Loading Rectangle class'\n          );\n          try {\n            const RectangleModule = await import('../object/shapes/Rectangle');\n            ConcreteClass = RectangleModule.Rectangle;\n            logger.debug(\n              'GameObjectFactoryManager',\n              'unknown',\n              'createGameObjectWithStaticFactory',\n              'Rectangle class loaded successfully'\n            );\n          } catch (importError) {\n            logger.error(\n              'GameObjectFactoryManager',\n              'createGameObjectWithStaticFactory',\n              'Failed to import Rectangle module',\n              {\n                objectId: config.id,\n                error: importError instanceof Error ? importError.message : String(importError),\n              }\n            );\n            return null;\n          }\n          break;\n\n        default:\n          logger.warn(\n            'GameObjectFactoryManager',\n            'createGameObjectWithStaticFactory',\n            `Unknown factory class: ${className}`,\n            {\n              objectId: config.id,\n              availableClasses: ['BackgroundContainer', 'Rectangle'],\n            }\n          );\n          return null;\n      }\n\n      // Check if the class has the create method\n      if (typeof ConcreteClass[createMethod] === 'function') {\n        logger.debug(\n          'GameObjectFactoryManager',\n          'createGameObjectWithStaticFactory',\n          'Calling static factory method',\n          {\n            objectId: config.id,\n            className,\n            createMethod,\n          }\n        );\n\n        try {\n          const result = ConcreteClass[createMethod](config, scene, parent);\n\n          logger.debug(\n            'GameObjectFactoryManager',\n            'createGameObjectWithStaticFactory',\n            'Static factory method executed successfully',\n            {\n              objectId: config.id,\n              hasResult: !!result,\n              resultType: result?.constructor.name,\n            }\n          );\n\n          return result;\n        } catch (methodError) {\n          logger.error(\n            'GameObjectFactoryManager',\n            'createGameObjectWithStaticFactory',\n            'Static factory method execution failed',\n            {\n              objectId: config.id,\n              className,\n              createMethod,\n              error: methodError instanceof Error ? methodError.message : String(methodError),\n            }\n          );\n          return null;\n        }\n      } else {\n        logger.warn(\n          'GameObjectFactoryManager',\n          'createGameObjectWithStaticFactory',\n          `Factory method '${createMethod}' not found in ${className}`,\n          {\n            objectId: config.id,\n            availableMethods: Object.getOwnPropertyNames(ConcreteClass).filter(\n              name => typeof ConcreteClass[name] === 'function'\n            ),\n          }\n        );\n        return null;\n      }\n    } catch (error) {\n      logger.error(\n        'GameObjectFactoryManager',\n        'createGameObjectWithStaticFactory',\n        `Critical error using static factory for ${config.id}:`,\n        {\n          error: error instanceof Error ? error.message : String(error),\n          objectId: config.id,\n          className: config.factory?.className,\n        }\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Check if a factory exists for the given object type\n   */\n  public hasFactory(objectType: string): boolean {\n    const hasFactory = this.factories.has(objectType);\n    logger.debug('GameObjectFactoryManager', 'hasFactory', 'Checking if factory exists', {\n      objectType,\n      hasFactory,\n    });\n    return hasFactory;\n  }\n\n  /**\n   * Get all registered factory types\n   */\n  public getRegisteredTypes(): string[] {\n    const types = Array.from(this.factories.keys());\n    logger.debug(\n      'GameObjectFactoryManager',\n      'getRegisteredTypes',\n      'Getting registered factory types',\n      {\n        types,\n        count: types.length,\n      }\n    );\n    return types;\n  }\n\n  /**\n   * Get factory for a specific object type\n   */\n  public getFactory(objectType: string): IGameObjectFactory | undefined {\n    const factory = this.factories.get(objectType);\n    logger.debug('GameObjectFactoryManager', 'getFactory', 'Getting factory', {\n      objectType,\n      hasFactory: !!factory,\n      factoryType: factory?.constructor.name,\n    });\n    return factory;\n  }\n\n  /**\n   * Get factory statistics\n   */\n  public getStats(): {\n    totalFactories: number;\n    registeredTypes: string[];\n    factoryDetails: Array<{ type: string; factoryClass: string; supportedTypes: string[] }>;\n  } {\n    const stats = {\n      totalFactories: this.factories.size,\n      registeredTypes: Array.from(this.factories.keys()),\n      factoryDetails: Array.from(this.factories.entries()).map(([type, factory]) => ({\n        type,\n        factoryClass: factory.constructor.name,\n        supportedTypes: factory.getSupportedTypes(),\n      })),\n    };\n\n    logger.debug('GameObjectFactoryManager', 'getStats', 'Getting factory statistics', stats);\n    return stats;\n  }\n}\n","/**\n * SizeUnit Enum\n * Defines measurement types for size calculations\n * These represent HOW to measure the size\n */\nexport enum SizeUnit {\n  // Direct measurement units\n  PIXEL = 'pixel', // Absolute pixel values\n  PERCENTAGE = 'percentage', // Percentage values\n\n  // Parent-relative units (like CSS vh/vw but for parent)\n  PARENT_WIDTH = 'parent-width', // Percentage of parent width\n  PARENT_HEIGHT = 'parent-height', // Percentage of parent height\n  PARENT_MIN = 'parent-min', // Percentage of parent's smaller dimension\n  PARENT_MAX = 'parent-max', // Percentage of parent's larger dimension\n\n  // Scene-relative units\n  SCENE_WIDTH = 'scene-width', // Percentage of scene width\n  SCENE_HEIGHT = 'scene-height', // Percentage of scene height\n  SCENE_MIN = 'scene-min', // Percentage of scene's smaller dimension\n  SCENE_MAX = 'scene-max', // Percentage of scene's larger dimension\n\n  // Viewport units\n  VIEWPORT_WIDTH = 'viewport-width', // Percentage of viewport width\n  VIEWPORT_HEIGHT = 'viewport-height', // Percentage of viewport height\n}\n","/**\n * Layout System Enums\n * Type-safe enums for the layout system, providing better IntelliSense and compile-time checking\n * Based on the best patterns from the existing codebase\n *\n * IMPORTANT: This file integrates with the existing Unit System\n * We import and re-export the Unit System enums for compatibility\n */\n\n// ============================================================================\n// UNIT SYSTEM INTEGRATION\n// ============================================================================\n\n// Import existing Unit System enums for compatibility\nimport {\n  SizeUnit,\n  PositionUnit,\n  ScaleUnit,\n  UnitType,\n  Dimension,\n  AxisUnit,\n  SizeValue,\n  PositionValue,\n  ScaleValue,\n  TemplateInputType,\n} from '../../unit';\n\n// Re-export for external use\nexport {\n  SizeUnit,\n  PositionUnit,\n  ScaleUnit,\n  UnitType,\n  Dimension,\n  AxisUnit,\n  SizeValue,\n  PositionValue,\n  ScaleValue,\n  TemplateInputType,\n};\n\n// ============================================================================\n// BREAKPOINT ENUMS\n// ============================================================================\n\n/**\n * Breakpoint names for responsive design\n * Inspired by CSS media query breakpoints\n */\nexport enum BreakpointName {\n  XS = 'xs', // Extra small devices (phones)\n  SM = 'sm', // Small devices (landscape phones)\n  MD = 'md', // Medium devices (tablets)\n  LG = 'lg', // Large devices (desktops)\n  XL = 'xl', // Extra large devices (large desktops)\n  XXL = 'xxl', // Extra extra large devices\n}\n\n/**\n * Breakpoint conditions for responsive behavior\n */\nexport enum BreakpointCondition {\n  MIN_WIDTH = 'min-width',\n  MAX_WIDTH = 'max-width',\n  MIN_HEIGHT = 'min-height',\n  MAX_HEIGHT = 'max-height',\n  ORIENTATION = 'orientation',\n  DEVICE_TYPE = 'device-type',\n  ASPECT_RATIO = 'aspect-ratio',\n  PIXEL_DENSITY = 'pixel-density',\n}\n\n// ============================================================================\n// BREAKPOINT SYSTEM ENUMS\n// ============================================================================\n\n// Import breakpoint enums from BreakpointEnums.ts to avoid duplication\nimport { BreakpointOperator, DeviceOrientation, DeviceType } from './BreakpointEnums';\n\n// Re-export for external use\nexport { BreakpointOperator, DeviceOrientation, DeviceType };\n\n/**\n * Breakpoint priority levels\n * Higher numbers = higher priority\n */\nexport enum BreakpointPriority {\n  LOWEST = 0,\n  LOW = 1,\n  NORMAL = 5,\n  HIGH = 10,\n  HIGHEST = 100,\n}\n\n/**\n * Breakpoint status states\n */\nexport enum BreakpointStatus {\n  INACTIVE = 'inactive',\n  ACTIVE = 'active',\n  PENDING = 'pending',\n  ERROR = 'error',\n}\n\n/**\n * Breakpoint event types\n */\nexport enum BreakpointEventType {\n  ACTIVATED = 'activated',\n  DEACTIVATED = 'deactivated',\n  REGISTERED = 'registered',\n  UNREGISTERED = 'unregistered',\n  CONTEXT_CHANGED = 'context_changed',\n  EVALUATED = 'evaluated',\n}\n\n// ============================================================================\n// LAYOUT ENUMS\n// ============================================================================\n\n/**\n * Layout types for different display behaviors\n * Inspired by CSS display properties\n */\nexport enum LayoutType {\n  BLOCK = 'block',\n  INLINE = 'inline',\n  FLEX = 'flex',\n  GRID = 'grid',\n  NONE = 'none',\n}\n\n/**\n * Alignment options for positioning elements\n * Inspired by CSS align properties\n *\n * NOTE: These alignments work with the Unit System's PositionUnit\n */\nexport enum Alignment {\n  // Horizontal alignment (compatible with PositionUnit)\n  LEFT = 'left',\n  CENTER = 'center',\n  RIGHT = 'right',\n  JUSTIFY = 'justify',\n\n  // Vertical alignment (compatible with PositionUnit)\n  TOP = 'top',\n  MIDDLE = 'middle',\n  BOTTOM = 'bottom',\n  BASELINE = 'baseline',\n\n  // Combined alignment\n  CENTER_CENTER = 'center-center',\n  TOP_LEFT = 'top-left',\n  TOP_CENTER = 'top-center',\n  TOP_RIGHT = 'top-right',\n  MIDDLE_LEFT = 'middle-left',\n  MIDDLE_CENTER = 'middle-center',\n  MIDDLE_RIGHT = 'middle-right',\n  BOTTOM_LEFT = 'bottom-left',\n  BOTTOM_CENTER = 'bottom-center',\n  BOTTOM_RIGHT = 'bottom-right',\n}\n\n/**\n * Position types for element positioning\n * Inspired by CSS position property\n *\n * NOTE: These are compatible with PositionUnit enum values\n */\nexport enum PositionType {\n  STATIC = 'static',\n  RELATIVE = 'relative',\n  ABSOLUTE = 'absolute',\n  FIXED = 'fixed',\n  STICKY = 'sticky',\n}\n\n/**\n * Overflow options for content overflow handling\n * Inspired by CSS overflow property\n */\nexport enum OverflowType {\n  VISIBLE = 'visible',\n  HIDDEN = 'hidden',\n  SCROLL = 'scroll',\n  AUTO = 'auto',\n}\n\n/**\n * Z-index layers for stacking order\n * Inspired by CSS z-index\n */\nexport enum ZIndexLayer {\n  BACKGROUND = -100,\n  CONTENT = 0,\n  OVERLAY = 100,\n  MODAL = 200,\n  TOOLTIP = 300,\n  NOTIFICATION = 400,\n}\n\n// ============================================================================\n// SPACING ENUMS (Layout-specific, not in Unit System)\n// ============================================================================\n\n/**\n * Spacing scale values\n * Inspired by Tailwind CSS spacing scale\n */\nexport enum SpacingScale {\n  XS = 4, // 0.25rem\n  SM = 8, // 0.5rem\n  MD = 16, // 1rem\n  LG = 24, // 1.5rem\n  XL = 32, // 2rem\n  XXL = 48, // 3rem\n  XXXL = 64, // 4rem\n}\n\n/**\n * Margin values\n */\nexport enum MarginValue {\n  NONE = 0,\n  AUTO = 'auto',\n}\n\n/**\n * Padding values\n */\nexport enum PaddingValue {\n  NONE = 0,\n}\n\n// ============================================================================\n// COLOR ENUMS (Layout-specific, not in Unit System)\n// ============================================================================\n\n/**\n * Default color names\n * Inspired by CSS default colors\n */\nexport enum ColorName {\n  TRANSPARENT = 'transparent',\n  BLACK = '#000000',\n  WHITE = '#ffffff',\n  RED = '#ff0000',\n  GREEN = '#00ff00',\n  BLUE = '#0000ff',\n  YELLOW = '#ffff00',\n  CYAN = '#00ffff',\n  MAGENTA = '#ff00ff',\n  GRAY = '#808080',\n}\n\n/**\n * Color opacity values\n */\nexport enum ColorOpacity {\n  TRANSPARENT = 0,\n  LOW = 0.25,\n  MEDIUM = 0.5,\n  HIGH = 0.75,\n  OPAQUE = 1,\n}\n\n/**\n * Blend modes for color mixing\n * Inspired by CSS mix-blend-mode\n */\nexport enum BlendMode {\n  NORMAL = 'normal',\n  MULTIPLY = 'multiply',\n  SCREEN = 'screen',\n  OVERLAY = 'overlay',\n  DARKEN = 'darken',\n  LIGHTEN = 'lighten',\n  COLOR_DODGE = 'color-dodge',\n  COLOR_BURN = 'color-burn',\n  HARD_LIGHT = 'hard-light',\n  SOFT_LIGHT = 'soft-light',\n  DIFFERENCE = 'difference',\n  EXCLUSION = 'exclusion',\n  HUE = 'hue',\n  SATURATION = 'saturation',\n  COLOR = 'color',\n  LUMINOSITY = 'luminosity',\n}\n\n// ============================================================================\n// TYPOGRAPHY ENUMS (Layout-specific, not in Unit System)\n// ============================================================================\n\n/**\n * Font families\n * Inspired by CSS font-family\n */\nexport enum FontFamily {\n  SANS = 'Inter, system-ui, -apple-system, sans-serif',\n  SERIF = 'Georgia, serif',\n  MONO = 'JetBrains Mono, monospace',\n  DISPLAY = 'Poppins, sans-serif',\n}\n\n/**\n * Font sizes\n * Inspired by CSS font-size\n */\nexport enum FontSize {\n  XS = 12,\n  SM = 14,\n  BASE = 16,\n  LG = 18,\n  XL = 20,\n  XXL = 24,\n  XXXL = 30,\n  DISPLAY = 48,\n}\n\n/**\n * Font weights\n * Inspired by CSS font-weight\n */\nexport enum FontWeight {\n  LIGHT = 300,\n  NORMAL = 400,\n  MEDIUM = 500,\n  SEMIBOLD = 600,\n  BOLD = 700,\n  EXTRABOLD = 800,\n}\n\n/**\n * Line heights\n * Inspired by CSS line-height\n */\nexport enum LineHeight {\n  TIGHT = 1.25,\n  NORMAL = 1.5,\n  RELAXED = 1.75,\n  LOOSE = 2,\n}\n\n/**\n * Text alignment\n * Inspired by CSS text-align\n */\nexport enum TextAlign {\n  LEFT = 'left',\n  CENTER = 'center',\n  RIGHT = 'right',\n  JUSTIFY = 'justify',\n}\n\n/**\n * Font styles\n * Inspired by CSS font-style\n */\nexport enum FontStyle {\n  NORMAL = 'normal',\n  ITALIC = 'italic',\n  OBLIQUE = 'oblique',\n}\n\n// ============================================================================\n// ANIMATION ENUMS (Layout-specific, not in Unit System)\n// ============================================================================\n\n/**\n * Animation durations\n * Inspired by CSS transition-duration\n */\nexport enum AnimationDuration {\n  FAST = 150, // ms\n  NORMAL = 300, // ms\n  SLOW = 500, // ms\n  SLOWER = 1000, // ms\n}\n\n/**\n * Animation easing functions\n * Inspired by CSS transition-timing-function\n */\nexport enum AnimationEasing {\n  LINEAR = 'linear',\n  EASE = 'ease',\n  EASE_IN = 'ease-in',\n  EASE_OUT = 'ease-out',\n  EASE_IN_OUT = 'ease-in-out',\n  BOUNCE = 'bounce',\n  ELASTIC = 'elastic',\n}\n\n/**\n * Animation properties\n * Inspired by CSS transition-property\n */\nexport enum AnimationProperty {\n  ALL = 'all',\n  OPACITY = 'opacity',\n  TRANSFORM = 'transform',\n  COLOR = 'color',\n  BACKGROUND = 'background',\n}\n\n/**\n * Cursor styles\n * Inspired by CSS cursor property\n */\nexport enum CursorStyle {\n  DEFAULT = 'default',\n  POINTER = 'pointer',\n  HAND = 'hand',\n  TEXT = 'text',\n  MOVE = 'move',\n  NOT_ALLOWED = 'not-allowed',\n  WAIT = 'wait',\n  CROSSHAIR = 'crosshair',\n  GRAB = 'grab',\n  GRABBING = 'grabbing',\n}\n\n// ============================================================================\n// DEVICE CAPABILITY ENUMS (Layout-specific, not in Unit System)\n// ============================================================================\n\n/**\n * Device capabilities\n */\nexport enum DeviceCapability {\n  TOUCH = 'touch',\n  MOUSE = 'mouse',\n  KEYBOARD = 'keyboard',\n  HIGH_DPI = 'high-dpi',\n}\n\n// ============================================================================\n// PERFORMANCE ENUMS (Layout-specific, not in Unit System)\n// ============================================================================\n\n/**\n * Update frequencies for responsive updates\n */\nexport enum UpdateFrequency {\n  IMMEDIATE = 'immediate',\n  DEBOUNCED = 'debounced',\n  THROTTLED = 'throttled',\n}\n\n/**\n * Performance levels\n */\nexport enum PerformanceLevel {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  ULTRA = 'ultra',\n}\n\n/**\n * Complexity levels\n */\nexport enum ComplexityLevel {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n}\n\n/**\n * Calculation speed levels\n */\nexport enum CalculationSpeed {\n  FAST = 'fast',\n  MEDIUM = 'medium',\n  SLOW = 'slow',\n}\n\n// ============================================================================\n// VALIDATION ENUMS (Layout-specific, not in Unit System)\n// ============================================================================\n\n/**\n * Validation rules\n */\nexport enum ValidationRule {\n  REQUIRED = 'required',\n  MIN = 'min',\n  MAX = 'max',\n  RANGE = 'range',\n  PATTERN = 'pattern',\n  CUSTOM = 'custom',\n}\n\n/**\n * Validation severity levels\n */\nexport enum ValidationSeverity {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n  CRITICAL = 'critical',\n}\n\n// ============================================================================\n// LOGGING ENUMS (Layout-specific, not in Unit System)\n// ============================================================================\n\n/**\n * Log levels\n */\nexport enum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n}\n\n/**\n * Log categories\n */\nexport enum LogCategory {\n  LAYOUT = 'layout',\n  RESPONSIVE = 'responsive',\n  THEME = 'theme',\n  ANIMATION = 'animation',\n  PERFORMANCE = 'performance',\n  VALIDATION = 'validation',\n}\n\n// ============================================================================\n// GAMEOBJECT ENUMS (Layout-specific, not in Unit System)\n// ============================================================================\n\n/**\n * GameObject types for Phaser objects\n */\nexport enum GameObjectType {\n  CONTAINER = 'container',\n  RECTANGLE = 'rectangle',\n  CIRCLE = 'circle',\n  SPRITE = 'sprite',\n  TEXT = 'text',\n  IMAGE = 'image',\n  GRAPHICS = 'graphics',\n  LINE = 'line',\n  ARC = 'arc',\n  ELLIPSE = 'ellipse',\n  POLYGON = 'polygon',\n  CUSTOM = 'custom',\n}\n\n/**\n * GameObject states\n */\nexport enum GameObjectState {\n  CREATED = 'created',\n  INITIALIZED = 'initialized',\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n  DESTROYED = 'destroyed',\n}\n\n// ============================================================================\n// THEME ENUMS (Layout-specific, not in Unit System)\n// ============================================================================\n\n/**\n * Base theme types - these are the core types that are always available\n */\nexport enum BaseThemeType {\n  LIGHT = 'light',\n  DARK = 'dark',\n  AUTO = 'auto',\n  CUSTOM = 'custom',\n}\n\n/**\n * Extended theme types - allows for additional theme types without modifying the enum\n * This provides flexibility while maintaining type safety\n */\nexport type ThemeType = BaseThemeType | string;\n\n/**\n * Common extended theme types that are frequently used\n */\nexport const ExtendedThemeType = {\n  ...BaseThemeType,\n  MATERIAL: 'material',\n  BOOTSTRAP: 'bootstrap',\n  TAILWIND: 'tailwind',\n  ANT_DESIGN: 'ant-design',\n  CHAKRA: 'chakra',\n  MUI: 'mui',\n  SEMANTIC: 'semantic',\n} as const;\n\n/**\n * Type for all predefined theme types (base + extended)\n */\nexport type PredefinedThemeType = typeof ExtendedThemeType[keyof typeof ExtendedThemeType];\n\n/**\n * Theme variants\n */\nexport enum ThemeVariant {\n  DEFAULT = 'default',\n  PRIMARY = 'primary',\n  SECONDARY = 'secondary',\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ERROR = 'error',\n  INFO = 'info',\n}\n\n// ============================================================================\n// LAYOUT STRATEGY ENUMS (Layout-specific, not in Unit System)\n// ============================================================================\n\n/**\n * Layout strategies\n */\nexport enum LayoutStrategy {\n  FLUID = 'fluid',\n  ADAPTIVE = 'adaptive',\n  FIXED = 'fixed',\n  HYBRID = 'hybrid',\n}\n\n/**\n * Scale strategies\n */\nexport enum ScaleStrategy {\n  STRETCH = 'stretch',\n  FIT = 'fit',\n  FILL = 'fill',\n  NONE = 'none',\n}\n\n// ============================================================================\n// POSITION ALIGNMENT ENUMS\n// ============================================================================\n\n/**\n * Horizontal position alignment\n */\nexport enum HorizontalAlignment {\n  LEFT = 'left',\n  CENTER = 'center',\n  RIGHT = 'right',\n}\n\n/**\n * Vertical position alignment\n */\nexport enum VerticalAlignment {\n  TOP = 'top',\n  CENTER = 'center',\n  BOTTOM = 'bottom',\n}\n\n// ============================================================================\n// SIZE VALUE ENUMS\n// ============================================================================\n\n// SizeValueType removed - use SizeValue from unit system instead\n// SizeValue.FILL and SizeValue.AUTO are available from the unit system\n\n// ============================================================================\n// BORDER STYLE ENUMS\n// ============================================================================\n\n/**\n * Border style types\n */\nexport enum BorderStyle {\n  SOLID = 'solid',\n  DASHED = 'dashed',\n  DOTTED = 'dotted',\n  NONE = 'none',\n}\n\n// ============================================================================\n// TEXT BASELINE ENUMS\n// ============================================================================\n\n/**\n * Text baseline types\n */\nexport enum TextBaseline {\n  TOP = 'top',\n  HANGING = 'hanging',\n  MIDDLE = 'middle',\n  ALPHABETIC = 'alphabetic',\n  IDEOGRAPHIC = 'ideographic',\n  BOTTOM = 'bottom',\n}\n\n/**\n * Text decoration types\n */\nexport enum TextDecoration {\n  NONE = 'none',\n  UNDERLINE = 'underline',\n  LINE_THROUGH = 'line-through',\n  OVERLINE = 'overline',\n}\n\n// ============================================================================\n// ANIMATION DIRECTION ENUMS\n// ============================================================================\n\n/**\n * Animation direction types\n */\nexport enum AnimationDirection {\n  NORMAL = 'normal',\n  REVERSE = 'reverse',\n  ALTERNATE = 'alternate',\n  ALTERNATE_REVERSE = 'alternate-reverse',\n}\n\n/**\n * Animation fill mode types\n */\nexport enum AnimationFillMode {\n  NONE = 'none',\n  FORWARDS = 'forwards',\n  BACKWARDS = 'backwards',\n  BOTH = 'both',\n}\n\n/**\n * Animation play state types\n */\nexport enum AnimationPlayState {\n  RUNNING = 'running',\n  PAUSED = 'paused',\n}\n\n/**\n * Animation iteration count types\n */\nexport enum AnimationIterationCount {\n  INFINITE = 'infinite',\n}\n\n// ============================================================================\n// TRANSFORM STYLE ENUMS\n// ============================================================================\n\n/**\n * Transform style types\n */\nexport enum TransformStyle {\n  FLAT = 'flat',\n  PRESERVE_3D = 'preserve-3d',\n}\n\n/**\n * Backface visibility types\n */\nexport enum BackfaceVisibility {\n  VISIBLE = 'visible',\n  HIDDEN = 'hidden',\n}\n\n// ============================================================================\n// POINTER EVENTS ENUMS\n// ============================================================================\n\n/**\n * Pointer events types\n */\nexport enum PointerEvents {\n  AUTO = 'auto',\n  NONE = 'none',\n}\n\n/**\n * User select types\n */\nexport enum UserSelect {\n  AUTO = 'auto',\n  NONE = 'none',\n  TEXT = 'text',\n  ALL = 'all',\n}\n\n// ============================================================================\n// THEME MODE ENUMS\n// ============================================================================\n\n/**\n * Theme mode types\n */\nexport enum ThemeMode {\n  LIGHT = 'light',\n  DARK = 'dark',\n  AUTO = 'auto',\n}\n\n// ============================================================================\n// UNIT TYPE ENUMS\n// ============================================================================\n\n/**\n * Unit type specification\n */\nexport enum UnitTypeSpec {\n  SIZE = 'size',\n  POSITION = 'position',\n  SCALE = 'scale',\n}\n\n/**\n * Unit dimension types\n */\nexport enum UnitDimension {\n  WIDTH = 'width',\n  HEIGHT = 'height',\n  DEPTH = 'depth',\n}\n\n/**\n * Rounding strategy types\n */\nexport enum RoundingStrategy {\n  FLOOR = 'floor',\n  CEIL = 'ceil',\n  ROUND = 'round',\n}\n\n// ============================================================================\n// STYLE COMPOSITION ENUMS\n// ============================================================================\n\n/**\n * Style composition strategy types\n */\nexport enum StyleCompositionStrategy {\n  MERGE = 'merge',\n  OVERRIDE = 'override',\n  EXTEND = 'extend',\n}\n\n// ============================================================================\n// COMMAND PATTERN ENUMS\n// ============================================================================\n\n/**\n * Layout change types\n * Defines the types of changes that can be made to layouts\n */\nexport enum LayoutChangeType {\n  CREATE = 'create',\n  UPDATE = 'update',\n  DELETE = 'delete',\n  MOVE = 'move',\n  RESIZE = 'resize',\n  STYLE = 'style',\n}\n\n// ============================================================================\n// STATE PATTERN ENUMS\n// ============================================================================\n\n/**\n * Layout state change types\n * Defines the types of changes that can occur during state transitions\n */\nexport enum LayoutStateChangeType {\n  STATE_ENTER = 'state_enter',\n  STATE_EXIT = 'state_exit',\n  STATE_UPDATE = 'state_update',\n  ACTION_HANDLED = 'action_handled',\n}\n\n/**\n * Layout state types\n * Defines the different types of layout states\n */\nexport enum LayoutStateType {\n  IDLE = 'idle',\n  CALCULATING = 'calculating',\n  CACHED = 'cached',\n  ERROR = 'error',\n  VALIDATING = 'validating',\n  TRANSITIONING = 'transitioning',\n}\n\n// ============================================================================\n// CHAIN OF RESPONSIBILITY ENUMS\n// ============================================================================\n\n/**\n * Layout chain handler types\n * Defines the different types of chain handlers\n */\nexport enum LayoutChainHandlerType {\n  VALIDATION = 'validation',\n  UNIT_CONVERSION = 'unit_conversion',\n  RESPONSIVE = 'responsive',\n  THEME = 'theme',\n  CALCULATION = 'calculation',\n  OPTIMIZATION = 'optimization',\n  CACHING = 'caching',\n}\n\n/**\n * Position reference types\n */\nexport enum PositionReference {\n  PARENT = 'parent',\n  SCENE = 'scene',\n  VIEWPORT = 'viewport',\n  ABSOLUTE = 'absolute',\n}\n\n/**\n * Size reference types\n */\nexport enum SizeReference {\n  PARENT = 'parent',\n  SCENE = 'scene',\n  VIEWPORT = 'viewport',\n  CONTENT = 'content',\n  AUTO = 'auto',\n}\n\n/**\n * Orientation types\n */\nexport enum Orientation {\n  HORIZONTAL = 'horizontal',\n  VERTICAL = 'vertical',\n}\n\n/**\n * Alignment self types\n */\nexport enum AlignmentSelf {\n  AUTO = 'auto',\n  START = 'start',\n  END = 'end',\n  CENTER = 'center',\n  STRETCH = 'stretch',\n}\n\n/**\n * Pattern repeat types\n */\nexport enum PatternRepeat {\n  REPEAT = 'repeat',\n  REPEAT_X = 'repeat-x',\n  REPEAT_Y = 'repeat-y',\n  NO_REPEAT = 'no-repeat',\n}\n\n/**\n * Gradient types\n */\nexport enum GradientType {\n  LINEAR = 'linear',\n  RADIAL = 'radial',\n  CONIC = 'conic',\n}\n\n/**\n * Animation event types\n */\nexport enum AnimationEventType {\n  START = 'start',\n  END = 'end',\n  ITERATION = 'iteration',\n  CANCEL = 'cancel',\n}\n\n/**\n * Performance alert types\n */\nexport enum PerformanceAlertType {\n  WARNING = 'warning',\n  ERROR = 'error',\n  CRITICAL = 'critical',\n}\n\n/**\n * Alignment reference types\n */\nexport enum AlignmentReference {\n  PARENT = 'parent',\n  SIBLINGS = 'siblings',\n  CONTAINER = 'container',\n}\n\n/**\n * Display types\n */\nexport enum DisplayType {\n  BLOCK = 'block',\n  INLINE = 'inline',\n  INLINE_BLOCK = 'inline-block',\n  FLEX = 'flex',\n  GRID = 'grid',\n  NONE = 'none',\n}\n\n/**\n * Background size types\n */\nexport enum BackgroundSize {\n  COVER = 'cover',\n  CONTAIN = 'contain',\n  AUTO = 'auto',\n  FULL = '100%',\n  INITIAL = 'initial',\n}\n\n/**\n * Background position types\n */\nexport enum BackgroundPosition {\n  CENTER = 'center',\n  TOP = 'top',\n  BOTTOM = 'bottom',\n  LEFT = 'left',\n  RIGHT = 'right',\n}\n\n/**\n * Background attachment types\n */\nexport enum BackgroundAttachment {\n  SCROLL = 'scroll',\n  FIXED = 'fixed',\n  LOCAL = 'local',\n}\n\n/**\n * Background repeat types\n */\nexport enum BackgroundRepeat {\n  NO_REPEAT = 'no-repeat',\n  REPEAT = 'repeat',\n  REPEAT_X = 'repeat-x',\n  REPEAT_Y = 'repeat-y',\n}\n\n/**\n * Background clip types\n */\nexport enum BackgroundClip {\n  BORDER_BOX = 'border-box',\n  PADDING_BOX = 'padding-box',\n  CONTENT_BOX = 'content-box',\n}\n\n/**\n * Text transform types\n */\nexport enum TextTransform {\n  NONE = 'none',\n  CAPITALIZE = 'capitalize',\n  UPPERCASE = 'uppercase',\n  LOWERCASE = 'lowercase',\n}\n\n/**\n * Text overflow types\n */\nexport enum TextOverflow {\n  CLIP = 'clip',\n  ELLIPSIS = 'ellipsis',\n  FADE = 'fade',\n}\n\n/**\n * White space types\n */\nexport enum WhiteSpace {\n  NORMAL = 'normal',\n  NOWRAP = 'nowrap',\n  PRE = 'pre',\n  PRE_WRAP = 'pre-wrap',\n  PRE_LINE = 'pre-line',\n}\n\n/**\n * CSS unit types\n */\nexport enum CSSUnit {\n  PX = 'px',\n  EM = 'em',\n  REM = 'rem',\n  PERCENT = '%',\n  VW = 'vw',\n  VH = 'vh',\n}\n\n/**\n * Button state types\n */\nexport enum ButtonState {\n  IDLE = 'idle',\n  HOVER = 'hover',\n  ACTIVE = 'active',\n  DISABLED = 'disabled',\n}\n\n/**\n * Physics body type types\n */\nexport enum PhysicsBodyType {\n  STATIC = 'static',\n  DYNAMIC = 'dynamic',\n  KINEMATIC = 'kinematic',\n}\n\n/**\n * Priority levels\n */\nexport enum PriorityLevel {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n}\n\n/**\n * Value types\n */\nexport enum ValueType {\n  NUMBER = 'number',\n  PERCENTAGE = 'percentage',\n  UNIT = 'unit',\n  KEYWORD = 'keyword',\n}\n\n/**\n * Extended value types (includes auto)\n */\nexport enum ExtendedValueType {\n  NUMBER = 'number',\n  PERCENTAGE = 'percentage',\n  UNIT = 'unit',\n  KEYWORD = 'keyword',\n  AUTO = 'auto',\n}\n\n/**\n * Border image repeat types\n */\nexport enum BorderImageRepeat {\n  STRETCH = 'stretch',\n  REPEAT = 'repeat',\n  ROUND = 'round',\n  SPACE = 'space',\n}\n\n/**\n * Horizontal alignment values\n */\nexport enum HorizontalAlignmentValue {\n  LEFT = 'left',\n  CENTER = 'center',\n  RIGHT = 'right',\n  START = 'start',\n  END = 'end',\n  STRETCH = 'stretch',\n}\n\n/**\n * Vertical alignment values\n */\nexport enum VerticalAlignmentValue {\n  TOP = 'top',\n  MIDDLE = 'middle',\n  BOTTOM = 'bottom',\n  START = 'start',\n  END = 'end',\n  STRETCH = 'stretch',\n}\n\n/**\n * Border style values\n */\nexport enum BorderStyleValue {\n  NONE = 'none',\n  SOLID = 'solid',\n  DASHED = 'dashed',\n  DOTTED = 'dotted',\n  DOUBLE = 'double',\n  GROOVE = 'groove',\n  RIDGE = 'ridge',\n  INSET = 'inset',\n  OUTSET = 'outset',\n}\n\n/**\n * Text decoration values\n */\nexport enum TextDecorationValue {\n  NONE = 'none',\n  UNDERLINE = 'underline',\n  OVERLINE = 'overline',\n  LINE_THROUGH = 'line-through',\n  BLINK = 'blink',\n}\n\n/**\n * Animation direction values\n */\nexport enum AnimationDirectionValue {\n  NORMAL = 'normal',\n  REVERSE = 'reverse',\n  ALTERNATE = 'alternate',\n  ALTERNATE_REVERSE = 'alternate-reverse',\n}\n\n/**\n * Animation fill mode values\n */\nexport enum AnimationFillModeValue {\n  NONE = 'none',\n  FORWARDS = 'forwards',\n  BACKWARDS = 'backwards',\n  BOTH = 'both',\n}\n\n/**\n * Shadow filter types\n */\nexport enum ShadowFilter {\n  DROP_SHADOW = 'drop-shadow',\n  BOX_SHADOW = 'box-shadow',\n}\n\n// ============================================================================\n// CSS STYLE ENGINE ENUMS (Layout-specific, not in Unit System)\n// ============================================================================\n\n/**\n * CSS preload priority levels\n */\nexport enum CSSPreloadPriority {\n  HIGH = 'high',\n  LOW = 'low',\n}\n\n/**\n * CSS validation severity levels\n */\nexport enum CSSValidationSeverity {\n  ERROR = 'error',\n  WARNING = 'warning',\n  INFO = 'info',\n}\n\n/**\n * Theme element types for theme application\n */\nexport enum ThemeElementType {\n  SCENE = 'scene',\n  GAME_OBJECT = 'gameObject',\n  UI = 'ui',\n  CONTAINER = 'container',\n}\n\n// ============================================================================\n// EXPORT ALL ENUMS\n// ============================================================================\n\nexport const LAYOUT_SYSTEM_ENUMS = {\n  // Unit System enums (imported for compatibility)\n  UNIT_SYSTEM: {\n    SIZE_UNIT: SizeUnit,\n    POSITION_UNIT: PositionUnit,\n    SCALE_UNIT: ScaleUnit,\n    UNIT_TYPE: UnitType,\n    DIMENSION: Dimension,\n    AXIS_UNIT: AxisUnit,\n    SIZE_VALUE: SizeValue,\n    POSITION_VALUE: PositionValue,\n    SCALE_VALUE: ScaleValue,\n    TEMPLATE_INPUT_TYPE: TemplateInputType,\n  },\n\n  // Breakpoint enums\n  BREAKPOINT: {\n    NAME: BreakpointName,\n    CONDITION: BreakpointCondition,\n    OPERATOR: BreakpointOperator,\n    ORIENTATION: DeviceOrientation,\n    DEVICE_TYPE: DeviceType,\n    PRIORITY: BreakpointPriority,\n    STATUS: BreakpointStatus,\n    EVENT_TYPE: BreakpointEventType,\n  },\n\n  // Layout-specific enums\n  LAYOUT: {\n    TYPE: LayoutType,\n    ALIGNMENT: Alignment,\n    POSITION: PositionType,\n    OVERFLOW: OverflowType,\n    Z_INDEX: ZIndexLayer,\n  },\n  SPACING: {\n    SCALE: SpacingScale,\n    MARGIN: MarginValue,\n    PADDING: PaddingValue,\n  },\n  COLOR: {\n    NAME: ColorName,\n    OPACITY: ColorOpacity,\n    BLEND_MODE: BlendMode,\n  },\n  TYPOGRAPHY: {\n    FONT_FAMILY: FontFamily,\n    FONT_SIZE: FontSize,\n    FONT_WEIGHT: FontWeight,\n    LINE_HEIGHT: LineHeight,\n    TEXT_ALIGN: TextAlign,\n  },\n  ANIMATION: {\n    DURATION: AnimationDuration,\n    EASING: AnimationEasing,\n    PROPERTY: AnimationProperty,\n    DIRECTION: AnimationDirection,\n    FILL_MODE: AnimationFillMode,\n    PLAY_STATE: AnimationPlayState,\n    ITERATION_COUNT: AnimationIterationCount,\n  },\n  DEVICE: {\n    CAPABILITY: DeviceCapability,\n  },\n  PERFORMANCE: {\n    UPDATE_FREQUENCY: UpdateFrequency,\n    LEVEL: PerformanceLevel,\n    COMPLEXITY: ComplexityLevel,\n    CALCULATION_SPEED: CalculationSpeed,\n  },\n  VALIDATION: {\n    RULE: ValidationRule,\n    SEVERITY: ValidationSeverity,\n  },\n  LOGGING: {\n    LEVEL: LogLevel,\n    CATEGORY: LogCategory,\n  },\n  GAMEOBJECT: {\n    TYPE: GameObjectType,\n    STATE: GameObjectState,\n  },\n  THEME: {\n    TYPE: BaseThemeType,\n    VARIANT: ThemeVariant,\n    MODE: ThemeMode,\n  },\n  STRATEGY: {\n    LAYOUT: LayoutStrategy,\n    SCALE: ScaleStrategy,\n  },\n  POSITION: {\n    HORIZONTAL_ALIGNMENT: HorizontalAlignment,\n    VERTICAL_ALIGNMENT: VerticalAlignment,\n  },\n  SIZE: {\n    // VALUE_TYPE removed - use SizeValue from unit system instead\n  },\n  BORDER: {\n    STYLE: BorderStyle,\n  },\n  TEXT: {\n    BASELINE: TextBaseline,\n    DECORATION: TextDecoration,\n  },\n  TRANSFORM: {\n    STYLE: TransformStyle,\n    BACKFACE_VISIBILITY: BackfaceVisibility,\n  },\n  INTERACTION: {\n    POINTER_EVENTS: PointerEvents,\n    USER_SELECT: UserSelect,\n  },\n  UNIT: {\n    TYPE_SPEC: UnitTypeSpec,\n    DIMENSION: UnitDimension,\n    ROUNDING: RoundingStrategy,\n  },\n  COMPOSITION: {\n    STRATEGY: StyleCompositionStrategy,\n  },\n  COMMAND: {\n    CHANGE_TYPE: LayoutChangeType,\n  },\n  STATE: {\n    CHANGE_TYPE: LayoutStateChangeType,\n    TYPE: LayoutStateType,\n  },\n  CHAIN: {\n    HANDLER_TYPE: LayoutChainHandlerType,\n  },\n  REFERENCE: {\n    POSITION: PositionReference,\n    SIZE: SizeReference,\n    ORIENTATION: Orientation,\n    ALIGNMENT_SELF: AlignmentSelf,\n    PATTERN_REPEAT: PatternRepeat,\n    GRADIENT_TYPE: GradientType,\n    ANIMATION_EVENT_TYPE: AnimationEventType,\n    PERFORMANCE_ALERT_TYPE: PerformanceAlertType,\n    ALIGNMENT_REFERENCE: AlignmentReference,\n    DISPLAY_TYPE: DisplayType,\n    BACKGROUND_SIZE: BackgroundSize,\n    BACKGROUND_POSITION: BackgroundPosition,\n    BACKGROUND_ATTACHMENT: BackgroundAttachment,\n    BACKGROUND_REPEAT: BackgroundRepeat,\n    BACKGROUND_CLIP: BackgroundClip,\n    TEXT_TRANSFORM: TextTransform,\n    TEXT_OVERFLOW: TextOverflow,\n    WHITE_SPACE: WhiteSpace,\n    CSS_UNIT: CSSUnit,\n    BUTTON_STATE: ButtonState,\n    PHYSICS_BODY_TYPE: PhysicsBodyType,\n    PRIORITY_LEVEL: PriorityLevel,\n    VALUE_TYPE: ValueType,\n    EXTENDED_VALUE_TYPE: ExtendedValueType,\n    BORDER_IMAGE_REPEAT: BorderImageRepeat,\n    HORIZONTAL_ALIGNMENT_VALUE: HorizontalAlignmentValue,\n    VERTICAL_ALIGNMENT_VALUE: VerticalAlignmentValue,\n    BORDER_STYLE_VALUE: BorderStyleValue,\n    TEXT_DECORATION_VALUE: TextDecorationValue,\n    ANIMATION_DIRECTION_VALUE: AnimationDirectionValue,\n    ANIMATION_FILL_MODE_VALUE: AnimationFillModeValue,\n    SHADOW_FILTER: ShadowFilter,\n  },\n  CSS_STYLE_ENGINE: {\n    PRELOAD_PRIORITY: CSSPreloadPriority,\n    VALIDATION_SEVERITY: CSSValidationSeverity,\n  },\n  THEME_ELEMENT: {\n    TYPE: ThemeElementType,\n  },\n} as const;\n","/**\n * Theme Manager - Core Theme Management\n *\n * Minimal implementation focused on getting the fortune wheel game running.\n * Provides essential theme registration, switching, and application functionality.\n */\n\nimport { ITheme, IThemeClass } from '../interfaces/ITheme';\nimport {\n  IThemeManager,\n  IThemeListener,\n  IThemeStatistics,\n  IThemeConfiguration,\n} from '../interfaces/IThemeManager';\nimport { BaseThemeType, ThemeVariant, BreakpointName } from '../enums/LayoutEnums';\nimport { logger } from '../../core/Logger';\n\n// Type alias for flexible theme types\ntype ThemeType = BaseThemeType | string;\n\n/**\n * Core Theme Manager Implementation\n *\n * Provides essential theme management functionality:\n * - Theme registration and storage\n * - Active theme management\n * - Theme switching\n * - Event notifications\n * - Basic CSS class application\n */\nexport class ThemeManager implements IThemeManager {\n  // Core properties\n  private readonly themesMap: Map<string, ITheme> = new Map();\n  private activeThemeInstance: ITheme | null = null;\n  private currentThemeTypeInstance: string = BaseThemeType.CUSTOM;\n  private isInitializedInstance: boolean = false;\n  private readonly listenersSet: Set<IThemeListener> = new Set();\n  private readonly themeCacheMap: Map<string, IThemeClass> = new Map();\n\n  // ============================================================================\n  // CORE PROPERTIES (IThemeManager interface)\n  // ============================================================================\n\n  get themes(): Map<string, ITheme> {\n    return this.themesMap;\n  }\n\n  get activeTheme(): ITheme | null {\n    return this.activeThemeInstance;\n  }\n\n  get currentThemeType(): ThemeType {\n    return this.currentThemeTypeInstance;\n  }\n\n  get isInitialized(): boolean {\n    return this.isInitializedInstance;\n  }\n\n  get listeners(): Set<IThemeListener> {\n    return this.listenersSet;\n  }\n\n  get themeCache(): Map<string, IThemeClass> {\n    return this.themeCacheMap;\n  }\n\n  // ============================================================================\n  // THEME REGISTRY METHODS\n  // ============================================================================\n\n  /**\n   * Initialize the theme manager\n   */\n  async initialize(defaultTheme?: string): Promise<void> {\n    logger.info('ThemeManager', 'initialize', 'Initializing theme manager', { defaultTheme });\n\n    try {\n      this.isInitializedInstance = true;\n\n      if (defaultTheme && this.themesMap.has(defaultTheme)) {\n        await this.activateTheme(defaultTheme);\n      }\n\n      logger.info('ThemeManager', 'initialize', 'Theme manager initialized successfully');\n    } catch (error) {\n      logger.error('ThemeManager', 'initialize', 'Failed to initialize theme manager', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Register a new theme\n   */\n  registerTheme(theme: ITheme): void {\n    logger.info('ThemeManager', 'registerTheme', 'Registering theme', { themeId: theme.id });\n\n    try {\n      // Validate theme\n      this.validateTheme(theme);\n\n      // Store theme\n      this.themesMap.set(theme.id, theme);\n\n      // Cache theme classes for performance\n      this.cacheThemeClasses(theme);\n\n      logger.info('ThemeManager', 'registerTheme', 'Theme registered successfully', {\n        themeId: theme.id,\n      });\n    } catch (error) {\n      logger.error('ThemeManager', 'registerTheme', 'Failed to register theme', {\n        error,\n        themeId: theme.id,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Unregister a theme\n   */\n  unregisterTheme(id: string): boolean {\n    logger.info('ThemeManager', 'unregisterTheme', 'Unregistering theme', { themeId: id });\n\n    try {\n      // Don't allow unregistering the active theme\n      if (this.activeThemeInstance?.id === id) {\n        logger.warn('ThemeManager', 'unregisterTheme', 'Cannot unregister active theme', {\n          themeId: id,\n        });\n        return false;\n      }\n\n      // Check if theme exists\n      if (!this.themesMap.has(id)) {\n        logger.warn('ThemeManager', 'unregisterTheme', 'Theme not found', { themeId: id });\n        return false;\n      }\n\n      // Remove from storage\n      this.themesMap.delete(id);\n\n      // Clear cache\n      this.clearThemeCache(id);\n\n      logger.info('ThemeManager', 'unregisterTheme', 'Theme unregistered successfully', {\n        themeId: id,\n      });\n      return true;\n    } catch (error) {\n      logger.error('ThemeManager', 'unregisterTheme', 'Failed to unregister theme', {\n        error,\n        themeId: id,\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Get a theme by ID\n   */\n  getTheme(id: string): ITheme | undefined {\n    return this.themesMap.get(id);\n  }\n\n  /**\n   * Get a theme by name\n   */\n  getThemeByName(name: string): ITheme | undefined {\n    for (const theme of this.themesMap.values()) {\n      if (theme.name === name) {\n        return theme;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Get all themes matching a filter\n   */\n  getThemes(filter?: (theme: ITheme) => boolean): ITheme[] {\n    const themes = Array.from(this.themesMap.values());\n    return filter ? themes.filter(filter) : themes;\n  }\n\n  /**\n   * Get themes by type\n   */\n  getThemesByType(type: ThemeType): ITheme[] {\n    return this.getThemes(theme => theme.type === type);\n  }\n\n  /**\n   * Get themes by variant\n   */\n  getThemesByVariant(variant: ThemeVariant): ITheme[] {\n    return this.getThemes(theme => theme.variant === variant);\n  }\n\n  /**\n   * Check if a theme is registered\n   */\n  hasTheme(themeId: string): boolean {\n    return this.themesMap.has(themeId);\n  }\n\n  // ============================================================================\n  // THEME ACTIVATION METHODS\n  // ============================================================================\n\n  /**\n   * Activate a theme\n   */\n  async activateTheme(themeId: string): Promise<void> {\n    logger.info('ThemeManager', 'activateTheme', 'Activating theme', { themeId });\n\n    try {\n      const theme = this.themesMap.get(themeId);\n      if (!theme) {\n        throw new Error(`Theme not found: ${themeId}`);\n      }\n\n      // Deactivate current theme\n      if (this.activeThemeInstance) {\n        await this.deactivateTheme(this.activeThemeInstance.id);\n      }\n\n      // Activate new theme\n      this.activeThemeInstance = theme;\n      this.currentThemeTypeInstance = theme.type;\n\n      // Apply theme to DOM\n      await this.applyThemeToDOM(theme);\n\n      // Notify listeners\n      this.notifyThemeActivated(theme);\n\n      logger.info('ThemeManager', 'activateTheme', 'Theme activated successfully', { themeId });\n    } catch (error) {\n      logger.error('ThemeManager', 'activateTheme', 'Failed to activate theme', { error, themeId });\n      throw error;\n    }\n  }\n\n  /**\n   * Deactivate a theme\n   */\n  async deactivateTheme(themeId: string): Promise<void> {\n    logger.info('ThemeManager', 'deactivateTheme', 'Deactivating theme', { themeId });\n\n    try {\n      if (this.activeThemeInstance?.id === themeId) {\n        // Remove theme from DOM\n        await this.removeThemeFromDOM(this.activeThemeInstance);\n\n        // Notify listeners\n        this.notifyThemeDeactivated(this.activeThemeInstance);\n\n        this.activeThemeInstance = null;\n      }\n\n      logger.info('ThemeManager', 'deactivateTheme', 'Theme deactivated successfully', { themeId });\n    } catch (error) {\n      logger.error('ThemeManager', 'deactivateTheme', 'Failed to deactivate theme', {\n        error,\n        themeId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Activate a theme by name\n   */\n  async activateThemeByName(name: string): Promise<void> {\n    const theme = this.getThemeByName(name);\n    if (!theme) {\n      throw new Error(`Theme not found with name: ${name}`);\n    }\n    await this.activateTheme(theme.id);\n  }\n\n  /**\n   * Get the currently active theme\n   */\n  getActiveTheme(): ITheme | null {\n    return this.activeThemeInstance;\n  }\n\n  /**\n   * Check if a specific theme is active\n   */\n  isThemeActive(id: string): boolean {\n    return this.activeThemeInstance?.id === id;\n  }\n\n  /**\n   * Switch to the opposite theme (light/dark)\n   */\n  async toggleThemeMode(): Promise<void> {\n    if (this.currentThemeTypeInstance === BaseThemeType.LIGHT) {\n      await this.switchToDarkTheme();\n    } else {\n      await this.switchToLightTheme();\n    }\n  }\n\n  /**\n   * Switch to light theme\n   */\n  async switchToLightTheme(): Promise<void> {\n    const lightThemes = this.getThemesByType(BaseThemeType.LIGHT);\n    if (lightThemes.length > 0) {\n      await this.activateTheme(lightThemes[0].id);\n    }\n  }\n\n  /**\n   * Switch to dark theme\n   */\n  async switchToDarkTheme(): Promise<void> {\n    const darkThemes = this.getThemesByType(BaseThemeType.DARK);\n    if (darkThemes.length > 0) {\n      await this.activateTheme(darkThemes[0].id);\n    }\n  }\n\n  // ============================================================================\n  // THEME ACCESS METHODS\n  // ============================================================================\n\n  /**\n   * Get theme class by selector\n   */\n  getThemeClass(className: string): IThemeClass | undefined {\n    if (!this.activeThemeInstance?.themeClasses) {\n      return undefined;\n    }\n\n    return this.activeThemeInstance.themeClasses[className];\n  }\n\n  /**\n   * Get theme color by path\n   */\n  getColor(path: string): string {\n    if (!this.activeThemeInstance?.colors) {\n      return '#000000'; // Default black color\n    }\n\n    // Simple path resolution (e.g., \"primary.main\" -> colors.primary.main)\n    const pathParts = path.split('.');\n    let current: any = this.activeThemeInstance.colors;\n\n    for (const part of pathParts) {\n      if (current && typeof current === 'object' && part in current) {\n        current = current[part];\n      } else {\n        return '#000000'; // Default black color\n      }\n    }\n\n    return typeof current === 'string' ? current : '#000000';\n  }\n\n  /**\n   * Get theme spacing value\n   */\n  getSpacing(size: string): number {\n    if (!this.activeThemeInstance?.spacing?.scale) {\n      return 0;\n    }\n\n    const spacingValue =\n      this.activeThemeInstance.spacing.scale[\n        size as keyof typeof this.activeThemeInstance.spacing.scale\n      ];\n    return typeof spacingValue === 'number' ? spacingValue : 0;\n  }\n\n  /**\n   * Get theme font size\n   */\n  getFontSize(size: string): number {\n    if (!this.activeThemeInstance?.typography?.fontSize) {\n      return 16; // Default font size\n    }\n\n    const fontSizeValue =\n      this.activeThemeInstance.typography.fontSize[\n        size as keyof typeof this.activeThemeInstance.typography.fontSize\n      ];\n    return typeof fontSizeValue === 'number' ? fontSizeValue : 16;\n  }\n\n  /**\n   * Get a border radius from the active theme\n   */\n  getBorderRadius(size: string): number {\n    if (!this.activeThemeInstance?.borderRadius) {\n      return 0;\n    }\n\n    const borderRadiusValue =\n      this.activeThemeInstance.borderRadius[\n        size as keyof typeof this.activeThemeInstance.borderRadius\n      ];\n    return typeof borderRadiusValue === 'number' ? borderRadiusValue : 0;\n  }\n\n  /**\n   * Get a shadow from the active theme\n   */\n  getShadow(size: string): string {\n    if (!this.activeThemeInstance?.shadows) {\n      return 'none';\n    }\n\n    const shadowValue =\n      this.activeThemeInstance.shadows[size as keyof typeof this.activeThemeInstance.shadows];\n    return typeof shadowValue === 'string' ? shadowValue : 'none';\n  }\n\n  /**\n   * Get an animation duration from the active theme\n   */\n  getAnimationDuration(size: string): number {\n    if (!this.activeThemeInstance?.animation?.duration) {\n      return 300; // Default 300ms\n    }\n\n    const durationValue =\n      this.activeThemeInstance.animation.duration[\n        size as keyof typeof this.activeThemeInstance.animation.duration\n      ];\n    return typeof durationValue === 'number' ? durationValue : 300;\n  }\n\n  /**\n   * Check if a theme supports a specific breakpoint\n   */\n  supportsBreakpoint(breakpoint: BreakpointName): boolean {\n    if (!this.activeThemeInstance?.breakpoints) {\n      return false;\n    }\n\n    return breakpoint in this.activeThemeInstance.breakpoints;\n  }\n\n  // ============================================================================\n  // EVENT MANAGEMENT\n  // ============================================================================\n\n  // ============================================================================\n  // THEME CLASS MANAGEMENT METHODS\n  // ============================================================================\n\n  /**\n   * Apply a theme class to an element\n   */\n  applyThemeClass(element: unknown, className: string): void {\n    if (!element || typeof element !== 'object' || !('style' in element)) {\n      logger.warn('ThemeManager', 'applyThemeClass', 'Invalid element provided', { className });\n      return;\n    }\n\n    const themeClass = this.getThemeClass(className);\n    if (!themeClass) {\n      logger.warn('ThemeManager', 'applyThemeClass', 'Theme class not found', { className });\n      return;\n    }\n\n    // Apply styles to element\n    this.applyStylesToElement(element as HTMLElement, themeClass);\n  }\n\n  /**\n   * Remove a theme class from an element\n   */\n  removeThemeClass(element: unknown, className: string): void {\n    if (!element || typeof element !== 'object' || !('style' in element)) {\n      logger.warn('ThemeManager', 'removeThemeClass', 'Invalid element provided', { className });\n      return;\n    }\n\n    const themeClass = this.getThemeClass(className);\n    if (!themeClass) {\n      logger.warn('ThemeManager', 'removeThemeClass', 'Theme class not found', { className });\n      return;\n    }\n\n    // Remove styles from element (simplified implementation)\n    const htmlElement = element as HTMLElement;\n    htmlElement.style.cssText = '';\n  }\n\n  // ============================================================================\n  // EVENT MANAGEMENT METHODS\n  // ============================================================================\n\n  /**\n   * Add a listener for theme changes\n   */\n  addListener(listener: IThemeListener): void {\n    this.listenersSet.add(listener);\n  }\n\n  /**\n   * Remove a listener\n   */\n  removeListener(listener: IThemeListener): boolean {\n    return this.listenersSet.delete(listener);\n  }\n\n  /**\n   * Clear all listeners\n   */\n  clearListeners(): void {\n    this.listenersSet.clear();\n  }\n\n  // ============================================================================\n  // STATISTICS AND IMPORT/EXPORT METHODS\n  // ============================================================================\n\n  /**\n   * Get theme statistics\n   */\n  getStatistics(): IThemeStatistics {\n    return {\n      totalThemes: this.themesMap.size,\n      activeThemes: this.activeThemeInstance ? 1 : 0,\n      inactiveThemes: this.themesMap.size - (this.activeThemeInstance ? 1 : 0),\n      themeSwitches: 0, // TODO: Implement counter\n      classApplications: 0, // TODO: Implement counter\n      averageSwitchTime: 0, // TODO: Implement timing\n      lastSwitchTime: 0, // TODO: Implement timing\n      memoryUsage: 0, // TODO: Implement memory tracking\n      cacheHitRate: 0, // TODO: Implement cache tracking\n      performance: {\n        totalSwitchTime: 0,\n        switchesPerSecond: 0,\n        cacheEfficiency: 0,\n      },\n      themeTypes: {\n        light: this.getThemesByType(BaseThemeType.LIGHT).length,\n        dark: this.getThemesByType(BaseThemeType.DARK).length,\n        auto: this.getThemesByType(BaseThemeType.AUTO).length,\n        custom: this.getThemesByType(BaseThemeType.CUSTOM).length,\n      },\n      themeVariants: {\n        default: 0, // TODO: Implement variant counting\n        primary: 0,\n        secondary: 0,\n        success: 0,\n        warning: 0,\n        error: 0,\n        info: 0,\n      },\n    };\n  }\n\n  /**\n   * Export theme configuration\n   */\n  exportTheme(themeId: string): string {\n    const theme = this.getTheme(themeId);\n    if (!theme) {\n      throw new Error(`Theme not found: ${themeId}`);\n    }\n\n    const config: IThemeConfiguration = {\n      metadata: {\n        version: '1.0.0',\n        exportedAt: new Date(),\n        exportedBy: 'ThemeManager',\n      },\n      theme: theme,\n    };\n\n    return JSON.stringify(config, null, 2);\n  }\n\n  /**\n   * Import theme configuration\n   */\n  importTheme(config: string): ITheme {\n    try {\n      const parsedConfig: IThemeConfiguration = JSON.parse(config);\n      this.registerTheme(parsedConfig.theme);\n      return parsedConfig.theme;\n    } catch (error) {\n      throw new Error(`Failed to import theme: ${error}`);\n    }\n  }\n\n  // ============================================================================\n  // LIFECYCLE METHODS\n  // ============================================================================\n\n  /**\n   * Reset the manager to initial state\n   */\n  reset(): void {\n    this.themesMap.clear();\n    this.activeThemeInstance = null;\n    this.currentThemeTypeInstance = BaseThemeType.CUSTOM;\n    this.isInitializedInstance = false;\n    this.listenersSet.clear();\n    this.themeCacheMap.clear();\n  }\n\n  /**\n   * Destroy the manager and clean up resources\n   */\n  destroy(): void {\n    this.reset();\n  }\n\n  // ============================================================================\n  // PRIVATE HELPER METHODS\n  // ============================================================================\n\n  /**\n   * Validate theme configuration\n   */\n  private validateTheme(theme: ITheme): void {\n    if (!theme.id || !theme.name) {\n      throw new Error('Theme must have id and name');\n    }\n\n    if (!theme.colors) {\n      throw new Error('Theme must have colors defined');\n    }\n\n    if (!theme.typography) {\n      throw new Error('Theme must have typography defined');\n    }\n  }\n\n  /**\n   * Cache theme classes for performance\n   */\n  private cacheThemeClasses(theme: ITheme): void {\n    if (theme.themeClasses) {\n      Object.entries(theme.themeClasses).forEach(([selector, themeClass]) => {\n        this.themeCacheMap.set(`${theme.id}:${selector}`, themeClass);\n      });\n    }\n  }\n\n  /**\n   * Clear theme cache\n   */\n  private clearThemeCache(themeId: string): void {\n    const keysToDelete: string[] = [];\n\n    this.themeCacheMap.forEach((_, key) => {\n      if (key.startsWith(`${themeId}:`)) {\n        keysToDelete.push(key);\n      }\n    });\n\n    keysToDelete.forEach(key => this.themeCacheMap.delete(key));\n  }\n\n  /**\n   * Apply theme to DOM\n   */\n  private async applyThemeToDOM(theme: ITheme): Promise<void> {\n    try {\n      // Create or update CSS custom properties\n      this.injectCSSVariables(theme);\n\n      // Apply theme classes to body\n      if (theme.themeClasses) {\n        this.applyThemeClasses(theme);\n      }\n\n      logger.info('ThemeManager', 'applyThemeToDOM', 'Theme applied to DOM', { themeId: theme.id });\n    } catch (error) {\n      logger.error('ThemeManager', 'applyThemeToDOM', 'Failed to apply theme to DOM', {\n        error,\n        themeId: theme.id,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Remove theme from DOM\n   */\n  private async removeThemeFromDOM(theme: ITheme): Promise<void> {\n    try {\n      // Remove theme-specific CSS classes\n      this.removeThemeClasses(theme);\n\n      logger.info('ThemeManager', 'removeThemeFromDOM', 'Theme removed from DOM', {\n        themeId: theme.id,\n      });\n    } catch (error) {\n      logger.error('ThemeManager', 'removeThemeFromDOM', 'Failed to remove theme from DOM', {\n        error,\n        themeId: theme.id,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Inject CSS custom properties\n   */\n  private injectCSSVariables(theme: ITheme): void {\n    const root = document.documentElement;\n\n    // Inject color variables\n    if (theme.colors) {\n      this.injectColorVariables(root, theme.colors, '--theme-color');\n    }\n\n    // Inject spacing variables\n    if (theme.spacing?.scale) {\n      Object.entries(theme.spacing.scale).forEach(([key, value]) => {\n        root.style.setProperty(`--theme-spacing-${key}`, `${value}px`);\n      });\n    }\n\n    // Inject typography variables\n    if (theme.typography?.fontSize) {\n      Object.entries(theme.typography.fontSize).forEach(([key, value]) => {\n        root.style.setProperty(`--theme-font-size-${key}`, `${value}px`);\n      });\n    }\n  }\n\n  /**\n   * Inject color variables recursively\n   */\n  private injectColorVariables(element: HTMLElement, colors: any, prefix: string): void {\n    Object.entries(colors).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        element.style.setProperty(`${prefix}-${key}`, value);\n      } else if (typeof value === 'object' && value !== null) {\n        this.injectColorVariables(element, value, `${prefix}-${key}`);\n      }\n    });\n  }\n\n  /**\n   * Apply theme classes to body\n   */\n  private applyThemeClasses(theme: ITheme): void {\n    const body = document.body;\n\n    // Add theme identifier class\n    body.classList.add(`theme-${theme.id}`);\n\n    // Apply theme classes\n    if (theme.themeClasses) {\n      Object.keys(theme.themeClasses).forEach(selector => {\n        const className = selector.replace('.', '');\n        body.classList.add(className);\n      });\n    }\n  }\n\n  /**\n   * Remove theme classes from body\n   */\n  private removeThemeClasses(theme: ITheme): void {\n    const body = document.body;\n\n    // Remove theme identifier class\n    body.classList.remove(`theme-${theme.id}`);\n\n    // Remove theme classes\n    if (theme.themeClasses) {\n      Object.keys(theme.themeClasses).forEach(selector => {\n        const className = selector.replace('.', '');\n        body.classList.remove(className);\n      });\n    }\n  }\n\n  /**\n   * Notify listeners of theme activation\n   */\n  private notifyThemeActivated(theme: ITheme): void {\n    this.listenersSet.forEach(listener => {\n      try {\n        listener.onThemeActivated?.(theme, this.activeThemeInstance);\n      } catch (error) {\n        logger.error('ThemeManager', 'notifyThemeActivated', 'Error in theme listener', {\n          error,\n          themeId: theme.id,\n        });\n      }\n    });\n  }\n\n  /**\n   * Notify listeners of theme deactivation\n   */\n  private notifyThemeDeactivated(theme: ITheme): void {\n    this.listenersSet.forEach(listener => {\n      try {\n        listener.onThemeDeactivated?.(theme, null);\n      } catch (error) {\n        logger.error('ThemeManager', 'notifyThemeDeactivated', 'Error in theme listener', {\n          error,\n          themeId: theme.id,\n        });\n      }\n    });\n  }\n\n  /**\n   * Apply styles from theme class to element\n   */\n  private applyStylesToElement(element: HTMLElement, themeClass: IThemeClass): void {\n    // Apply basic styles\n    if (themeClass.backgroundColor) {\n      element.style.backgroundColor = themeClass.backgroundColor;\n    }\n    if (themeClass.color) {\n      element.style.color = themeClass.color;\n    }\n    if (themeClass.padding) {\n      element.style.padding = `${themeClass.padding}px`;\n    }\n    if (themeClass.margin) {\n      element.style.margin = `${themeClass.margin}px`;\n    }\n    if (themeClass.borderRadius) {\n      element.style.borderRadius = `${themeClass.borderRadius}px`;\n    }\n    if (themeClass.borderRadiusValue) {\n      element.style.borderRadius = `${themeClass.borderRadiusValue}px`;\n    }\n    if (themeClass.fontSize) {\n      element.style.fontSize = `${themeClass.fontSize}px`;\n    }\n    if (themeClass.fontWeight) {\n      element.style.fontWeight = themeClass.fontWeight.toString();\n    }\n    if (themeClass.textAlign) {\n      element.style.textAlign = themeClass.textAlign;\n    }\n    if (themeClass.display) {\n      element.style.display = themeClass.display;\n    }\n    if (themeClass.flexDirection) {\n      element.style.flexDirection = themeClass.flexDirection;\n    }\n    if (themeClass.alignItems) {\n      element.style.alignItems = themeClass.alignItems;\n    }\n    if (themeClass.justifyContent) {\n      element.style.justifyContent = themeClass.justifyContent;\n    }\n    if (themeClass.cursor) {\n      element.style.cursor = themeClass.cursor;\n    }\n    if (themeClass.boxSizing) {\n      element.style.boxSizing = themeClass.boxSizing;\n    }\n    if (themeClass.position) {\n      element.style.position = themeClass.position;\n    }\n    if (themeClass.width && typeof themeClass.width === 'object') {\n      element.style.width = `${themeClass.width.value}${themeClass.width.unit}`;\n    }\n    if (themeClass.height && typeof themeClass.height === 'object') {\n      element.style.height = `${themeClass.height.value}${themeClass.height.unit}`;\n    }\n    if (themeClass.boxShadow) {\n      element.style.boxShadow = themeClass.boxShadow;\n    }\n    if (themeClass.transition) {\n      element.style.transition = themeClass.transition;\n    }\n    if (themeClass.cssAnimation) {\n      element.style.animation = themeClass.cssAnimation;\n    }\n  }\n}\n","/**\n * Theme Activator - Handles Theme Activation in Game Scenes\n *\n * Provides theme activation, application, and management functionality\n * for game scenes and game objects. Integrates with the existing\n * ThemeManager and ConfigManager systems.\n */\n\nimport { ITheme, IThemeClass } from '../interfaces/ITheme';\nimport { IThemeManager } from '../interfaces/IThemeManager';\nimport { IThemeActivator } from '../interfaces/IThemeActivator';\nimport { IThemeActivationResult, IThemeApplicationContext } from '../interfaces';\nimport { ThemeElementType } from '../enums/LayoutEnums';\nimport { ThemeManager } from './ThemeManager';\nimport { Logger } from '../../core/Logger';\n\n/**\n * Theme Activator Class\n *\n * Handles theme activation, application, and management for game scenes.\n * Provides integration between the theme system and game objects.\n */\nexport class ThemeActivator implements IThemeActivator {\n  private readonly logger: Logger = Logger.getInstance();\n  private readonly themeManager: IThemeManager;\n  private readonly activationHistory: Map<string, IThemeActivationResult> = new Map();\n  private readonly activeThemes: Map<string, ITheme> = new Map();\n  private readonly appliedClasses: Map<string, Set<string>> = new Map();\n\n  constructor(themeManager?: IThemeManager) {\n    this.themeManager = themeManager || new ThemeManager();\n\n    this.logger.info('ThemeActivator', 'constructor', 'Theme activator initialized');\n  }\n\n  // ============================================================================\n  // THEME ACTIVATION METHODS\n  // ============================================================================\n\n  /**\n   * Activate a theme for a specific scene\n   */\n  async activateThemeForScene(\n    sceneKey: string,\n    themeId: string,\n    context?: Partial<IThemeApplicationContext>\n  ): Promise<IThemeActivationResult> {\n    const startTime = performance.now();\n    const result: IThemeActivationResult = {\n      success: false,\n      themeId,\n      appliedClasses: [],\n      errors: [],\n      duration: 0,\n    };\n\n    try {\n      this.logger.info('ThemeActivator', 'activateThemeForScene', 'Activating theme for scene', {\n        sceneKey,\n        themeId,\n      });\n\n      // Get theme from ConfigManager or ThemeManager\n      const theme = this.getTheme(themeId);\n      if (!theme) {\n        result.errors.push(`Theme not found`);\n        return result;\n      }\n\n      // Create application context\n      const applicationContext: IThemeApplicationContext = {\n        sceneKey,\n        elementType: ThemeElementType.SCENE,\n        priority: 1,\n        ...context,\n      };\n\n      // Apply theme to scene\n      await this.applyThemeToScene(theme, applicationContext);\n\n      // Set active theme in ThemeManager\n      await this.themeManager.activateTheme(themeId);\n\n      // Store active theme\n      this.activeThemes.set(sceneKey, theme);\n\n      // Record activation\n      result.success = true;\n      result.sceneId = sceneKey;\n      result.appliedClasses = []; // TODO: Implement getAppliedClasses method\n      result.duration = performance.now() - startTime;\n\n      this.activationHistory.set(`${sceneKey}:${themeId}`, result);\n\n      this.logger.info('ThemeActivator', 'activateThemeForScene', 'Theme activated successfully', {\n        sceneKey,\n        themeId,\n        duration: result.duration,\n        appliedClasses: result.appliedClasses.length,\n      });\n\n      return result;\n    } catch (error) {\n      result.errors.push(`Theme manager error`);\n      result.duration = performance.now() - startTime;\n\n      this.logger.error('ThemeActivator', 'activateThemeForScene', 'Theme activation failed', {\n        error,\n        sceneKey,\n        themeId,\n      });\n\n      return result;\n    }\n  }\n\n  /**\n   * Apply theme to a game object\n   */\n  async applyThemeToGameObject(\n    gameObject: Phaser.GameObjects.GameObject,\n    themeId: string,\n    context?: Partial<IThemeApplicationContext>\n  ): Promise<IThemeActivationResult> {\n    const startTime = performance.now();\n    const result: IThemeActivationResult = {\n      success: false,\n      themeId,\n      appliedClasses: [],\n      errors: [],\n      duration: 0,\n    };\n\n    try {\n      this.logger.debug(\n        'ThemeActivator',\n        'applyThemeToGameObject',\n        'Applying theme to game object',\n        {\n          gameObjectType: gameObject.constructor.name,\n          themeId,\n        }\n      );\n\n      // Get theme\n      const theme = this.getTheme(themeId);\n      if (!theme) {\n        result.errors.push(`Theme not found: ${themeId}`);\n        return result;\n      }\n\n      // Create application context\n      const applicationContext: IThemeApplicationContext = {\n        sceneKey: gameObject.scene?.scene.key || 'unknown',\n        gameObjectId: gameObject.name || gameObject.constructor.name,\n        elementType: ThemeElementType.GAME_OBJECT,\n        priority: 2,\n        ...context,\n      };\n\n      // Apply theme to game object\n      await this.applyThemeToGameObjectInternal(gameObject, theme, applicationContext);\n\n      result.success = true;\n      result.appliedClasses = []; // TODO: Implement getAppliedClasses method\n      result.duration = performance.now() - startTime;\n\n      this.logger.debug(\n        'ThemeActivator',\n        'applyThemeToGameObject',\n        'Theme applied to game object',\n        {\n          gameObjectType: gameObject.constructor.name,\n          themeId,\n          duration: result.duration,\n        }\n      );\n\n      return result;\n    } catch (error) {\n      result.errors.push(`Application failed: ${error}`);\n      result.duration = performance.now() - startTime;\n\n      this.logger.error('ThemeActivator', 'applyThemeToGameObject', 'Theme application failed', {\n        error,\n        gameObjectType: gameObject.constructor.name,\n        themeId,\n      });\n\n      return result;\n    }\n  }\n\n  /**\n   * Switch theme for a scene\n   */\n  async switchThemeForScene(\n    sceneKey: string,\n    newThemeId: string,\n    context?: Partial<IThemeApplicationContext>\n  ): Promise<IThemeActivationResult> {\n    try {\n      this.logger.info('ThemeActivator', 'switchThemeForScene', 'Switching theme for scene', {\n        sceneKey,\n        newThemeId,\n      });\n\n      // Deactivate current theme\n      await this.deactivateThemeForScene(sceneKey);\n\n      // Activate new theme\n      const result = await this.activateThemeForScene(sceneKey, newThemeId, context);\n\n      this.logger.info('ThemeActivator', 'switchThemeForScene', 'Theme switched successfully', {\n        sceneKey,\n        newThemeId,\n        success: result.success,\n      });\n\n      return result;\n    } catch (error) {\n      this.logger.error('ThemeActivator', 'switchThemeForScene', 'Theme switch failed', {\n        error,\n        sceneKey,\n        newThemeId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Deactivate theme for a scene\n   */\n  async deactivateThemeForScene(sceneKey: string): Promise<void> {\n    try {\n      this.logger.info(\n        'ThemeActivator',\n        'deactivateThemeForScene',\n        'Deactivating theme for scene',\n        {\n          sceneKey,\n        }\n      );\n\n      // Remove applied classes\n      this.removeAppliedClasses(sceneKey);\n\n      // Remove from active themes\n      this.activeThemes.delete(sceneKey);\n\n      this.logger.info(\n        'ThemeActivator',\n        'deactivateThemeForScene',\n        'Theme deactivated successfully',\n        {\n          sceneKey,\n        }\n      );\n    } catch (error) {\n      this.logger.error('ThemeActivator', 'deactivateThemeForScene', 'Theme deactivation failed', {\n        error,\n        sceneKey,\n      });\n      throw error;\n    }\n  }\n\n  // ============================================================================\n  // THEME ACCESS METHODS\n  // ============================================================================\n\n  /**\n   * Get active theme for a scene\n   */\n  getActiveThemeForScene(sceneKey: string): ITheme | null {\n    const activeTheme = this.activeThemes.get(sceneKey) || this.themeManager.getActiveTheme();\n    \n    this.logger.debug('ThemeActivator', 'getActiveThemeForScene', 'Getting active theme for scene', {\n      sceneKey,\n      hasActiveTheme: !!activeTheme,\n    });\n\n    return activeTheme || null;\n  }\n\n  /**\n   * Get all active themes\n   */\n  getAllActiveThemes(): Map<string, ITheme> {\n    this.logger.debug('ThemeActivator', 'getAllActiveThemes', 'Getting all active themes', {\n      activeThemeCount: this.activeThemes.size,\n    });\n\n    return new Map(this.activeThemes);\n  }\n\n  /**\n   * Check if a theme is active for a scene\n   */\n  isThemeActiveForScene(sceneKey: string, themeId: string): boolean {\n    const activeTheme = this.activeThemes.get(sceneKey) || this.themeManager.getActiveTheme();\n    const isActive = activeTheme?.id === themeId;\n\n    this.logger.debug('ThemeActivator', 'isThemeActiveForScene', 'Checking if theme is active for scene', {\n      sceneKey,\n      themeId,\n      isActive,\n    });\n\n    return isActive;\n  }\n\n  /**\n   * Get applied classes for a scene\n   */\n  getAppliedClasses(sceneKey: string): string[] {\n    const classes = this.appliedClasses.get(sceneKey);\n    return classes ? Array.from(classes) : [];\n  }\n\n  /**\n   * Get activation history\n   */\n  getActivationHistory(): Map<string, IThemeActivationResult> {\n    this.logger.debug('ThemeActivator', 'getActivationHistory', 'Getting activation history', {\n      historySize: this.activationHistory.size,\n    });\n\n    return new Map(this.activationHistory);\n  }\n\n  // ============================================================================\n  // THEME UTILITY METHODS\n  // ============================================================================\n\n  /**\n   * Get available themes for a scene\n   */\n  getAvailableThemesForScene(sceneKey: string): ITheme[] {\n    try {\n      // Get themes from ThemeManager\n      const themes = this.themeManager.getThemes();\n\n      // Filter themes based on scene requirements\n      const availableThemes = themes.filter((theme: ITheme) =>\n        this.isThemeCompatibleWithScene(theme, sceneKey)\n      );\n\n      this.logger.debug('ThemeActivator', 'getAvailableThemesForScene', 'Getting available themes for scene', {\n        sceneKey,\n        availableThemeCount: availableThemes.length,\n      });\n\n      return availableThemes;\n    } catch (error) {\n      this.logger.error('ThemeActivator', 'getAvailableThemesForScene', 'Failed to get available themes for scene', {\n        error,\n        sceneKey,\n      });\n      return [];\n    }\n  }\n\n  /**\n   * Get theme by ID from multiple sources\n   */\n  private getTheme(themeId: string): ITheme | null {\n    // Try ThemeManager first\n    const theme = this.themeManager.getTheme(themeId);\n    if (theme) {\n      return theme;\n    }\n\n    return null;\n  }\n\n  /**\n   * Check if theme is compatible with scene\n   */\n  private isThemeCompatibleWithScene(theme: ITheme, _sceneKey: string): boolean {\n    // Basic compatibility check\n    // Can be extended with more complex logic\n    return !!(theme && theme.id && theme.name);\n  }\n\n  /**\n   * Apply theme to scene\n   */\n  private async applyThemeToScene(theme: ITheme, context: IThemeApplicationContext): Promise<void> {\n    try {\n      // Apply theme classes to scene\n      if (theme.themeClasses) {\n        await this.applyThemeClasses(theme.themeClasses, context);\n      }\n\n      // Apply theme properties to scene\n      await this.applyThemeProperties(theme, context);\n\n      this.logger.debug('ThemeActivator', 'applyThemeToScene', 'Theme applied to scene', {\n        sceneKey: context.sceneKey,\n        themeId: theme.id,\n      });\n    } catch (error) {\n      this.logger.error('ThemeActivator', 'applyThemeToScene', 'Failed to apply theme to scene', {\n        error,\n        sceneKey: context.sceneKey,\n        themeId: theme.id,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Apply theme to game object internally\n   */\n  private async applyThemeToGameObjectInternal(\n    gameObject: Phaser.GameObjects.GameObject,\n    theme: ITheme,\n    context: IThemeApplicationContext\n  ): Promise<void> {\n    try {\n      // Apply theme classes to game object\n      if (theme.themeClasses) {\n        await this.applyThemeClassesToGameObject(gameObject, theme.themeClasses, context);\n      }\n\n      // Apply theme properties to game object\n      await this.applyThemePropertiesToGameObject(gameObject, theme, context);\n\n      this.logger.debug(\n        'ThemeActivator',\n        'applyThemeToGameObjectInternal',\n        'Theme applied to game object',\n        {\n          gameObjectType: gameObject.constructor.name,\n          themeId: theme.id,\n        }\n      );\n    } catch (error) {\n      this.logger.error(\n        'ThemeActivator',\n        'applyThemeToGameObjectInternal',\n        'Failed to apply theme to game object',\n        {\n          error,\n          gameObjectType: gameObject.constructor.name,\n          themeId: theme.id,\n        }\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Apply theme classes\n   */\n  private async applyThemeClasses(\n    themeClasses: Record<string, IThemeClass>,\n    context: IThemeApplicationContext\n  ): Promise<void> {\n    for (const [className, themeClass] of Object.entries(themeClasses)) {\n      try {\n        // Apply class to scene\n        await this.applyThemeClass(className, themeClass, context);\n\n        // Track applied class\n        this.trackAppliedClass(context.sceneKey, className);\n      } catch (error) {\n        this.logger.warn('ThemeActivator', 'applyThemeClasses', 'Failed to apply theme class', {\n          error,\n          className,\n          sceneKey: context.sceneKey,\n        });\n      }\n    }\n  }\n\n  /**\n   * Apply theme classes to game object\n   */\n  private async applyThemeClassesToGameObject(\n    gameObject: Phaser.GameObjects.GameObject,\n    themeClasses: Record<string, IThemeClass>,\n    context: IThemeApplicationContext\n  ): Promise<void> {\n    for (const [className, themeClass] of Object.entries(themeClasses)) {\n      try {\n        // Apply class to game object\n        await this.applyThemeClassToGameObject(gameObject, className, themeClass, context);\n\n        // Track applied class\n        this.trackAppliedClass(context.sceneKey, className);\n      } catch (error) {\n        this.logger.warn(\n          'ThemeActivator',\n          'applyThemeClassesToGameObject',\n          'Failed to apply theme class to game object',\n          {\n            error,\n            className,\n            gameObjectType: gameObject.constructor.name,\n          }\n        );\n      }\n    }\n  }\n\n  /**\n   * Apply theme class\n   */\n  private async applyThemeClass(\n    className: string,\n    _themeClass: IThemeClass,\n    context: IThemeApplicationContext\n  ): Promise<void> {\n    // Apply theme class to scene\n    // This is a placeholder - actual implementation depends on scene structure\n    this.logger.debug('ThemeActivator', 'applyThemeClass', 'Applying theme class to scene', {\n      className,\n      sceneKey: context.sceneKey,\n    });\n  }\n\n  /**\n   * Apply theme class to game object\n   */\n  private async applyThemeClassToGameObject(\n    gameObject: Phaser.GameObjects.GameObject,\n    className: string,\n    _themeClass: IThemeClass,\n    _context: IThemeApplicationContext\n  ): Promise<void> {\n    // Apply theme class to game object\n    // This is a placeholder - actual implementation depends on game object type\n    this.logger.debug(\n      'ThemeActivator',\n      'applyThemeClassToGameObject',\n      'Applying theme class to game object',\n      {\n        className,\n        gameObjectType: gameObject.constructor.name,\n      }\n    );\n  }\n\n  /**\n   * Apply theme properties\n   */\n  private async applyThemeProperties(\n    theme: ITheme,\n    context: IThemeApplicationContext\n  ): Promise<void> {\n    // Apply theme properties to scene\n    // This is a placeholder - actual implementation depends on scene structure\n    this.logger.debug(\n      'ThemeActivator',\n      'applyThemeProperties',\n      'Applying theme properties to scene',\n      {\n        sceneKey: context.sceneKey,\n        themeId: theme.id,\n      }\n    );\n  }\n\n  /**\n   * Apply theme properties to game object\n   */\n  private async applyThemePropertiesToGameObject(\n    gameObject: Phaser.GameObjects.GameObject,\n    theme: ITheme,\n    _context: IThemeApplicationContext\n  ): Promise<void> {\n    // Apply theme properties to game object\n    // This is a placeholder - actual implementation depends on game object type\n    this.logger.debug(\n      'ThemeActivator',\n      'applyThemePropertiesToGameObject',\n      'Applying theme properties to game object',\n      {\n        gameObjectType: gameObject.constructor.name,\n        themeId: theme.id,\n      }\n    );\n  }\n\n  /**\n   * Track applied class\n   */\n  private trackAppliedClass(sceneKey: string, className: string): void {\n    if (!this.appliedClasses.has(sceneKey)) {\n      this.appliedClasses.set(sceneKey, new Set());\n    }\n    this.appliedClasses.get(sceneKey)!.add(className);\n  }\n\n  /**\n   * Remove applied classes\n   */\n  private removeAppliedClasses(sceneKey: string): void {\n    this.appliedClasses.delete(sceneKey);\n  }\n\n  // ============================================================================\n  // LIFECYCLE METHODS\n  // ============================================================================\n\n  /**\n   * Reset the activator\n   */\n  reset(): void {\n    this.activationHistory.clear();\n    this.activeThemes.clear();\n    this.appliedClasses.clear();\n\n    this.logger.info('ThemeActivator', 'reset', 'Theme activator reset');\n  }\n\n  /**\n   * Destroy the activator\n   */\n  destroy(): void {\n    this.reset();\n    this.logger.info('ThemeActivator', 'destroy', 'Theme activator destroyed');\n  }\n}\n","import Phaser from 'phaser';\nimport { ConfigManager } from '../../core/ConfigManager';\nimport { IConfigManager } from '../../core/interfaces';\nimport { Logger } from '../../core/Logger';\nimport { GameObjectFactoryManager } from '../../factory/GameObjectFactoryManager';\nimport { ResponsiveConfigLoader } from '../../core/ResponsiveConfigLoader';\nimport { ThemeActivator } from '../../layout/classes/ThemeActivator';\nimport { IThemeActivator } from '../../layout/interfaces/IThemeActivator';\nimport { ThemeElementType } from '../../layout/enums/LayoutEnums';\n// ThemeConfigLoader is deprecated - themes are now managed directly via ConfigManager\n\n/**\n * Base Scene Class\n * Provides common functionality for all scenes including:\n * - Configuration management\n * - Factory-based game object creation\n * - Responsive behavior\n * - Common scene lifecycle methods\n */\nexport abstract class BaseScene extends Phaser.Scene {\n  protected configManager: IConfigManager;\n  protected sceneConfigs: any = {};\n  protected gameObjects: Map<string, Phaser.GameObjects.GameObject> = new Map();\n  protected factoryManager: GameObjectFactoryManager;\n  protected logger: Logger = Logger.getInstance();\n\n  // NEW: Responsive configuration loader\n  protected responsiveConfigLoader: ResponsiveConfigLoader;\n\n  // NEW: Theme activator for theme management\n  protected themeActivator: IThemeActivator;\n\n  // NEW: Cached responsive configurations for performance\n  protected cachedResponsiveConfigs: Map<string, any> = new Map();\n  protected currentBreakpoint: string = 'default';\n  protected lastResizeWidth: number = 0;\n\n  constructor(sceneKey: string) {\n    super({ key: sceneKey });\n    this.configManager = ConfigManager.getInstance();\n    this.factoryManager = GameObjectFactoryManager.getInstance();\n\n    // Initialize responsive loader\n    this.responsiveConfigLoader = ResponsiveConfigLoader.getInstance();\n\n    // Initialize theme activator\n    this.themeActivator = new ThemeActivator();\n\n    this.logger.trace('BaseScene', 'super', 'BaseScene constructor called', {\n      sceneKey,\n      timestamp: Date.now(),\n    });\n  }\n\n  /**\n   * Abstract method that concrete scenes must implement\n   * to register their specific configurations\n   */\n  protected abstract registerSceneConfigs(): void;\n\n  /**\n   * Abstract method that concrete scenes must implement\n   * to get their scene name for configuration loading\n   */\n  protected abstract getSceneName(): string;\n\n  /**\n   * Preload assets before scene creation\n   * This method is called manually after configurations are loaded\n   */\n  preload(): void {\n    this.logger.trace('BaseScene', 'preload', 'Scene preload() method started', {\n      sceneKey: this.scene.key,\n      timestamp: Date.now(),\n    });\n\n    try {\n      // Load background images from asset configuration\n      if (this.sceneConfigs.asset && this.sceneConfigs.asset.backgrounds) {\n        this.logger.trace('BaseScene', 'preload', 'Loading background images', {\n          backgroundKeys: Object.keys(this.sceneConfigs.asset.backgrounds),\n        });\n\n        // Load desktop background\n        if (this.sceneConfigs.asset.backgrounds.desktop) {\n          const desktopBg = this.sceneConfigs.asset.backgrounds.desktop;\n          const desktopPath = this.sceneConfigs.asset.basePath + desktopBg.path;\n          this.logger.trace('BaseScene', 'preload', 'Loading desktop background', {\n            key: desktopBg.key,\n            path: desktopPath,\n          });\n          this.load.image(desktopBg.key, desktopPath);\n        }\n\n        // Load mobile background\n        if (this.sceneConfigs.asset.backgrounds.mobile) {\n          const mobileBg = this.sceneConfigs.asset.backgrounds.mobile;\n          const mobilePath = this.sceneConfigs.asset.basePath + mobileBg.path;\n          this.logger.trace('BaseScene', 'preload', 'Loading mobile background', {\n            key: mobileBg.key,\n            path: mobilePath,\n          });\n          this.load.image(mobileBg.key, mobilePath);\n        }\n\n        // Load mobile origin background (optional)\n        if (this.sceneConfigs.asset.backgrounds.mobileOrigin) {\n          const mobileOriginBg = this.sceneConfigs.asset.backgrounds.mobileOrigin;\n          const mobileOriginPath = this.sceneConfigs.asset.basePath + mobileOriginBg.path;\n          this.logger.trace('BaseScene', 'preload', 'Loading mobile origin background', {\n            key: mobileOriginBg.key,\n            path: mobileOriginPath,\n          });\n          this.load.image(mobileOriginBg.key, mobileOriginPath);\n        }\n\n        this.logger.info('BaseScene', 'preload', 'Background images loaded successfully');\n      } else {\n        this.logger.warn(\n          'BaseScene',\n          'preload',\n          'preload',\n          'No asset configuration found for background images'\n        );\n      }\n    } catch (error) {\n      this.logger.error('BaseScene', 'preload', 'Error in scene preload', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Wait for assets to finish loading\n   */\n  private async waitForAssetsToLoad(): Promise<void> {\n    this.logger.debug(\n      'BaseScene',\n      'waitForAssetsToLoad',\n      'waitForAssetsToLoad',\n      'Waiting for assets to load'\n    );\n\n    try {\n      // Start the loader if it hasn't been started\n      if (!this.load.isLoading()) {\n        this.load.start();\n      }\n\n      // Wait for the loader to complete\n      await new Promise<void>((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          reject(new Error('Asset loading timeout'));\n        }, 10000); // 10 second timeout\n\n        this.load.once('complete', () => {\n          clearTimeout(timeout);\n          this.logger.info(\n            'BaseScene',\n            'clearTimeout',\n            'clearTimeout',\n            'All assets loaded successfully'\n          );\n          resolve();\n        });\n\n        this.load.once('loaderror', (file: any) => {\n          clearTimeout(timeout);\n          this.logger.warn('BaseScene', 'clearTimeout', 'Asset load error', { file });\n          resolve(); // Continue anyway\n        });\n      });\n    } catch (error) {\n      this.logger.warn(\n        'BaseScene',\n        'resolve',\n        'Asset loading error or timeout, continuing anyway',\n        error\n      );\n    }\n  }\n\n  /**\n   * Scene initialization - purely configuration-driven\n   */\n  async create(): Promise<void> {\n    this.logger.trace('BaseScene', 'create', 'Scene create() method started', {\n      sceneKey: this.scene.key,\n      gameWidth: this.game.config.width,\n      gameHeight: this.game.config.height,\n      timestamp: Date.now(),\n    });\n\n    try {\n      // Register scene-specific configurations\n      this.registerSceneConfigs();\n\n      // Load all scene configurations after registration\n      this.loadSceneConfigs();\n\n      // Preload assets (background images) now that configs are loaded\n      this.preload();\n\n      // Wait for assets to load before proceeding\n      await this.waitForAssetsToLoad();\n\n      // Log scene creation\n      this.logger.info('BaseScene', 'create', 'Scene created', {\n        sceneKey: this.scene.key,\n        gameWidth: this.game.config.width,\n        gameHeight: this.game.config.height,\n        timestamp: Date.now(),\n      });\n\n      // Initialize scene based on configuration\n      await this.initializeSceneFromConfig();\n\n      // Setup responsive behavior\n      this.setupResponsiveBehavior();\n\n      // Log scene setup completion\n      this.logger.info('BaseScene', 'create', 'Scene setup completed', {\n        gameSize: {\n          width: Number(this.game.config.width),\n          height: Number(this.game.config.height),\n        },\n        scaleMode: this.game.scale.scaleMode,\n        gameObjectCount: this.gameObjects.size,\n      });\n\n      // Flush logs to ensure they're sent to server\n      await this.logger.flushLogs();\n    } catch (error) {\n      this.logger.error('BaseScene', 'create', 'Critical error in scene creation', error);\n      await this.logger.flushLogs();\n      throw error;\n    }\n  }\n\n  /**\n   * Load all scene configurations\n   */\n  private loadSceneConfigs(): void {\n    this.logger.trace('BaseScene', 'loadSceneConfigs', 'Starting to load scene configurations');\n\n    try {\n      const sceneName = this.getSceneName();\n\n      // Load all configurations\n      this.sceneConfigs = this.configManager.loadSceneConfigs(sceneName);\n\n      this.logger.trace('BaseScene', 'loadSceneConfigs', 'Scene configurations loaded', {\n        sceneName,\n        sceneConfigs: this.sceneConfigs,\n        configKeys: Object.keys(this.sceneConfigs),\n      });\n\n      if (this.sceneConfigs.logging) {\n        this.logger.info(\n          'BaseScene',\n          'loadSceneConfigs',\n          'All scene configurations loaded successfully'\n        );\n      } else {\n        this.logger.warn(\n          'BaseScene',\n          'loadSceneConfigs',\n          'Failed to load some scene configurations'\n        );\n      }\n    } catch (error) {\n      this.logger.error(\n        'BaseScene',\n        'loadSceneConfigs',\n        'Error loading scene configurations',\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize scene purely from configuration\n   */\n  private async initializeSceneFromConfig(): Promise<void> {\n    this.logger.trace(\n      'BaseScene',\n      'initializeSceneFromConfig',\n      'Starting scene initialization from config'\n    );\n\n    try {\n      if (!this.sceneConfigs.scene) {\n        this.logger.warn(\n          'BaseScene',\n          'initializeSceneFromConfig',\n          'No scene configuration available',\n          {\n            availableConfigs: Object.keys(this.sceneConfigs),\n          }\n        );\n        return;\n      }\n\n      const sceneConfig = this.sceneConfigs.scene;\n      this.logger.trace('BaseScene', 'initializeSceneFromConfig', 'Scene config found', {\n        sceneName: sceneConfig.sceneName,\n        gameObjectCount: sceneConfig.gameObjects?.length || 0,\n        backgroundColor: sceneConfig.backgroundColor,\n      });\n\n      // NEW: Register responsive config with ResponsiveConfigLoader\n      if (this.sceneConfigs.responsive) {\n        const sceneName = this.getSceneName();\n        this.responsiveConfigLoader.registerConfig(sceneName, this.sceneConfigs.responsive);\n        this.logger.info('BaseScene', 'initializeSceneFromConfig', 'Responsive config registered', {\n          sceneName,\n          configKeys: Object.keys(this.sceneConfigs.responsive),\n          hasDefault: !!this.sceneConfigs.responsive.default,\n          defaultObjectCount: this.sceneConfigs.responsive.default?.length || 0,\n        });\n\n        // Cache responsive configs for performance\n        this.cacheResponsiveConfigs();\n      } else {\n        this.logger.error(\n          'BaseScene',\n          'initializeSceneFromConfig',\n          'initializeSceneFromConfig',\n          'No responsive configuration found - scene cannot function properly'\n        );\n        throw new Error('Responsive configuration is required for scene functionality');\n      }\n\n      // NEW: Theme is now managed directly via ConfigManager\n      if (this.sceneConfigs.theme) {\n        this.logger.info('BaseScene', 'initializeSceneFromConfig', 'Theme loaded', {\n          themeName: this.sceneConfigs.theme.name,\n          hasThemeClasses: !!this.sceneConfigs.theme.themeClasses,\n        });\n      } else {\n        this.logger.warn(\n          'BaseScene',\n          'initializeSceneFromConfig',\n          'initializeSceneFromConfig',\n          'No theme configuration found - using default styling'\n        );\n      }\n\n      // Set scene background color from config\n      if (sceneConfig.backgroundColor) {\n        this.logger.debug(\n          'BaseScene',\n          'initializeSceneFromConfig',\n          'Setting scene background color',\n          {\n            backgroundColor: sceneConfig.backgroundColor,\n          }\n        );\n        this.cameras.main.setBackgroundColor(sceneConfig.backgroundColor);\n      }\n\n      // Create game objects from configuration\n      if (sceneConfig.gameObjects && sceneConfig.gameObjects.length > 0) {\n        this.logger.debug(\n          'BaseScene',\n          'initializeSceneFromConfig',\n          'Creating game objects from config',\n          {\n            gameObjectCount: sceneConfig.gameObjects.length,\n            gameObjectIds: sceneConfig.gameObjects.map((obj: any) => obj.id),\n          }\n        );\n        await this.createGameObjectsFromConfig(sceneConfig.gameObjects);\n      } else {\n        this.logger.warn(\n          'BaseScene',\n          'initializeSceneFromConfig',\n          'No game objects found in scene config'\n        );\n      }\n\n      // Trigger initial resize for all game objects after creation is complete\n      // This ensures proper positioning and sizing from the start\n      this.logger.debug(\n        'BaseScene',\n        'initializeSceneFromConfig',\n        'Triggering initial resize for all game objects',\n        {\n          gameObjectCount: this.gameObjects.size,\n          gameObjectIds: Array.from(this.gameObjects.keys()),\n        }\n      );\n\n      await this.triggerInitialResize();\n\n      this.logger.info(\n        'BaseScene',\n        'initializeSceneFromConfig',\n        'Scene initialized from configuration',\n        {\n          sceneName: sceneConfig.sceneName,\n          gameObjectCount: sceneConfig.gameObjects?.length || 0,\n          backgroundColor: sceneConfig.backgroundColor,\n          createdGameObjects: this.gameObjects.size,\n        }\n      );\n    } catch (error) {\n      this.logger.error(\n        'BaseScene',\n        'initializeSceneFromConfig',\n        'Error initializing scene from config',\n        error\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Create game objects recursively from configuration using Factory Pattern\n   * FIXED: Creates containers first, then children to ensure proper sizing\n   */\n  private async createGameObjectsFromConfig(\n    gameObjects: any[],\n    parent?: Phaser.GameObjects.Container\n  ): Promise<void> {\n    this.logger.debug(\n      'BaseScene',\n      'createGameObjectsFromConfig',\n      'Creating game objects recursively',\n      {\n        gameObjectCount: gameObjects.length,\n        parentId: parent?.name || 'root',\n        gameObjectIds: gameObjects.map((obj: any) => obj.id),\n      }\n    );\n\n    let successCount = 0;\n    let failureCount = 0;\n\n    // PHASE 1: Create all containers first (without children)\n    const containers: Array<{ config: any; gameObject: any; phaserContainer: any }> = [];\n\n    for (const objConfig of gameObjects) {\n      try {\n        this.logger.debug(\n          'BaseScene',\n          'createGameObjectsFromConfig',\n          'Starting creation of game object',\n          {\n            objectId: objConfig.id,\n            objectType: objConfig.type,\n            objectName: objConfig.name,\n            hasFactory: !!objConfig.factory,\n            factoryClassName: objConfig.factory?.className,\n            factoryCreateMethod: objConfig.factory?.createMethod,\n            parentId: parent?.name || 'root',\n          }\n        );\n\n        const gameObject = await this.createGameObjectFromConfig(objConfig, parent);\n\n        if (gameObject) {\n          successCount++;\n          this.logger.debug(\n            'BaseScene',\n            'createGameObjectsFromConfig',\n            'Game object created successfully',\n            {\n              objectId: objConfig.id,\n              objectType: objConfig.type,\n              phaserObjectType: gameObject.constructor.name,\n              gameObjectName: gameObject.name,\n            }\n          );\n\n          // Store reference to game object\n          this.gameObjects.set(objConfig.id, gameObject);\n          this.logger.debug(\n            'BaseScene',\n            'createGameObjectsFromConfig',\n            'Game object stored in scene map',\n            {\n              objectId: objConfig.id,\n              totalGameObjects: this.gameObjects.size,\n            }\n          );\n\n          // Check if this is a container and store for later child creation\n          if (objConfig.children && objConfig.children.length > 0) {\n            if (\n              gameObject instanceof Phaser.GameObjects.Container ||\n              (gameObject as any).phaserObject instanceof Phaser.GameObjects.Container\n            ) {\n              // Get the actual Phaser container for adding children\n              const phaserContainer =\n                gameObject instanceof Phaser.GameObjects.Container\n                  ? gameObject\n                  : (gameObject as any).phaserObject;\n\n              containers.push({ config: objConfig, gameObject, phaserContainer });\n\n              this.logger.debug(\n                'BaseScene',\n                'createGameObjectsFromConfig',\n                'Container stored for later child creation',\n                {\n                  objectId: objConfig.id,\n                  containerType: gameObject.constructor.name,\n                  phaserContainerType: phaserContainer.constructor.name,\n                  childCount: objConfig.children.length,\n                }\n              );\n            } else {\n              this.logger.warn(\n                'BaseScene',\n                'createGameObjectsFromConfig',\n                'Cannot add children to non-container object: ${objConfig.id}',\n                {\n                  objectType: objConfig.type,\n                  phaserObjectType: gameObject.constructor.name,\n                }\n              );\n            }\n          }\n        } else {\n          failureCount++;\n          this.logger.error(\n            'BaseScene',\n            'createGameObjectsFromConfig',\n            'Failed to create game object - createGameObjectFromConfig returned null',\n            {\n              objectId: objConfig.id,\n              objectType: objConfig.type,\n              objectName: objConfig.name,\n              hasFactory: !!objConfig.factory,\n              factoryClassName: objConfig.factory?.className,\n            }\n          );\n        }\n      } catch (error) {\n        failureCount++;\n        this.logger.error(\n          'BaseScene',\n          'createGameObjectsFromConfig',\n          'Exception during game object creation: ${objConfig.id}',\n          {\n            error: error instanceof Error ? error.message : String(error),\n            stack: error instanceof Error ? error.stack : undefined,\n            objectId: objConfig.id,\n            objectType: objConfig.type,\n          }\n        );\n      }\n    }\n\n    // PHASE 2: Create all children after containers are ready\n    for (const { config: objConfig, phaserContainer } of containers) {\n      try {\n        this.logger.debug(\n          'BaseScene',\n          'createGameObjectsFromConfig',\n          'Creating children for container',\n          {\n            objectId: objConfig.id,\n            childCount: objConfig.children.length,\n            childIds: objConfig.children.map((child: any) => child.id),\n          }\n        );\n\n        await this.createGameObjectsFromConfig(objConfig.children, phaserContainer);\n      } catch (error) {\n        this.logger.error(\n          'BaseScene',\n          'createGameObjectsFromConfig',\n          'Exception during child creation for container: ${objConfig.id}',\n          {\n            error: error instanceof Error ? error.message : String(error),\n            stack: error instanceof Error ? error.stack : undefined,\n            objectId: objConfig.id,\n            objectType: objConfig.type,\n          }\n        );\n      }\n    }\n\n    this.logger.info(\n      'BaseScene',\n      'createGameObjectsFromConfig',\n      'Game objects creation batch completed',\n      {\n        totalRequested: gameObjects.length,\n        successCount,\n        failureCount,\n        finalGameObjectCount: this.gameObjects.size,\n        parentId: parent?.name || 'root',\n      }\n    );\n  }\n\n  /**\n   * Trigger initial resize for all game objects after creation\n   * This ensures proper positioning and sizing from the start\n   */\n  private async triggerInitialResize(): Promise<void> {\n    this.logger.debug(\n      'BaseScene',\n      'triggerInitialResize',\n      'Starting initial resize for all game objects',\n      {\n        gameObjectCount: this.gameObjects.size,\n        gameObjectIds: Array.from(this.gameObjects.keys()),\n      }\n    );\n\n    try {\n      // Get current game dimensions\n      const gameWidth = this.game.config.width as number;\n      const gameHeight = this.game.config.height as number;\n\n      this.logger.debug('BaseScene', 'triggerInitialResize', 'Game dimensions for initial resize', {\n        gameWidth,\n        gameHeight,\n        gameObjectCount: this.gameObjects.size,\n      });\n\n      // Trigger resize for all game objects\n      for (const [objectId, gameObject] of this.gameObjects) {\n        try {\n          // Check if the game object has a resize method (our wrapper objects)\n          if ((gameObject as any).resize && typeof (gameObject as any).resize === 'function') {\n            this.logger.debug(\n              'BaseScene',\n              'triggerInitialResize',\n              'Triggering resize for wrapper object',\n              {\n                objectId,\n                objectType: gameObject.constructor.name,\n                hasResizeMethod: true,\n                hasResponsiveResizeMethod: false,\n              }\n            );\n\n            // Call resize with current game dimensions\n            (gameObject as any).resize(gameWidth, gameHeight);\n          } else if (\n            (gameObject as any).handleResponsiveResize &&\n            typeof (gameObject as any).handleResponsiveResize === 'function'\n          ) {\n            // Check if the game object has a responsive resize method (shapes like Rectangle)\n            this.logger.debug(\n              'BaseScene',\n              'triggerInitialResize',\n              'Triggering responsive resize for shape object',\n              {\n                objectId,\n                objectType: gameObject.constructor.name,\n                hasResponsiveResizeMethod: true,\n              }\n            );\n\n            // Call handleResponsiveResize with current game dimensions\n            (gameObject as any).handleResponsiveResize(gameWidth, gameHeight);\n          } else if (gameObject instanceof Phaser.GameObjects.Container) {\n            this.logger.debug(\n              'BaseScene',\n              'triggerInitialResize',\n              'Skipping resize for Phaser container (no wrapper)',\n              {\n                objectId,\n                objectType: gameObject.constructor.name,\n                hasResizeMethod: false,\n              }\n            );\n          } else {\n            this.logger.debug(\n              'BaseScene',\n              'triggerInitialResize',\n              'Skipping resize for non-container object',\n              {\n                objectId,\n                objectType: gameObject.constructor.name,\n                hasResizeMethod: false,\n                hasResponsiveResizeMethod: false,\n              }\n            );\n          }\n        } catch (error) {\n          this.logger.error(\n            'BaseScene',\n            'triggerInitialResize',\n            'Error during initial resize for object: ${objectId}',\n            {\n              error: error instanceof Error ? error.message : String(error),\n              objectId,\n              objectType: gameObject.constructor.name,\n            }\n          );\n        }\n      }\n\n      this.logger.info(\n        'BaseScene',\n        'triggerInitialResize',\n        'Initial resize completed for all game objects',\n        {\n          gameObjectCount: this.gameObjects.size,\n          gameWidth,\n          gameHeight,\n        }\n      );\n    } catch (error) {\n      this.logger.error(\n        'BaseScene',\n        'triggerInitialResize',\n        'Error during initial resize process',\n        {\n          error: error instanceof Error ? error.message : String(error),\n          gameObjectCount: this.gameObjects.size,\n        }\n      );\n    }\n  }\n\n  /**\n   * Create a single game object from configuration using the Factory Pattern\n   */\n  private async createGameObjectFromConfig(\n    objConfig: any,\n    parent?: Phaser.GameObjects.Container\n  ): Promise<Phaser.GameObjects.GameObject | null> {\n    this.logger.debug(\n      'BaseScene',\n      'createGameObjectFromConfig',\n      'Creating game object from config',\n      {\n        objectId: objConfig.id,\n        objectType: objConfig.type,\n        hasFactory: !!objConfig.factory,\n        factoryClassName: objConfig.factory?.className,\n        parentId: parent?.name || 'root',\n      }\n    );\n\n    try {\n      let gameObject: Phaser.GameObjects.GameObject | null = null;\n\n      // Use Factory Pattern to create game objects\n      if (objConfig.factory && objConfig.factory.className) {\n        this.logger.debug(\n          'BaseScene',\n          'createGameObjectFromConfig',\n          'Using static factory method',\n          {\n            objectId: objConfig.id,\n            className: objConfig.factory.className,\n            createMethod: objConfig.factory.createMethod,\n          }\n        );\n\n        // Use static factory method from concrete classes\n        gameObject = await this.createGameObjectUsingStaticFactory(objConfig, parent);\n\n        this.logger.debug(\n          'BaseScene',\n          'createGameObjectFromConfig',\n          'Static factory method completed',\n          {\n            objectId: objConfig.id,\n            hasResult: !!gameObject,\n            resultType: gameObject?.constructor.name,\n            result: gameObject,\n          }\n        );\n      } else {\n        this.logger.debug(\n          'BaseScene',\n          'createGameObjectFromConfig',\n          'Using factory manager fallback',\n          {\n            objectId: objConfig.id,\n            objectType: objConfig.type,\n          }\n        );\n\n        // Fallback to factory manager\n        const factoryInput = {\n          id: objConfig.id || 'unknown',\n          type: objConfig.type || 'container',\n          scene: this,\n          config: objConfig,\n        };\n        gameObject = this.factoryManager.createGameObject(factoryInput);\n\n        this.logger.debug(\n          'BaseScene',\n          'createGameObjectFromConfig',\n          'Factory manager fallback completed',\n          {\n            objectId: objConfig.id,\n            hasResult: !!gameObject,\n            resultType: gameObject?.constructor.name,\n            result: gameObject,\n          }\n        );\n      }\n\n      if (gameObject) {\n        this.logger.debug(\n          'BaseScene',\n          'createGameObjectFromConfig',\n          'Game object created successfully, setting properties',\n          {\n            objectId: objConfig.id,\n            phaserObjectType: gameObject.constructor.name,\n            gameObjectName: gameObject.name,\n          }\n        );\n\n        // Set position and size\n        this.setGameObjectProperties(gameObject, objConfig);\n\n        // Add to parent if specified\n        if (parent && parent instanceof Phaser.GameObjects.Container) {\n          // ALL objects (including wrapper objects) should be added to parent containers\n          // This maintains the proper hierarchy: background-container > footer-container > footer-rectangle\n          this.logger.debug(\n            'BaseScene',\n            'createGameObjectFromConfig',\n            'Adding game object to parent container',\n            {\n              objectId: objConfig.id,\n              parentId: parent.name,\n              objectType: gameObject.constructor.name,\n              isWrapperObject: !!(gameObject as any).phaserObject,\n            }\n          );\n\n          // Use our custom addChild method if the parent has it, otherwise fall back to Phaser's add\n          if ((parent as any).addChild && typeof (parent as any).addChild === 'function') {\n            (parent as any).addChild(gameObject);\n          } else {\n            parent.add(gameObject);\n          }\n        } else {\n          this.logger.debug(\n            'BaseScene',\n            'createGameObjectFromConfig',\n            'Adding game object to scene',\n            {\n              objectId: objConfig.id,\n            }\n          );\n          this.add.existing(gameObject);\n        }\n\n        this.logger.info(\n          'BaseScene',\n          'createGameObjectFromConfig',\n          'Game object fully created and added to scene',\n          {\n            objectId: objConfig.id,\n            phaserObjectType: gameObject.constructor.name,\n            gameObjectName: gameObject.name,\n            addedToScene: true,\n          }\n        );\n      } else {\n        this.logger.error(\n          'BaseScene',\n          'createGameObjectFromConfig',\n          'Factory failed to create game object - returning null',\n          {\n            objectId: objConfig.id,\n            objectType: objConfig.type,\n            hasFactory: !!objConfig.factory,\n            factoryClassName: objConfig.factory?.className,\n            factoryCreateMethod: objConfig.factory?.createMethod,\n          }\n        );\n      }\n\n      return gameObject;\n    } catch (error) {\n      this.logger.error(\n        'BaseScene',\n        'createGameObjectFromConfig',\n        'Critical error creating game object from config: ${objConfig.id}',\n        {\n          error: error instanceof Error ? error.message : String(error),\n          stack: error instanceof Error ? error.stack : undefined,\n          objectId: objConfig.id,\n          objectType: objConfig.type,\n          factory: objConfig.factory,\n        }\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Create game object using static factory methods from concrete classes\n   */\n  private async createGameObjectUsingStaticFactory(\n    objConfig: any,\n    parent?: Phaser.GameObjects.Container\n  ): Promise<Phaser.GameObjects.GameObject | null> {\n    this.logger.debug(\n      'BaseScene',\n      'createGameObjectUsingStaticFactory',\n      'Using static factory method',\n      {\n        objectId: objConfig.id,\n        className: objConfig.factory.className,\n        createMethod: objConfig.factory.createMethod,\n      }\n    );\n\n    try {\n      const { className, createMethod = 'createFromConfig' } = objConfig.factory;\n\n      this.logger.debug(\n        'BaseScene',\n        'createGameObjectUsingStaticFactory',\n        'Factory configuration parsed',\n        {\n          objectId: objConfig.id,\n          className,\n          createMethod,\n        }\n      );\n\n      // Use the factory manager to create the game object\n      // This delegates the responsibility to the proper factory system\n      const gameObject = await this.factoryManager.createGameObjectWithStaticFactory(\n        objConfig,\n        this,\n        parent\n      );\n\n      this.logger.debug(\n        'BaseScene',\n        'createGameObjectUsingStaticFactory',\n        'Static factory method completed',\n        {\n          objectId: objConfig.id,\n          hasResult: !!gameObject,\n          resultType: gameObject?.constructor.name,\n          result: gameObject\n            ? {\n                name: gameObject.name,\n                type: gameObject.constructor.name,\n                visible: (gameObject as any).visible,\n                active: (gameObject as any).active,\n              }\n            : null,\n        }\n      );\n\n      return gameObject;\n    } catch (error) {\n      this.logger.error(\n        'BaseScene',\n        'active',\n        'Critical error using static factory for ${objConfig.id}:',\n        {\n          error: error instanceof Error ? error.message : String(error),\n          stack: error instanceof Error ? error.stack : undefined,\n          objectId: objConfig.id,\n          className: objConfig.factory?.className,\n          createMethod: objConfig.factory?.createMethod,\n        }\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Set common game object properties\n   */\n  private setGameObjectProperties(gameObject: Phaser.GameObjects.GameObject, objConfig: any): void {\n    this.logger.debug('BaseScene', 'setGameObjectProperties', 'Setting game object properties', {\n      objectId: objConfig.id,\n      hasSetPosition: 'setPosition' in gameObject,\n      hasSetSize: 'setSize' in gameObject,\n      config: {\n        x: objConfig.x,\n        y: objConfig.y,\n        width: objConfig.width,\n        height: objConfig.height,\n        name: objConfig.name,\n      },\n    });\n\n    // Set position if the object supports it\n    if (objConfig.x !== undefined && 'setPosition' in gameObject) {\n      let x = objConfig.x;\n      let y = objConfig.y || 0;\n\n      // Handle \"fill\" positioning for y coordinate\n      if (typeof y === 'string' && y === 'fill') {\n        // Position at the bottom of the parent or scene\n        const parentContainer = this.getParentContainer(gameObject);\n        if (parentContainer) {\n          // For \"fill\" y, position at the bottom of the parent container\n          y = parentContainer.height;\n          this.logger.debug(\n            'BaseScene',\n            'setGameObjectProperties',\n            'Resolved fill y position from parent',\n            {\n              objectId: objConfig.id,\n              parentHeight: parentContainer.height,\n              resolvedY: y,\n            }\n          );\n        } else {\n          // Fallback to scene height\n          y = this.game.config.height as number;\n          this.logger.debug(\n            'BaseScene',\n            'setGameObjectProperties',\n            'Using scene height for fill y position',\n            {\n              objectId: objConfig.id,\n              sceneHeight: y,\n            }\n          );\n        }\n      }\n\n      this.logger.debug('BaseScene', 'setGameObjectProperties', 'Setting position', {\n        objectId: objConfig.id,\n        x: x,\n        y: y,\n      });\n      (gameObject as any).setPosition(x, y);\n    }\n\n    // Set size if supported\n    if (objConfig.width && objConfig.width !== 'fill') {\n      if ('setSize' in gameObject) {\n        this.logger.debug('BaseScene', 'setGameObjectProperties', 'Setting size', {\n          objectId: objConfig.id,\n          width: objConfig.width,\n          height: objConfig.height || objConfig.width,\n        });\n        (gameObject as any).setSize(objConfig.width, objConfig.height || objConfig.width);\n      }\n    }\n\n    // Set name for debugging\n    gameObject.name = objConfig.name || objConfig.id;\n    this.logger.debug('BaseScene', 'setGameObjectProperties', 'Set game object name', {\n      objectId: objConfig.id,\n      name: gameObject.name,\n    });\n\n    // Set z-order if specified\n    if (objConfig.zOrder !== undefined && 'setDepth' in gameObject) {\n      this.logger.debug('BaseScene', 'setGameObjectProperties', 'Setting z-order', {\n        objectId: objConfig.id,\n        zOrder: objConfig.zOrder,\n      });\n      (gameObject as any).setDepth(objConfig.zOrder);\n    }\n  }\n\n  /**\n   * Setup responsive behavior\n   */\n  private setupResponsiveBehavior(): void {\n    this.logger.debug(\n      'BaseScene',\n      'setupResponsiveBehavior',\n      'setupResponsiveBehavior',\n      'Setting up responsive behavior'\n    );\n\n    // Create resize handler\n    const resizeHandler = () => {\n      this.handleResize();\n    };\n\n    // Add resize event listener\n    window.addEventListener('resize', resizeHandler);\n\n    // Also listen to Phaser's resize events\n    this.scale.on('resize', resizeHandler);\n\n    // Log responsive config if available\n    if (this.sceneConfigs.responsive) {\n      this.logger.info(\n        'BaseScene',\n        'setupResponsiveBehavior',\n        'Responsive behavior setup completed with config',\n        {\n          scaleMode: this.game.scale.scaleMode,\n          responsiveConfig: this.sceneConfigs.responsive,\n        }\n      );\n    } else {\n      this.logger.info(\n        'BaseScene',\n        'setupResponsiveBehavior',\n        'Responsive behavior setup completed (no config)',\n        {\n          scaleMode: this.game.scale.scaleMode,\n        }\n      );\n    }\n  }\n\n  /**\n   * Handle screen resize\n   */\n  private handleResize(): void {\n    try {\n      // Get new dimensions\n      const newWidth = window.innerWidth;\n      const newHeight = window.innerHeight;\n\n      this.logger.debug('BaseScene', 'handleResize', 'Screen resize detected', {\n        newDimensions: { width: newWidth, height: newHeight },\n        gameObjectCount: this.gameObjects.size,\n      });\n\n      // Find the root container (the one without a parent)\n      const rootContainer = this.findRootContainer();\n\n      if (rootContainer) {\n        this.logger.debug('BaseScene', 'handleResize', 'Found root container, triggering resize', {\n          rootContainerId: rootContainer.name || 'unnamed',\n          rootContainerType: rootContainer.constructor.name,\n        });\n\n        // Call resize on the root container\n        if (typeof (rootContainer as any).resize === 'function') {\n          (rootContainer as any).resize(newWidth, newHeight);\n        } else {\n          this.logger.warn(\n            'BaseScene',\n            'handleResize',\n            'Root container does not have resize method',\n            {\n              rootContainerId: rootContainer.name || 'unnamed',\n              rootContainerType: rootContainer.constructor.name,\n            }\n          );\n        }\n      } else {\n        this.logger.warn(\n          'BaseScene',\n          'handleResize',\n          'handleResize',\n          'No root container found for resize propagation'\n        );\n      }\n\n      // Log resize event\n      this.logger.info('BaseScene', 'handleResize', 'Screen resized', {\n        newDimensions: { width: newWidth, height: newHeight },\n        timestamp: Date.now(),\n      });\n    } catch (error) {\n      this.logger.error('BaseScene', 'handleResize', 'Error handling resize', error);\n    }\n  }\n\n  /**\n   * Scene update (called every frame)\n   */\n  update(time: number, delta: number): void {\n    // Configuration-driven updates can be added here later\n    // For now, just log performance metrics occasionally\n    if (time % 1000 < delta) {\n      // Log every second\n      this.logger.trace('BaseScene', 'update', 'Scene update', {\n        time,\n        delta,\n        fps: Math.round(1000 / delta),\n        gameObjectCount: this.gameObjects.size,\n      });\n    }\n  }\n\n  /**\n   * Scene shutdown\n   */\n  async shutdown(): Promise<void> {\n    this.logger.debug('BaseScene', 'shutdown', 'Scene shutdown started', {\n      gameObjectCount: this.gameObjects.size,\n    });\n\n    // Clean up game objects\n    this.gameObjects.clear();\n\n    // Log scene shutdown\n    this.logger.info('BaseScene', 'shutdown', 'Scene shutdown', {\n      timestamp: Date.now(),\n    });\n\n    // Flush logs before shutdown\n    await this.logger.flushLogs();\n  }\n\n  /**\n   * Get game object by ID\n   */\n  protected getGameObject(id: string): Phaser.GameObjects.GameObject | undefined {\n    return this.gameObjects.get(id);\n  }\n\n  /**\n   * Get all game objects\n   */\n  protected getAllGameObjects(): Map<string, Phaser.GameObjects.GameObject> {\n    return this.gameObjects;\n  }\n\n  /**\n   * Check if game object exists\n   */\n  protected hasGameObject(id: string): boolean {\n    return this.gameObjects.has(id);\n  }\n\n  /**\n   * Find the root container (the first game object in the scene config)\n   */\n  private findRootContainer(): Phaser.GameObjects.Container | null {\n    // First, try to find the first game object from the scene config\n    if (\n      this.sceneConfigs.scene &&\n      this.sceneConfigs.scene.gameObjects &&\n      this.sceneConfigs.scene.gameObjects.length > 0\n    ) {\n      const firstGameObjectId = this.sceneConfigs.scene.gameObjects[0].id;\n      const firstGameObject = this.gameObjects.get(firstGameObjectId);\n\n      if (firstGameObject && firstGameObject instanceof Phaser.GameObjects.Container) {\n        this.logger.debug(\n          'BaseScene',\n          'findRootContainer',\n          'Found root container from scene config',\n          {\n            rootContainerId: firstGameObject.name || firstGameObjectId,\n            rootContainerType: firstGameObject.constructor.name,\n          }\n        );\n        return firstGameObject;\n      }\n    }\n\n    // Fallback: Look for a container that has no parent\n    for (const gameObject of this.gameObjects.values()) {\n      if (gameObject instanceof Phaser.GameObjects.Container) {\n        // Check if this container has no parent\n        if (!(gameObject as any).parent) {\n          this.logger.debug(\n            'BaseScene',\n            'findRootContainer',\n            'Found root container by parent check',\n            {\n              rootContainerId: gameObject.name || 'unnamed',\n              rootContainerType: gameObject.constructor.name,\n            }\n          );\n          return gameObject;\n        }\n      }\n    }\n\n    this.logger.warn(\n      'BaseScene',\n      'findRootContainer',\n      'findRootContainer',\n      'No root container found'\n    );\n    return null;\n  }\n\n  /**\n   * Get the parent container for a game object\n   */\n  private getParentContainer(\n    gameObject: Phaser.GameObjects.GameObject\n  ): Phaser.GameObjects.Container | null {\n    // Check if the game object has a parent property\n    if ((gameObject as any).parent) {\n      return (gameObject as any).parent;\n    }\n\n    // Check if the game object is a child of any container in the scene\n    for (const [_, sceneGameObject] of this.gameObjects) {\n      if (sceneGameObject instanceof Phaser.GameObjects.Container) {\n        // Check if the game object is a child of this container\n        const children = (sceneGameObject as any).list || [];\n        if (children.includes(gameObject)) {\n          return sceneGameObject;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Cache responsive configurations for performance\n   * This prevents lag during resize by pre-loading all configs\n   */\n  private cacheResponsiveConfigs(): void {\n    this.logger.trace(\n      'BaseScene',\n      'cacheResponsiveConfigs',\n      'cacheResponsiveConfigs',\n      'Caching responsive configurations for performance'\n    );\n\n    try {\n      if (!this.sceneConfigs.responsive) {\n        this.logger.warn(\n          'BaseScene',\n          'cacheResponsiveConfigs',\n          'cacheResponsiveConfigs',\n          'No responsive config to cache'\n        );\n        return;\n      }\n\n      const responsiveConfig = this.sceneConfigs.responsive;\n\n      // Cache default breakpoint\n      if (responsiveConfig.default) {\n        responsiveConfig.default.forEach((layout: any) => {\n          this.cachedResponsiveConfigs.set(`default-${layout.id}`, layout);\n        });\n      }\n\n      // Cache all breakpoint configurations\n      Object.entries(responsiveConfig.responsiveSettings).forEach(([breakpointKey, layouts]) => {\n        (layouts as any[]).forEach((layout: any) => {\n          this.cachedResponsiveConfigs.set(`${breakpointKey}-${layout.id}`, layout);\n        });\n      });\n\n      this.logger.info(\n        'BaseScene',\n        'cacheResponsiveConfigs',\n        'Responsive configurations cached successfully',\n        {\n          totalCached: this.cachedResponsiveConfigs.size,\n          breakpoints: Object.keys(responsiveConfig.responsiveSettings),\n          defaultCount: responsiveConfig.default?.length || 0,\n        }\n      );\n    } catch (error) {\n      this.logger.error(\n        'BaseScene',\n        'cacheResponsiveConfigs',\n        'Error caching responsive configurations',\n        error\n      );\n    }\n  }\n\n  /**\n   * Get cached responsive configuration for an object and breakpoint\n   */\n  protected getCachedResponsiveConfig(objectId: string, breakpoint: string = 'default'): any {\n    const cacheKey = `${breakpoint}-${objectId}`;\n    return this.cachedResponsiveConfigs.get(cacheKey);\n  }\n\n  /**\n   * Get current breakpoint based on screen width\n   */\n  protected getCurrentBreakpoint(width: number): string {\n    if (width < 576) return 'xs';\n    if (width < 768) return 'sm';\n    if (width < 992) return 'md';\n    if (width < 1200) return 'lg';\n    return 'xl';\n  }\n\n  /**\n   * Pass responsive and theme configs to game objects\n   * This method is called by game objects to get their configurations\n   */\n  protected getGameObjectConfigs(_objectId: string): {\n    responsive: any;\n    theme: any;\n    currentBreakpoint: string;\n  } {\n    const currentWidth = this.game.config.width as number;\n    const currentBreakpoint = this.getCurrentBreakpoint(currentWidth);\n\n    // Return the full responsive configuration structure that Container expects\n    return {\n      responsive: this.sceneConfigs.responsive,\n      theme: this.sceneConfigs.theme,\n      currentBreakpoint,\n    };\n  }\n\n  // ============================================================================\n  // THEME ACTIVATION METHODS\n  // ============================================================================\n\n  /**\n   * Activate a theme for this scene\n   */\n  protected async activateTheme(themeId: string): Promise<void> {\n    try {\n      this.logger.info('BaseScene', 'activateTheme', 'Activating theme for scene', {\n        sceneKey: this.scene.key,\n        themeId,\n      });\n\n      const result = await this.themeActivator.activateThemeForScene(this.scene.key, themeId, {\n        sceneKey: this.scene.key,\n        elementType: ThemeElementType.SCENE,\n        priority: 1,\n      });\n\n      if (result.success) {\n        this.logger.info('BaseScene', 'activateTheme', 'Theme activated successfully', {\n          sceneKey: this.scene.key,\n          themeId,\n          appliedClasses: result.appliedClasses.length,\n          duration: result.duration,\n        });\n      } else {\n        this.logger.error('BaseScene', 'activateTheme', 'Theme activation failed', {\n          sceneKey: this.scene.key,\n          themeId,\n          errors: result.errors,\n        });\n      }\n    } catch (error) {\n      this.logger.error('BaseScene', 'activateTheme', 'Theme activation error', {\n        error,\n        sceneKey: this.scene.key,\n        themeId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Apply theme to a game object\n   */\n  protected async applyThemeToGameObject(\n    gameObject: Phaser.GameObjects.GameObject,\n    themeId: string\n  ): Promise<void> {\n    try {\n      this.logger.debug('BaseScene', 'applyThemeToGameObject', 'Applying theme to game object', {\n        sceneKey: this.scene.key,\n        gameObjectType: gameObject.constructor.name,\n        themeId,\n      });\n\n      const result = await this.themeActivator.applyThemeToGameObject(gameObject, themeId, {\n        sceneKey: this.scene.key,\n        gameObjectId: gameObject.name || gameObject.constructor.name,\n        elementType: ThemeElementType.GAME_OBJECT,\n        priority: 2,\n      });\n\n      if (result.success) {\n        this.logger.debug('BaseScene', 'applyThemeToGameObject', 'Theme applied to game object', {\n          sceneKey: this.scene.key,\n          gameObjectType: gameObject.constructor.name,\n          themeId,\n          duration: result.duration,\n        });\n      } else {\n        this.logger.warn('BaseScene', 'applyThemeToGameObject', 'Theme application failed', {\n          sceneKey: this.scene.key,\n          gameObjectType: gameObject.constructor.name,\n          themeId,\n          errors: result.errors,\n        });\n      }\n    } catch (error) {\n      this.logger.error('BaseScene', 'applyThemeToGameObject', 'Theme application error', {\n        error,\n        sceneKey: this.scene.key,\n        gameObjectType: gameObject.constructor.name,\n        themeId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Switch theme for this scene\n   */\n  protected async switchTheme(newThemeId: string): Promise<void> {\n    try {\n      this.logger.info('BaseScene', 'switchTheme', 'Switching theme for scene', {\n        sceneKey: this.scene.key,\n        newThemeId,\n      });\n\n      const result = await this.themeActivator.switchThemeForScene(this.scene.key, newThemeId, {\n        sceneKey: this.scene.key,\n        elementType: ThemeElementType.SCENE,\n        priority: 1,\n      });\n\n      if (result.success) {\n        this.logger.info('BaseScene', 'switchTheme', 'Theme switched successfully', {\n          sceneKey: this.scene.key,\n          newThemeId,\n          appliedClasses: result.appliedClasses.length,\n          duration: result.duration,\n        });\n      } else {\n        this.logger.error('BaseScene', 'switchTheme', 'Theme switch failed', {\n          sceneKey: this.scene.key,\n          newThemeId,\n          errors: result.errors,\n        });\n      }\n    } catch (error) {\n      this.logger.error('BaseScene', 'switchTheme', 'Theme switch error', {\n        error,\n        sceneKey: this.scene.key,\n        newThemeId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get active theme for this scene\n   */\n  protected getActiveTheme(): any {\n    return this.themeActivator.getActiveThemeForScene(this.scene.key);\n  }\n\n  /**\n   * Get available themes for this scene\n   */\n  protected getAvailableThemes(): any[] {\n    return this.themeActivator.getAvailableThemesForScene(this.scene.key);\n  }\n\n  /**\n   * Check if a theme is active for this scene\n   */\n  protected isThemeActive(themeId: string): boolean {\n    return this.themeActivator.isThemeActiveForScene(this.scene.key, themeId);\n  }\n\n  /**\n   * Get applied theme classes for this scene\n   */\n  protected getAppliedThemeClasses(): string[] {\n    return this.themeActivator.getAppliedClasses(this.scene.key);\n  }\n}\n","/**\n * Levis 2025 R3 Wheel Scene 1 Asset Configuration\n *\n * Pure configuration file for the new Asset System.\n * Contains only data definitions without implementation code.\n */\n\nimport { AssetType, AssetPriority } from '../../../../asset/interfaces/IAsset';\nimport { BundleType } from '../../../../asset/interfaces/IAssetBundle';\nimport { LoadingStrategy } from '../../../../asset/enums/AssetEnums';\nimport type { ISceneAssetConfigData } from '../../../../asset/interfaces';\n\n/**\n * Scene 1 Asset Configuration for Levis 2025 R3 Wheel Game\n */\nexport const levis2025R3WheelScene1AssetConfig: ISceneAssetConfigData = {\n  sceneId: 'levis-2025-r3-wheel-scene-1',\n  basePath: '/public/assets/levis2025r3wheel',\n\n  // Assets Configuration\n  assets: [\n    // Background Images\n    {\n      key: 'levis2025r3wheel-desktop-bg',\n      path: '/background/desktop_16x9.png',\n      type: AssetType.IMAGE,\n      priority: AssetPriority.CRITICAL,\n      preload: true,\n      cache: true,\n      metadata: {\n        responsive: 'desktop',\n        aspectRatio: '16:9',\n        category: 'background',\n        description: 'Desktop background image for Levis 2025 R3 Wheel',\n      },\n    },\n    {\n      key: 'levis2025r3wheel-mobile-bg',\n      path: '/background/mobile_16x9.png',\n      type: AssetType.IMAGE,\n      priority: AssetPriority.CRITICAL,\n      preload: true,\n      cache: true,\n      metadata: {\n        responsive: 'mobile',\n        aspectRatio: '16:9',\n        category: 'background',\n        description: 'Mobile background image for Levis 2025 R3 Wheel',\n      },\n    },\n    {\n      key: 'levis2025r3wheel-mobile-origin-bg',\n      path: '/background/mobile_origin.png',\n      type: AssetType.IMAGE,\n      priority: AssetPriority.LOW,\n      preload: false, // Load on demand for mobile\n      cache: true,\n      metadata: {\n        responsive: 'mobile',\n        aspectRatio: 'original',\n        category: 'background',\n        loadOnDemand: true,\n        description: 'Original mobile background image (load on demand)',\n      },\n    },\n\n    // Wheel Textures\n    {\n      key: 'fortune-wheel-base',\n      path: '/wheel/fortune_wheel_base.png',\n      type: AssetType.IMAGE,\n      priority: AssetPriority.CRITICAL,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'wheel',\n        description: 'Base wheel texture with segments',\n        dimensions: { width: 800, height: 800 },\n        centerPoint: { x: 400, y: 400 },\n      },\n    },\n    {\n      key: 'fortune-wheel-pointer',\n      path: '/wheel/wheel_pointer.png',\n      type: AssetType.IMAGE,\n      priority: AssetPriority.CRITICAL,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'wheel',\n        description: 'Wheel pointer/arrow indicator',\n        dimensions: { width: 100, height: 150 },\n        anchorPoint: { x: 0.5, y: 0.9 },\n      },\n    },\n    {\n      key: 'fortune-wheel-center',\n      path: '/wheel/wheel_center.png',\n      type: AssetType.IMAGE,\n      priority: AssetPriority.HIGH,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'wheel',\n        description: 'Center hub of the fortune wheel',\n        dimensions: { width: 120, height: 120 },\n        centerPoint: { x: 60, y: 60 },\n      },\n    },\n    {\n      key: 'fortune-wheel-glow',\n      path: '/wheel/wheel_glow_effect.png',\n      type: AssetType.IMAGE,\n      priority: AssetPriority.NORMAL,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'wheel',\n        description: 'Glow effect for wheel when spinning',\n        dimensions: { width: 900, height: 900 },\n        blendMode: 'add',\n      },\n    },\n\n    // UI Elements\n    {\n      key: 'spin-button',\n      path: '/ui/spin_button.png',\n      type: AssetType.IMAGE,\n      priority: AssetPriority.HIGH,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'ui',\n        description: 'Main spin button',\n        states: ['normal', 'hover', 'pressed', 'disabled'],\n      },\n    },\n    {\n      key: 'prize-popup-bg',\n      path: '/ui/prize_popup_background.png',\n      type: AssetType.IMAGE,\n      priority: AssetPriority.HIGH,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'ui',\n        description: 'Background for prize popup modal',\n        dimensions: { width: 400, height: 300 },\n      },\n    },\n    {\n      key: 'close-button',\n      path: '/ui/close_button.png',\n      type: AssetType.IMAGE,\n      priority: AssetPriority.NORMAL,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'ui',\n        description: 'Close button for popups',\n        states: ['normal', 'hover'],\n      },\n    },\n\n    // Sound Effects\n    {\n      key: 'wheel-spin-sfx',\n      path: '/audio/wheel_spin.mp3',\n      type: AssetType.AUDIO,\n      priority: AssetPriority.HIGH,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'audio',\n        description: 'Wheel spinning sound effect',\n        duration: 3.5,\n        loop: true,\n        volume: 0.7,\n        audioType: 'sfx',\n      },\n    },\n    {\n      key: 'wheel-tick-sfx',\n      path: '/audio/wheel_tick.mp3',\n      type: AssetType.AUDIO,\n      priority: AssetPriority.HIGH,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'audio',\n        description: 'Tick sound when pointer hits wheel segments',\n        duration: 0.1,\n        loop: false,\n        volume: 0.5,\n        audioType: 'sfx',\n        triggerEvent: 'segment-hit',\n      },\n    },\n    {\n      key: 'wheel-stop-sfx',\n      path: '/audio/wheel_stop.mp3',\n      type: AssetType.AUDIO,\n      priority: AssetPriority.HIGH,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'audio',\n        description: 'Sound when wheel stops spinning',\n        duration: 0.8,\n        loop: false,\n        volume: 0.6,\n        audioType: 'sfx',\n        triggerEvent: 'wheel-stop',\n      },\n    },\n    {\n      key: 'prize-popup-sfx',\n      path: '/audio/prize_popup.mp3',\n      type: AssetType.AUDIO,\n      priority: AssetPriority.HIGH,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'audio',\n        description: 'Sound when prize popup appears',\n        duration: 1.2,\n        loop: false,\n        volume: 0.8,\n        audioType: 'sfx',\n        triggerEvent: 'prize-popup',\n      },\n    },\n    {\n      key: 'big-win-sfx',\n      path: '/audio/big_win.mp3',\n      type: AssetType.AUDIO,\n      priority: AssetPriority.HIGH,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'audio',\n        description: 'Sound for big prize wins',\n        duration: 2.5,\n        loop: false,\n        volume: 0.9,\n        audioType: 'sfx',\n        triggerEvent: 'big-win',\n        prizeThreshold: 1000,\n      },\n    },\n    {\n      key: 'small-win-sfx',\n      path: '/audio/small_win.mp3',\n      type: AssetType.AUDIO,\n      priority: AssetPriority.HIGH,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'audio',\n        description: 'Sound for small prize wins',\n        duration: 1.0,\n        loop: false,\n        volume: 0.7,\n        audioType: 'sfx',\n        triggerEvent: 'small-win',\n        prizeThreshold: 100,\n      },\n    },\n    {\n      key: 'button-click-sfx',\n      path: '/audio/button_click.mp3',\n      type: AssetType.AUDIO,\n      priority: AssetPriority.NORMAL,\n      preload: true,\n      cache: true,\n      metadata: {\n        category: 'audio',\n        description: 'Button click sound effect',\n        duration: 0.3,\n        loop: false,\n        volume: 0.6,\n        audioType: 'sfx',\n        triggerEvent: 'button-click',\n      },\n    },\n    {\n      key: 'button-hover-sfx',\n      path: '/audio/button_hover.mp3',\n      type: AssetType.AUDIO,\n      priority: AssetPriority.LOW,\n      preload: false,\n      cache: true,\n      metadata: {\n        category: 'audio',\n        description: 'Button hover sound effect',\n        duration: 0.2,\n        loop: false,\n        volume: 0.4,\n        audioType: 'sfx',\n        triggerEvent: 'button-hover',\n        loadOnDemand: true,\n      },\n    },\n\n    // Background Music\n    {\n      key: 'background-music',\n      path: '/audio/background_music.mp3',\n      type: AssetType.AUDIO,\n      priority: AssetPriority.LOW,\n      preload: false,\n      cache: true,\n      metadata: {\n        category: 'audio',\n        description: 'Background music for the game',\n        duration: 120,\n        loop: true,\n        volume: 0.3,\n        audioType: 'music',\n        loadOnDemand: true,\n      },\n    },\n  ],\n\n  // Bundles Configuration\n  bundles: [\n    {\n      bundleId: 'background-bundle',\n      bundleName: 'Background Assets Bundle',\n      bundleType: BundleType.SCENE,\n      priority: AssetPriority.CRITICAL,\n      preload: true,\n      cache: true,\n      assetKeys: [\n        'levis2025r3wheel-desktop-bg',\n        'levis2025r3wheel-mobile-bg',\n        'levis2025r3wheel-mobile-origin-bg',\n      ],\n      metadata: {\n        category: 'background',\n        responsive: true,\n        description: 'Bundle containing all background assets for responsive loading',\n      },\n    },\n    {\n      bundleId: 'wheel-bundle',\n      bundleName: 'Wheel Assets Bundle',\n      bundleType: BundleType.SCENE,\n      priority: AssetPriority.CRITICAL,\n      preload: true,\n      cache: true,\n      assetKeys: [\n        'fortune-wheel-base',\n        'fortune-wheel-pointer',\n        'fortune-wheel-center',\n        'fortune-wheel-glow',\n      ],\n      metadata: {\n        category: 'wheel',\n        description: 'Bundle containing all wheel-related visual assets',\n      },\n    },\n    {\n      bundleId: 'ui-bundle',\n      bundleName: 'UI Assets Bundle',\n      bundleType: BundleType.SCENE,\n      priority: AssetPriority.HIGH,\n      preload: true,\n      cache: true,\n      assetKeys: ['spin-button', 'prize-popup-bg', 'close-button'],\n      metadata: {\n        category: 'ui',\n        description: 'Bundle containing all UI elements',\n      },\n    },\n    {\n      bundleId: 'audio-sfx-bundle',\n      bundleName: 'Sound Effects Bundle',\n      bundleType: BundleType.SCENE,\n      priority: AssetPriority.HIGH,\n      preload: true,\n      cache: true,\n      assetKeys: [\n        'wheel-spin-sfx',\n        'wheel-tick-sfx',\n        'wheel-stop-sfx',\n        'prize-popup-sfx',\n        'big-win-sfx',\n        'small-win-sfx',\n        'button-click-sfx',\n        'button-hover-sfx',\n      ],\n      metadata: {\n        category: 'audio',\n        audioType: 'sfx',\n        description: 'Bundle containing all sound effects',\n      },\n    },\n    {\n      bundleId: 'audio-music-bundle',\n      bundleName: 'Background Music Bundle',\n      bundleType: BundleType.SCENE,\n      priority: AssetPriority.LOW,\n      preload: false,\n      cache: true,\n      assetKeys: ['background-music'],\n      metadata: {\n        category: 'audio',\n        audioType: 'music',\n        description: 'Bundle containing background music (load on demand)',\n        loadOnDemand: true,\n      },\n    },\n  ],\n\n  // Loading Configuration\n  loading: {\n    preload: true,\n    priority: [\n      AssetPriority.CRITICAL,\n      AssetPriority.HIGH,\n      AssetPriority.NORMAL,\n      AssetPriority.LOW,\n      AssetPriority.BACKGROUND,\n    ],\n    strategy: LoadingStrategy.PRIORITY_BASED,\n  },\n\n  // Validation Configuration\n  validation: {\n    required: [\n      'levis2025r3wheel-desktop-bg',\n      'levis2025r3wheel-mobile-bg',\n      'fortune-wheel-base',\n      'fortune-wheel-pointer',\n      'fortune-wheel-center',\n      'spin-button',\n      'wheel-spin-sfx',\n      'wheel-tick-sfx',\n      'wheel-stop-sfx',\n    ],\n    optional: [\n      'levis2025r3wheel-mobile-origin-bg',\n      'fortune-wheel-glow',\n      'prize-popup-bg',\n      'close-button',\n      'prize-popup-sfx',\n      'big-win-sfx',\n      'small-win-sfx',\n      'button-click-sfx',\n      'button-hover-sfx',\n      'background-music',\n    ],\n    fallbacks: {\n      'levis2025r3wheel-desktop-bg': 'levis2025r3wheel-mobile-bg',\n      'levis2025r3wheel-mobile-bg': 'levis2025r3wheel-desktop-bg',\n      'fortune-wheel-glow': 'fortune-wheel-base',\n      'prize-popup-bg': 'spin-button',\n      'big-win-sfx': 'small-win-sfx',\n      'small-win-sfx': 'prize-popup-sfx',\n      'button-hover-sfx': 'button-click-sfx',\n    },\n  },\n\n  // Responsive Configuration\n  responsive: {\n    breakpoints: {\n      desktop: {\n        assets: [\n          'levis2025r3wheel-desktop-bg',\n          'fortune-wheel-base',\n          'fortune-wheel-pointer',\n          'fortune-wheel-center',\n          'fortune-wheel-glow',\n          'spin-button',\n          'prize-popup-bg',\n          'close-button',\n        ],\n        bundles: ['background-bundle', 'wheel-bundle', 'ui-bundle', 'audio-sfx-bundle'],\n      },\n      mobile: {\n        assets: [\n          'levis2025r3wheel-mobile-bg',\n          'levis2025r3wheel-mobile-origin-bg',\n          'fortune-wheel-base',\n          'fortune-wheel-pointer',\n          'fortune-wheel-center',\n          'fortune-wheel-glow',\n          'spin-button',\n          'prize-popup-bg',\n          'close-button',\n        ],\n        bundles: ['background-bundle', 'wheel-bundle', 'ui-bundle', 'audio-sfx-bundle'],\n      },\n      tablet: {\n        assets: [\n          'levis2025r3wheel-desktop-bg',\n          'fortune-wheel-base',\n          'fortune-wheel-pointer',\n          'fortune-wheel-center',\n          'fortune-wheel-glow',\n          'spin-button',\n          'prize-popup-bg',\n          'close-button',\n        ],\n        bundles: ['background-bundle', 'wheel-bundle', 'ui-bundle', 'audio-sfx-bundle'],\n      },\n    },\n    defaultBreakpoint: 'desktop',\n  },\n\n  // Scene Metadata\n  metadata: {\n    gameTitle: 'Levis 2025 R3 Wheel',\n    sceneName: 'Scene 1',\n    version: '1.0.0',\n    createdDate: new Date().toISOString(),\n    lastModified: new Date().toISOString(),\n    description:\n      'Complete fortune wheel game scene with wheel textures, sound effects, and UI elements',\n    tags: [\n      'levis',\n      'r3-wheel',\n      'scene-1',\n      'responsive',\n      'background',\n      'wheel',\n      'audio',\n      'ui',\n      'fortune-wheel',\n      'sound-effects',\n    ],\n    estimatedLoadTime: 5000, // 5 seconds (increased due to more assets)\n    responsiveSupport: true,\n    preloadStrategy: 'critical-first',\n    author: 'Game Development Team',\n    license: 'Proprietary',\n    assetCount: {\n      total: 20,\n      images: 11,\n      audio: 9,\n      bundles: 5,\n    },\n    features: [\n      'Responsive background loading',\n      'Wheel texture management',\n      'Sound effect system',\n      'UI element management',\n      'Priority-based loading',\n      'Fallback system',\n      'Bundle optimization',\n    ],\n  },\n};\n\n/**\n * Export the configuration\n */\nexport default levis2025R3WheelScene1AssetConfig;\n","// Flexible responsive configuration for levis2025r3wheel scene\n// Clean structure: breakpoints contain arrays of object-specific layouts\n\nimport type { ResponsiveConfig } from '../../../core/ResponsiveConfigLoader';\n\nexport const levis2025r3wheelResponsiveConfig: ResponsiveConfig = {\n  // Default breakpoint that loads first (highest priority)\n  default: [\n    {\n      id: 'root-container',\n      breakpointCondition: { minWidth: 0, maxWidth: undefined },\n      layoutProperties: {\n        maintainAspectRatio: false,\n        scaleStrategy: 'stretch',\n        alignment: 'center',\n        positionX: 0,\n        positionY: 0,\n        width: 'fill',\n        height: 'fill',\n        zOrder: 0,\n        backgroundColor: '#1a1a2e',\n        interactive: false,\n        classes: ['container-autumn', 'root-container'],\n      },\n    },\n    {\n      id: 'background-container',\n      breakpointCondition: { minWidth: 0, maxWidth: undefined },\n      layoutProperties: {\n        maintainAspectRatio: false,\n        scaleStrategy: 'stretch',\n        alignment: 'center',\n        positionX: 0,\n        positionY: 0,\n        width: 'auto',\n        height: 'auto',\n        zOrder: -100,\n        backgroundColor: '#ffffff',\n        backgroundImage: 'levis2025r3wheel-desktop-bg',\n        classes: ['background-autumn'],\n      },\n    },\n    {\n      id: 'footer-container',\n      breakpointCondition: { minWidth: 0, maxWidth: undefined },\n      layoutProperties: {\n        maintainAspectRatio: false,\n        scaleStrategy: 'stretch',\n        alignment: 'bottom-left',\n        positionX: 0,\n        positionY: 'bottom',\n        width: 'auto',\n        height: 80,\n        zOrder: 30,\n        backgroundColor: '#ffffff',\n        interactive: false,\n        classes: ['footer-autumn'],\n      },\n    },\n    {\n      id: 'footer-rectangle',\n      breakpointCondition: { minWidth: 0, maxWidth: undefined },\n      layoutProperties: {\n        maintainAspectRatio: false,\n        scaleStrategy: 'stretch',\n        alignment: 'bottom-left',\n        positionX: 0,\n        positionY: 0,\n        width: 'auto',\n        height: 'auto',\n        zOrder: 40,\n        backgroundColor: '#ffffff',\n        interactive: false,\n        classes: ['footer-autumn'],\n      },\n    },\n  ],\n  responsiveSettings: {\n    xs: [\n      {\n        id: 'root-container',\n        breakpointCondition: { minWidth: 0, maxWidth: 575 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'center',\n          positionX: 0,\n          positionY: 0,\n          width: 'fill',\n          height: 'fill',\n          zOrder: 0,\n          backgroundColor: '#2a2a3e',\n          interactive: false,\n          classes: ['container-autumn', 'root-container', 'mobile-root'],\n        },\n      },\n      {\n        id: 'background-container',\n        breakpointCondition: { minWidth: 0, maxWidth: 575 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'center',\n          backgroundImage: 'levis2025r3wheel-mobile-bg',\n          classes: ['background-autumn', 'mobile-background'],\n        },\n      },\n      {\n        id: 'footer-container',\n        breakpointCondition: { minWidth: 0, maxWidth: 575 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'bottom-left',\n          height: 60,\n          padding: 10,\n          classes: ['footer-autumn', 'mobile-footer'],\n        },\n      },\n      {\n        id: 'footer-rectangle',\n        breakpointCondition: { minWidth: 0, maxWidth: 575 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'bottom-left',\n          height: 60,\n          padding: 10,\n          classes: ['footer-autumn', 'mobile-footer'],\n        },\n      },\n    ],\n\n    sm: [\n      {\n        id: 'root-container',\n        breakpointCondition: { minWidth: 576, maxWidth: 767 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'center',\n          positionX: 0,\n          positionY: 0,\n          width: 'fill',\n          height: 'fill',\n          zOrder: 0,\n          backgroundColor: '#3a3a4e',\n          interactive: false,\n          classes: ['container-autumn', 'root-container', 'small-root'],\n        },\n      },\n      {\n        id: 'background-container',\n        breakpointCondition: { minWidth: 576, maxWidth: 767 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'center',\n          backgroundImage: 'levis2025r3wheel-mobile-bg',\n          classes: ['background-autumn', 'mobile-background'],\n        },\n      },\n      {\n        id: 'footer-container',\n        breakpointCondition: { minWidth: 576, maxWidth: 767 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'bottom-left',\n          height: 65,\n          padding: 12,\n          classes: ['footer-autumn', 'mobile-footer'],\n        },\n      },\n      {\n        id: 'footer-rectangle',\n        breakpointCondition: { minWidth: 576, maxWidth: 767 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'bottom-left',\n          height: 65,\n          padding: 12,\n          classes: ['footer-autumn', 'mobile-footer'],\n        },\n      },\n    ],\n\n    md: [\n      {\n        id: 'root-container',\n        breakpointCondition: { minWidth: 768, maxWidth: 991 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'center',\n          positionX: 0,\n          positionY: 0,\n          width: 'fill',\n          height: 'fill',\n          zOrder: 0,\n          backgroundColor: '#4a4a5e',\n          interactive: false,\n          classes: ['container-autumn', 'root-container', 'tablet-root'],\n        },\n      },\n      {\n        id: 'background-container',\n        breakpointCondition: { minWidth: 768, maxWidth: 991 },\n        layoutProperties: {\n          maintainAspectRatio: true,\n          scaleStrategy: 'fit',\n          alignment: 'center',\n          backgroundImage: 'levis2025r3wheel-mobile-bg',\n          classes: ['background-autumn', 'tablet-background'],\n        },\n      },\n      {\n        id: 'footer-container',\n        breakpointCondition: { minWidth: 768, maxWidth: 991 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'bottom-left',\n          height: 70,\n          padding: 15,\n          classes: ['footer-autumn', 'tablet-footer'],\n        },\n      },\n      {\n        id: 'footer-rectangle',\n        breakpointCondition: { minWidth: 768, maxWidth: 991 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'bottom-left',\n          height: 70,\n          padding: 15,\n          classes: ['footer-autumn', 'tablet-footer'],\n        },\n      },\n    ],\n\n    lg: [\n      {\n        id: 'root-container',\n        breakpointCondition: { minWidth: 992, maxWidth: 1199 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'center',\n          positionX: 0,\n          positionY: 0,\n          width: 'fill',\n          height: 'fill',\n          zOrder: 0,\n          backgroundColor: '#5a5a6e',\n          interactive: false,\n          classes: ['container-autumn', 'root-container', 'large-root'],\n        },\n      },\n      {\n        id: 'background-container',\n        breakpointCondition: { minWidth: 992, maxWidth: 1199 },\n        layoutProperties: {\n          maintainAspectRatio: true,\n          scaleStrategy: 'fit',\n          alignment: 'center',\n          backgroundImage: 'levis2025r3wheel-desktop-bg',\n        },\n      },\n      {\n        id: 'footer-container',\n        breakpointCondition: { minWidth: 992, maxWidth: 1199 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'bottom-left',\n          height: 80,\n          padding: 20,\n        },\n      },\n      {\n        id: 'footer-rectangle',\n        breakpointCondition: { minWidth: 992, maxWidth: 1199 },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'bottom-left',\n          height: 80,\n          padding: 20,\n        },\n      },\n    ],\n\n    xl: [\n      {\n        id: 'root-container',\n        breakpointCondition: { minWidth: 1200, maxWidth: undefined },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'center',\n          positionX: 0,\n          positionY: 0,\n          width: 'fill',\n          height: 'fill',\n          zOrder: 0,\n          backgroundColor: '#6a6a7e',\n          interactive: false,\n          classes: ['container-autumn', 'root-container', 'xl-root'],\n        },\n      },\n      {\n        id: 'background-container',\n        breakpointCondition: { minWidth: 1200, maxWidth: undefined },\n        layoutProperties: {\n          maintainAspectRatio: true,\n          scaleStrategy: 'fit',\n          alignment: 'center',\n          backgroundImage: 'levis2025r3wheel-desktop-bg',\n        },\n      },\n      {\n        id: 'footer-container',\n        breakpointCondition: { minWidth: 1200, maxWidth: undefined },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'bottom-left',\n          height: 80,\n          padding: 20,\n        },\n      },\n      {\n        id: 'footer-rectangle',\n        breakpointCondition: { minWidth: 1200, maxWidth: undefined },\n        layoutProperties: {\n          maintainAspectRatio: false,\n          scaleStrategy: 'stretch',\n          alignment: 'bottom-left',\n          height: 80,\n          padding: 20,\n        },\n      },\n    ],\n  },\n};\n","// Simplified scene loader configuration for levis2025r3wheel scene\n// This focuses on the essential scene structure without complex interface requirements\n\nimport { levis2025r3wheelResponsiveConfig } from './levis2025r3wheel.responsive.config';\nimport type { SceneConfig } from '../../../core/SceneLoaderConfigLoader';\nimport { GameObjectType } from '../../../core/SceneLoaderConfigLoader';\n\nexport const levis2025r3wheelSceneLoaderConfig: SceneConfig = {\n  sceneId: 'levis2025r3wheel',\n  sceneName: 'Levis 2025 R3 Wheel Scene',\n  version: '1.0.0',\n  backgroundColor: '#000000',\n  responsive: levis2025r3wheelResponsiveConfig,\n\n  // Root game objects (like HTML body) - COMMENTED OUT FOR DEBUGGING\n  // gameObjects: [\n  //   {\n  //     id: 'background-container',\n  //     type: 'background-container',\n  //     name: 'Background Container',\n  //     x: 0,\n  //     y: 0,\n  //     width: 'fill',\n  //     height: 'fill',\n  //     zOrder: -100, // Lowest z-order for background\n  //     responsive: {} as Levis2025R3WheelResponsiveConfig,\n  //     factory: {\n  //       className: 'BackgroundContainer',\n  //       createMethod: 'createFromConfig'\n  //     },\n  //       properties: {\n  //       backgroundColor: '#1a1a2e',\n  //       textureKey: 'levis2025r3wheel-desktop-bg', // Fallback texture key\n  //       desktopTextureKey: 'levis2025r3wheel-desktop-bg', // Desktop background\n  //       mobileTextureKey: 'levis2025r3wheel-mobile-bg', // Mobile background\n  //       maintainAspectRatio: true,\n  //       scalingMode: 'fit',\n  //       alignment: { x: 'center', y: 'center' }\n  //     },\n  //     children: [\n  //       {\n  //         id: 'header-container',\n  //         type: 'container',\n  //         name: 'Header Container',\n  //         x: 0,\n  //         y: 0,\n  //         width: 'fill',\n  //         height: 100,\n  //         zOrder: 10, // Higher z-order for UI elements\n  //         responsive: {} as Levis2025R3WheelResponsiveConfig,\n  //         factory: {\n  //           className: 'Container',\n  //           createMethod: 'createFromConfig'\n  //         },\n  //         properties: {\n  //           backgroundColor: '#2a2a3e',\n  //           interactive: false\n  //         },\n  //         children: [],\n  //         parentId: 'background-container'\n  //       },\n  //       {\n  //         id: 'body-container',\n  //         type: 'container',\n  //         name: 'Body Container',\n  //         x: 0,\n  //         y: 100,\n  //         width: 'fill',\n  //         height: 'fill',\n  //         zOrder: 20, // Higher z-order for UI elements\n  //         responsive: {} as Levis2025R3WheelResponsiveConfig,\n  //         factory: {\n  //           className: 'Container',\n  //           createMethod: 'createFromConfig'\n  //         },\n  //         properties: {\n  //           backgroundColor: '#3a3a4e',\n  //           interactive: false\n  //         },\n  //         children: [],\n  //         parentId: 'background-container'\n  //       },\n  //       {\n  //         id: 'footer-container',\n  //         type: 'container',\n  //         name: 'Footer Container',\n  //         x: 0,\n  //         y: 'fill',\n  //         width: 'fill',\n  //         height: 80,\n  //         zOrder: 30, // Highest z-order for footer (top layer)\n  //         responsive: {} as Levis2025R3WheelResponsiveConfig,\n  //         factory: {\n  //           className: 'Container',\n  //           createMethod: 'createFromConfig'\n  //         },\n  //         properties: {\n  //           backgroundColor: '#2a2a3e',\n  //           interactive: false\n  //         },\n  //         children: [\n  //           {\n  //             id: 'footer-rectangle',\n  //             type: 'shape',\n  //             name: 'Footer Rectangle',\n  //             x: 0,\n  //             y: 0,\n  //             width: 'fill',\n  //             height: 'fill',\n  //             zOrder: 40, // Highest z-order for footer rectangle (topmost layer)\n  //             responsive: {} as Levis2025R3WheelResponsiveConfig,\n  //             factory: {\n  //               className: 'Rectangle',\n  //               createMethod: 'createFromConfig'\n  //             },\n  //             properties: {\n  //               fillColor: 0x54a8a8,\n  //               interactive: false\n  //             },\n  //             children: [],\n  //             parentId: 'footer-container'\n  //           }\n  //         ],\n  //         parentId: 'background-container'\n  //       }\n  //     ],\n  //     parentId: undefined\n  //   }\n  // ],\n\n  // DEBUGGING: Simple test with Container as root + BackgroundContainer as child\n  gameObjects: [\n    {\n      id: 'root-container',\n      type: GameObjectType.CONTAINER,\n      name: 'Root Container',\n      factory: {\n        className: 'Container',\n        createMethod: 'createFromConfig',\n      },\n      properties: {\n        interactive: false,\n      },\n      children: [\n        // {\n        //   id: 'background-container',\n        //   type: GameObjectType.BACKGROUND_CONTAINER,\n        //   name: 'Background Container',\n        //   factory: {\n        //     className: 'BackgroundContainer',\n        //     createMethod: 'createFromConfig'\n        //   },\n        //   properties: {\n        //     interactive: false\n        //   },\n        //   children: [\n        //     {\n        //       id: 'footer-container',\n        //       type: GameObjectType.CONTAINER,\n        //       name: 'Footer Container',\n        //       factory: {\n        //         className: 'Container',\n        //         createMethod: 'createFromConfig'\n        //       },\n        //       properties: {\n        //         interactive: false\n        //       },\n        //       children: [\n        //         {\n        //           id: 'footer-rectangle',\n        //           type: GameObjectType.SHAPE,\n        //           name: 'Footer Rectangle',\n        //           factory: {\n        //             className: 'Rectangle',\n        //             createMethod: 'createFromConfig'\n        //           },\n        //           properties: {\n        //             interactive: false\n        //           },\n        //           children: [],\n        //           parentId: 'footer-container'\n        //         }\n        //       ],\n        //       parentId: 'background-container'\n        //     }\n        //   ],\n        //   parentId: 'test-root-container'\n        // }\n      ],\n      parentId: undefined,\n    },\n  ],\n\n  // Asset loading configuration\n  assetLoading: {\n    preload: true,\n    priority: ['background', 'ui', 'audio', 'effects'],\n  },\n};\n","// Define LogLevel enum locally since the import path doesn't exist\nexport enum LogLevel {\n  ERROR = 'error',\n  WARN = 'warn',\n  INFO = 'info',\n  DEBUG = 'debug',\n}\n\n// Define LoggerConfig interface locally since the import path doesn't exist\nexport interface LoggerConfig {\n  id: string;\n  name: string;\n  version: string;\n  isActive: boolean;\n  lastModified: Date;\n  metadata: Record<string, any>;\n  globalLevel: LogLevel;\n  objects: Array<{\n    name: string;\n    level: LogLevel;\n    enabled: boolean;\n    includePerformance: boolean;\n    includeStackTrace: boolean;\n  }>;\n  server: {\n    enabled: boolean;\n    endpoint: string;\n    apiKey?: string;\n    batchSize: number;\n    retryAttempts: number;\n    retryDelay: number;\n    timeout: number;\n    sendErrorsImmediately: boolean;\n    sendGameEventsImmediately: boolean;\n    includePerformanceData: boolean;\n    includeUserAgent: boolean;\n    includeSessionData: boolean;\n  };\n  console: {\n    enabled: boolean;\n    colors: boolean;\n    showData: boolean;\n    showStackTrace: boolean;\n    maxDataDepth: number;\n  };\n  formatOptions: {\n    showTimestamp: boolean;\n    showLogLevel: boolean;\n    showObjectName: boolean;\n    useJsonStringify: boolean;\n    maxMessageLength: number;\n  };\n  performance: {\n    enabled: boolean;\n    fpsThreshold: number;\n    memoryThreshold: number;\n    networkMonitoring: boolean;\n    customMetrics: string[];\n  };\n  buffering: {\n    enabled: boolean;\n    maxBufferSize: number;\n    flushInterval: number;\n    persistOnUnload: boolean;\n  };\n  errorTracking: {\n    enabled: boolean;\n    includeStackTrace: boolean;\n    trackUnhandledErrors: boolean;\n    trackPromiseRejections: boolean;\n    maxErrorHistory: number;\n  };\n  session: {\n    enabled: boolean;\n    generateSessionId: boolean;\n    includeUserInfo: boolean;\n    trackPageViews: boolean;\n  };\n  validate(): string[];\n  clone(overrides?: Partial<LoggerConfig>): LoggerConfig;\n  toJSON(): string;\n  fromJSON(json: string): LoggerConfig;\n  isValid(): boolean;\n  getSummary(): {\n    id: string;\n    name: string;\n    version: string;\n    isActive: boolean;\n    lastModified: Date;\n    isValid: boolean;\n    validationErrors: string[];\n    metadataKeys: string[];\n  };\n}\n\n/**\n * Logging configuration for Levis2025R3 scene\n * Default: DEBUG level, both console and server logging enabled\n */\n// Create a LoggerConfig implementation\nconst createLevis2025R3LoggingConfig = (): LoggerConfig => {\n  const config: LoggerConfig = {\n    id: 'levis2025R3-logging-config',\n    name: 'Levis2025R3 Logging Configuration',\n    version: '1.0.0',\n    isActive: true,\n    lastModified: new Date(),\n    metadata: {\n      scene: 'levis2025R3',\n      environment: 'development',\n    },\n    globalLevel: LogLevel.DEBUG,\n\n    objects: [\n      // Core Logger System\n      {\n        name: 'Logger',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: true,\n        includeStackTrace: true,\n      },\n      {\n        name: 'LoggingConfigLoader',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: true,\n        includeStackTrace: true,\n      },\n      {\n        name: 'LogServerClient',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: true,\n        includeStackTrace: true,\n      },\n      {\n        name: 'HttpClient',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: true,\n        includeStackTrace: false,\n      },\n      {\n        name: 'ErrorTracker',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: true,\n        includeStackTrace: true,\n      },\n\n      // Game Engine\n      {\n        name: 'Game',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: true,\n        includeStackTrace: true,\n      },\n      {\n        name: 'Levis2025R3WheelScene',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: true,\n        includeStackTrace: true,\n      },\n\n      // Abstract Interfaces\n      {\n        name: 'IConfiguration',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: false,\n        includeStackTrace: false,\n      },\n      {\n        name: 'IGameObject',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: false,\n        includeStackTrace: false,\n      },\n      {\n        name: 'IHttpClient',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: false,\n        includeStackTrace: false,\n      },\n      {\n        name: 'IWebhookClient',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: false,\n        includeStackTrace: false,\n      },\n\n      // Configuration\n      {\n        name: 'LoggerConfig',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: false,\n        includeStackTrace: false,\n      },\n      {\n        name: 'BackendConfig',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: false,\n        includeStackTrace: false,\n      },\n\n      // Main Entry Points\n      {\n        name: 'Main',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: false,\n        includeStackTrace: true,\n      },\n      {\n        name: 'App',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: false,\n        includeStackTrace: true,\n      },\n\n      // Performance Monitoring\n      {\n        name: 'Performance',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: true,\n        includeStackTrace: false,\n      },\n      {\n        name: 'GameEvent',\n        level: LogLevel.DEBUG,\n        enabled: true,\n        includePerformance: false,\n        includeStackTrace: false,\n      },\n\n      // Error Handling\n      {\n        name: 'GlobalError',\n        level: LogLevel.ERROR,\n        enabled: true,\n        includePerformance: false,\n        includeStackTrace: true,\n      },\n      {\n        name: 'UnhandledRejection',\n        level: LogLevel.ERROR,\n        enabled: true,\n        includePerformance: false,\n        includeStackTrace: true,\n      },\n    ],\n\n    server: {\n      enabled: true, // Enable server logging\n      endpoint: '', // Will be set by backend config\n      apiKey: undefined,\n      batchSize: 10,\n      retryAttempts: 1, // Only 1 retry as per requirements\n      retryDelay: 3000, // 3000ms delay as per requirements\n      timeout: 10000,\n      sendErrorsImmediately: true,\n      sendGameEventsImmediately: true,\n      includePerformanceData: true,\n      includeUserAgent: true,\n      includeSessionData: true,\n    },\n\n    console: {\n      enabled: true, // Enable console logging\n      colors: true, // Enable colored console output\n      showData: true,\n      showStackTrace: true,\n      maxDataDepth: 3,\n    },\n\n    formatOptions: {\n      showTimestamp: true, // Show timestamp\n      showLogLevel: true, // Show log level\n      showObjectName: true, // Show object name\n      useJsonStringify: true, // Use JSON.stringify for objects\n      maxMessageLength: 200,\n    },\n\n    performance: {\n      enabled: true, // Enable performance monitoring\n      fpsThreshold: 30,\n      memoryThreshold: 80,\n      networkMonitoring: true,\n      customMetrics: ['renderTime', 'updateTime'],\n    },\n\n    buffering: {\n      enabled: true, // Enable log buffering\n      maxBufferSize: 50,\n      flushInterval: 5000, // Flush every 5 seconds\n      persistOnUnload: true,\n    },\n\n    errorTracking: {\n      enabled: true, // Enable error tracking\n      includeStackTrace: true,\n      trackUnhandledErrors: true,\n      trackPromiseRejections: true,\n      maxErrorHistory: 100,\n    },\n\n    session: {\n      enabled: true, // Enable session tracking\n      generateSessionId: true,\n      includeUserInfo: true,\n      trackPageViews: true,\n    },\n\n    // Required IConfiguration methods\n    validate(): string[] {\n      const errors: string[] = [];\n      if (!this.id) errors.push('ID is required');\n      if (!this.name) errors.push('Name is required');\n      if (!this.version) errors.push('Version is required');\n      return errors;\n    },\n\n    clone(overrides?: Partial<LoggerConfig>): LoggerConfig {\n      return { ...this, ...overrides };\n    },\n\n    toJSON(): string {\n      return JSON.stringify(this);\n    },\n\n    fromJSON(json: string): LoggerConfig {\n      return JSON.parse(json);\n    },\n\n    isValid(): boolean {\n      return this.validate().length === 0;\n    },\n\n    getSummary() {\n      return {\n        id: this.id,\n        name: this.name,\n        version: this.version,\n        isActive: this.isActive,\n        lastModified: this.lastModified,\n        isValid: this.isValid(),\n        validationErrors: this.validate(),\n        metadataKeys: Object.keys(this.metadata),\n      };\n    },\n  };\n\n  return config;\n};\n\nexport const levis2025r3wheelLoggingConfig = createLevis2025R3LoggingConfig();\nexport default levis2025r3wheelLoggingConfig;\n","/**\n * Theme-specific enums\n * Replaces string literals with type-safe enums\n * Only includes enums that don't already exist in LayoutEnums.ts\n */\n\n// ============================================================================\n// CURSOR ENUMS (Extended from CursorStyle in LayoutEnums)\n// ============================================================================\n\nexport enum CursorType {\n  DEFAULT = 'default',\n  POINTER = 'pointer',\n  HAND = 'hand',\n  TEXT = 'text',\n  MOVE = 'move',\n  NOT_ALLOWED = 'not-allowed',\n  WAIT = 'wait',\n  CROSSHAIR = 'crosshair',\n  GRAB = 'grab',\n  GRABBING = 'grabbing',\n}\n\n// ============================================================================\n// FLEXBOX ENUMS (Not in LayoutEnums)\n// ============================================================================\n\nexport enum FlexDirection {\n  ROW = 'row',\n  ROW_REVERSE = 'row-reverse',\n  COLUMN = 'column',\n  COLUMN_REVERSE = 'column-reverse',\n}\n\nexport enum FlexWrap {\n  NOWRAP = 'nowrap',\n  WRAP = 'wrap',\n  WRAP_REVERSE = 'wrap-reverse',\n}\n\nexport enum JustifyContent {\n  FLEX_START = 'flex-start',\n  FLEX_END = 'flex-end',\n  CENTER = 'center',\n  SPACE_BETWEEN = 'space-between',\n  SPACE_AROUND = 'space-around',\n  SPACE_EVENLY = 'space-evenly',\n}\n\nexport enum AlignItems {\n  STRETCH = 'stretch',\n  FLEX_START = 'flex-start',\n  FLEX_END = 'flex-end',\n  CENTER = 'center',\n  BASELINE = 'baseline',\n}\n\nexport enum AlignSelf {\n  AUTO = 'auto',\n  FLEX_START = 'flex-start',\n  FLEX_END = 'flex-end',\n  CENTER = 'center',\n  BASELINE = 'baseline',\n  STRETCH = 'stretch',\n}\n\n// ============================================================================\n// VISIBILITY ENUMS (Not in LayoutEnums)\n// ============================================================================\n\nexport enum VisibilityType {\n  VISIBLE = 'visible',\n  HIDDEN = 'hidden',\n  COLLAPSE = 'collapse',\n}\n\n// ============================================================================\n// FONT ENUMS (Extended from FontStyle in LayoutEnums)\n// ============================================================================\n\nexport enum FontVariant {\n  NORMAL = 'normal',\n  SMALL_CAPS = 'small-caps',\n}\n\n// ============================================================================\n// TEXT HANDLING ENUMS (Extended from existing enums in LayoutEnums)\n// ============================================================================\n\nexport enum WordBreak {\n  NORMAL = 'normal',\n  BREAK_ALL = 'break-all',\n  KEEP_ALL = 'keep-all',\n  BREAK_WORD = 'break-word',\n}\n\nexport enum OverflowWrap {\n  NORMAL = 'normal',\n  BREAK_WORD = 'break-word',\n  ANYWHERE = 'anywhere',\n}\n\n// ============================================================================\n// BOX MODEL ENUMS (Not in LayoutEnums)\n// ============================================================================\n\nexport enum BoxSizing {\n  CONTENT_BOX = 'content-box',\n  BORDER_BOX = 'border-box',\n}\n\n// ============================================================================\n// PERFORMANCE METRICS ENUMS (Not in LayoutEnums)\n// ============================================================================\n\nexport enum MemoryUsageTrend {\n  INCREASING = 'increasing',\n  DECREASING = 'decreasing',\n  STABLE = 'stable',\n}\n","/**\n * Fortune Wheel Theme Configuration\n *\n * A vibrant, game-focused theme designed specifically for the fortune wheel game.\n * Features bright colors, engaging animations, and game-appropriate styling.\n *\n * This theme uses the new Layout System ITheme interface for full compatibility\n * with the Unit System and responsive design features.\n */\n\nimport { ITheme } from '../../../../layout/interfaces/ITheme';\nimport {\n  BaseThemeType,\n  ThemeVariant,\n  BreakpointName,\n  TextAlign,\n  DisplayType,\n  PositionType,\n  OverflowType,\n  WhiteSpace,\n  TextOverflow,\n} from '../../../../layout/enums/LayoutEnums';\nimport {\n  CursorType,\n  FlexDirection,\n  FlexWrap,\n  JustifyContent,\n  AlignItems,\n  VisibilityType,\n  WordBreak,\n  OverflowWrap,\n  BoxSizing,\n} from '../../../../layout/enums/ThemeEnums';\nimport { SizeUnit } from '../../../../unit';\n\n/**\n * Fortune Wheel Theme Configuration\n * Features vibrant colors, engaging animations, and game-appropriate styling\n */\nexport const fortuneWheelTheme: ITheme = {\n  // ============================================================================\n  // THEME METADATA\n  // ============================================================================\n  id: 'fortune-wheel-theme',\n  name: 'fortune-wheel',\n  displayName: 'Fortune Wheel Theme',\n  description:\n    'Vibrant theme designed for fortune wheel games with bright colors and engaging animations',\n  type: BaseThemeType.CUSTOM,\n  variant: ThemeVariant.PRIMARY,\n  isActive: true,\n  supportsDarkMode: false,\n  oppositeTheme: undefined,\n  version: '1.0.0',\n  author: 'Fortune Wheel Game Team',\n  tags: ['game', 'fortune-wheel', 'vibrant', 'engaging', 'casino-style'],\n\n  // ============================================================================\n  // THEME COLORS\n  // ============================================================================\n  colors: {\n    // Primary color palette - Golden/Orange theme\n    primary: {\n      main: '#ff6b35', // Vibrant orange\n      light: '#ff8c69', // Light orange\n      dark: '#e55a2b', // Dark orange\n      contrast: '#ffffff', // White text\n      variants: {\n        '50': '#fff7ed',\n        '100': '#ffedd5',\n        '200': '#fed7aa',\n        '300': '#fdba74',\n        '400': '#fb923c',\n        '500': '#ff6b35',\n        '600': '#ea580c',\n        '700': '#c2410c',\n        '800': '#9a3412',\n        '900': '#7c2d12',\n      },\n    },\n\n    // Secondary color palette - Deep blue/purple\n    secondary: {\n      main: '#3b82f6', // Bright blue\n      light: '#60a5fa', // Light blue\n      dark: '#2563eb', // Dark blue\n      contrast: '#ffffff', // White text\n      variants: {\n        '50': '#eff6ff',\n        '100': '#dbeafe',\n        '200': '#bfdbfe',\n        '300': '#93c5fd',\n        '400': '#60a5fa',\n        '500': '#3b82f6',\n        '600': '#2563eb',\n        '700': '#1d4ed8',\n        '800': '#1e40af',\n        '900': '#1e3a8a',\n      },\n    },\n\n    // Background colors\n    background: {\n      primary: '#fef3c7', // Warm cream\n      secondary: '#fde68a', // Light golden\n      tertiary: '#fbbf24', // Golden\n      overlay: 'rgba(0, 0, 0, 0.7)', // Dark overlay\n      variants: {\n        'game-bg': '#1a1a2e', // Dark game background\n        'wheel-bg': '#2a2a3e', // Wheel background\n        'modal-bg': 'rgba(255, 255, 255, 0.95)', // Modal background\n        'card-bg': '#ffffff', // Card background\n      },\n    },\n\n    // Text colors\n    text: {\n      primary: '#1f2937', // Dark gray\n      secondary: '#6b7280', // Medium gray\n      disabled: '#9ca3af', // Light gray\n      inverse: '#ffffff', // White\n      variants: {\n        accent: '#ff6b35', // Orange accent\n        success: '#10b981', // Green success\n        warning: '#f59e0b', // Yellow warning\n        error: '#ef4444', // Red error\n      },\n    },\n\n    // Status colors\n    status: {\n      success: '#10b981', // Green\n      warning: '#f59e0b', // Yellow\n      error: '#ef4444', // Red\n      info: '#3b82f6', // Blue\n      variants: {\n        'big-win': '#fbbf24', // Golden big win\n        'small-win': '#10b981', // Green small win\n        lose: '#ef4444', // Red lose\n        jackpot: '#ff6b35', // Orange jackpot\n      },\n    },\n\n    // UI element colors\n    ui: {\n      border: '#d1d5db', // Light gray border\n      shadow: 'rgba(0, 0, 0, 0.1)', // Subtle shadow\n      highlight: '#fbbf24', // Golden highlight\n      disabled: '#e5e7eb', // Light gray disabled\n      variants: {\n        'wheel-border': '#ff6b35', // Orange wheel border\n        'button-border': '#3b82f6', // Blue button border\n        'modal-border': '#d1d5db', // Modal border\n        'card-border': '#e5e7eb', // Card border\n      },\n    },\n\n    // Semantic colors for game elements\n    semantic: {\n      brand: {\n        'levis-primary': '#ff6b35',\n        'levis-secondary': '#3b82f6',\n        'levis-accent': '#fbbf24',\n      },\n      functional: {\n        'spin-button': '#ff6b35',\n        'stop-button': '#ef4444',\n        'reset-button': '#6b7280',\n        'settings-button': '#3b82f6',\n      },\n      state: {\n        spinning: '#fbbf24',\n        stopped: '#10b981',\n        disabled: '#9ca3af',\n        hover: '#ff8c69',\n        active: '#e55a2b',\n      },\n      custom: {\n        'wheel-segment-1': '#ff6b35',\n        'wheel-segment-2': '#3b82f6',\n        'wheel-segment-3': '#10b981',\n        'wheel-segment-4': '#f59e0b',\n        'wheel-segment-5': '#ef4444',\n        'wheel-segment-6': '#8b5cf6',\n        'wheel-segment-7': '#06b6d4',\n        'wheel-segment-8': '#84cc16',\n        'wheel-segment-9': '#f97316',\n        'wheel-segment-10': '#ec4899',\n        'wheel-segment-11': '#14b8a6',\n        'wheel-segment-12': '#f43f5e',\n      },\n    },\n\n    // Custom colors for specific game elements\n    custom: {\n      'pointer-color': '#ff6b35',\n      'pointer-shadow': 'rgba(255, 107, 53, 0.3)',\n      'wheel-glow': 'rgba(251, 191, 36, 0.5)',\n      'prize-glow': 'rgba(16, 185, 129, 0.3)',\n      'jackpot-glow': 'rgba(255, 107, 53, 0.6)',\n    },\n  },\n\n  // ============================================================================\n  // TYPOGRAPHY\n  // ============================================================================\n  typography: {\n    fontFamily: {\n      primary: 'Inter, system-ui, -apple-system, sans-serif',\n      secondary: 'Poppins, sans-serif',\n      monospace: 'JetBrains Mono, monospace',\n      display: 'Poppins, sans-serif',\n      variants: {\n        'game-title': 'Poppins, sans-serif',\n        'button-text': 'Inter, sans-serif',\n        'prize-text': 'Poppins, sans-serif',\n      },\n    },\n    fontSize: {\n      xs: 12,\n      sm: 14,\n      base: 16,\n      lg: 18,\n      xl: 20,\n      '2xl': 24,\n      '3xl': 30,\n      display: 48,\n      variants: {\n        'game-title': 36,\n        'prize-amount': 28,\n        'button-text': 16,\n        'small-text': 12,\n      },\n    },\n    fontWeight: {\n      light: 300,\n      normal: 400,\n      medium: 500,\n      semibold: 600,\n      bold: 700,\n      extrabold: 800,\n      variants: {\n        'game-title': 700,\n        'prize-amount': 600,\n        'button-text': 500,\n      },\n    },\n    lineHeight: {\n      tight: 1.25,\n      normal: 1.5,\n      relaxed: 1.75,\n      loose: 2,\n      variants: {\n        'game-title': 1.2,\n        'prize-text': 1.3,\n        'button-text': 1.4,\n      },\n    },\n    letterSpacing: {\n      tight: -0.025,\n      normal: 0,\n      wide: 0.025,\n      variants: {\n        'game-title': 0.05,\n        'prize-amount': 0.02,\n      },\n    },\n    textAlign: {\n      left: 'left',\n      center: 'center',\n      right: 'right',\n      justify: 'justify',\n    },\n    custom: {\n      'text-shadow': '0 2px 4px rgba(0, 0, 0, 0.1)',\n      'text-glow': '0 0 10px rgba(255, 107, 53, 0.5)',\n    },\n  },\n\n  // ============================================================================\n  // SPACING\n  // ============================================================================\n  spacing: {\n    base: 16,\n    scale: {\n      xs: 4,\n      sm: 8,\n      md: 16,\n      lg: 24,\n      xl: 32,\n      '2xl': 48,\n      '3xl': 64,\n      variants: {\n        'wheel-padding': 20,\n        'button-padding': 12,\n        'modal-padding': 24,\n        'card-padding': 16,\n      },\n    },\n    custom: {\n      'wheel-radius': 400,\n      'pointer-offset': 50,\n      'button-spacing': 16,\n    },\n  },\n\n  // ============================================================================\n  // BORDER RADIUS\n  // ============================================================================\n  borderRadius: {\n    none: 0,\n    sm: 4,\n    base: 8,\n    lg: 12,\n    xl: 16,\n    full: 9999,\n    variants: {\n      wheel: 9999,\n      button: 8,\n      modal: 12,\n      card: 8,\n      'prize-badge': 20,\n    },\n  },\n\n  // ============================================================================\n  // SHADOWS\n  // ============================================================================\n  shadows: {\n    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n    base: '0 2px 4px rgba(0, 0, 0, 0.1)',\n    md: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n    lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1)',\n    xl: '0 20px 25px -5px rgba(0, 0, 0, 0.1)',\n    '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n    variants: {\n      'wheel-shadow': '0 10px 30px rgba(0, 0, 0, 0.3)',\n      'button-shadow': '0 4px 12px rgba(255, 107, 53, 0.3)',\n      'modal-shadow': '0 20px 40px rgba(0, 0, 0, 0.4)',\n      'prize-glow': '0 0 20px rgba(16, 185, 129, 0.5)',\n      'jackpot-glow': '0 0 30px rgba(255, 107, 53, 0.7)',\n    },\n  },\n\n  // ============================================================================\n  // ANIMATION\n  // ============================================================================\n  animation: {\n    duration: {\n      fast: 150,\n      normal: 300,\n      slow: 500,\n      verySlow: 1000,\n      variants: {\n        'wheel-spin': 3000,\n        'wheel-slow': 2000,\n        'button-hover': 200,\n        'modal-fade': 300,\n        'prize-popup': 500,\n      },\n    },\n    easing: {\n      linear: 'linear',\n      ease: 'ease',\n      easeIn: 'ease-in',\n      easeOut: 'ease-out',\n      easeInOut: 'ease-in-out',\n      variants: {\n        'wheel-spin': 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n        'button-bounce': 'cubic-bezier(0.68, -0.55, 0.265, 1.55)',\n        'modal-slide': 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n      },\n    },\n    properties: {\n      all: 'all',\n      opacity: 'opacity',\n      transform: 'transform',\n      color: 'color',\n      background: 'background',\n      variants: {\n        'wheel-rotation': 'transform',\n        'button-scale': 'transform',\n        'modal-fade': 'opacity',\n        'prize-glow': 'box-shadow',\n      },\n    },\n    custom: {\n      'spin-keyframes': 'spin 3s cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n      'bounce-keyframes': 'bounce 0.5s ease-in-out',\n      'glow-keyframes': 'glow 2s ease-in-out infinite alternate',\n    },\n  },\n\n  // ============================================================================\n  // BREAKPOINTS\n  // ============================================================================\n  breakpoints: {\n    xs: 0,\n    sm: 640,\n    md: 768,\n    lg: 1024,\n    xl: 1280,\n    '2xl': 1536,\n    variants: {\n      mobile: 480,\n      tablet: 768,\n      desktop: 1024,\n      'large-desktop': 1440,\n    },\n  },\n\n  // ============================================================================\n  // THEME CLASSES\n  // ============================================================================\n  themeClasses: {\n    // Game container classes\n    '.game-container': {\n      backgroundColor: '#1a1a2e',\n      color: '#ffffff',\n      padding: 20,\n      borderRadiusValue: 0,\n      boxShadow: '0 0 0 rgba(0, 0, 0, 0)',\n      display: DisplayType.FLEX,\n      flexDirection: FlexDirection.COLUMN,\n      alignItems: AlignItems.CENTER,\n      justifyContent: JustifyContent.CENTER,\n      minHeight: '100vh',\n      boxSizing: BoxSizing.BORDER_BOX,\n    },\n\n    // Wheel classes\n    '.wheel-container': {\n      backgroundColor: '#2a2a3e',\n      borderRadiusValue: 9999,\n      padding: 20,\n      boxShadow: '0 10px 30px rgba(0, 0, 0, 0.3)',\n      width: { value: 800, unit: SizeUnit.PIXEL },\n      height: { value: 800, unit: SizeUnit.PIXEL },\n      display: DisplayType.FLEX,\n      alignItems: AlignItems.CENTER,\n      justifyContent: JustifyContent.CENTER,\n      position: PositionType.RELATIVE,\n      boxSizing: BoxSizing.BORDER_BOX,\n    },\n\n    '.wheel-base': {\n      backgroundColor: 'transparent',\n      borderRadiusValue: 9999,\n      width: { value: 760, unit: SizeUnit.PIXEL },\n      height: { value: 760, unit: SizeUnit.PIXEL },\n    },\n\n    '.wheel-pointer': {\n      backgroundColor: '#ff6b35',\n      borderRadiusValue: 4,\n      width: { value: 100, unit: SizeUnit.PIXEL },\n      height: { value: 150, unit: SizeUnit.PIXEL },\n      boxShadow: '0 4px 12px rgba(255, 107, 53, 0.3)',\n    },\n\n    '.wheel-center': {\n      backgroundColor: '#fbbf24',\n      borderRadiusValue: 9999,\n      width: { value: 120, unit: SizeUnit.PIXEL },\n      height: { value: 120, unit: SizeUnit.PIXEL },\n      boxShadow: '0 4px 12px rgba(251, 191, 36, 0.3)',\n    },\n\n    // Button classes\n    '.spin-button': {\n      backgroundColor: '#ff6b35',\n      color: '#ffffff',\n      padding: 16,\n      borderRadiusValue: 8,\n      fontWeight: 600,\n      fontSize: 18,\n      boxShadow: '0 4px 12px rgba(255, 107, 53, 0.3)',\n      width: { value: 200, unit: SizeUnit.PIXEL },\n      height: { value: 60, unit: SizeUnit.PIXEL },\n      display: DisplayType.FLEX,\n      alignItems: AlignItems.CENTER,\n      justifyContent: JustifyContent.CENTER,\n      cursor: CursorType.POINTER,\n      border: 'none',\n      boxSizing: BoxSizing.BORDER_BOX,\n      transition: 'all 0.3s ease',\n    },\n\n    '.spin-button:hover': {\n      backgroundColor: '#ff8c69',\n      boxShadow: '0 6px 16px rgba(255, 107, 53, 0.4)',\n      transform: 'scale(1.05)',\n      cursor: CursorType.POINTER,\n    },\n\n    '.spin-button:active': {\n      backgroundColor: '#e55a2b',\n      transform: 'scale(0.95)',\n    },\n\n    '.spin-button:disabled': {\n      backgroundColor: '#9ca3af',\n      color: '#6b7280',\n      cursor: CursorType.NOT_ALLOWED,\n    },\n\n    // Modal classes\n    '.prize-modal': {\n      backgroundColor: 'rgba(255, 255, 255, 0.95)',\n      color: '#1f2937',\n      padding: 32,\n      borderRadiusValue: 12,\n      boxShadow: '0 20px 40px rgba(0, 0, 0, 0.4)',\n      width: { value: 400, unit: SizeUnit.PIXEL },\n      height: { value: 300, unit: SizeUnit.PIXEL },\n      display: DisplayType.FLEX,\n      flexDirection: FlexDirection.COLUMN,\n      alignItems: AlignItems.CENTER,\n      justifyContent: JustifyContent.CENTER,\n      position: PositionType.RELATIVE,\n      boxSizing: BoxSizing.BORDER_BOX,\n      backdropFilter: 'blur(10px)',\n    },\n\n    '.prize-modal-header': {\n      color: '#ff6b35',\n      fontSize: 24,\n      fontWeight: 700,\n      textAlign: TextAlign.CENTER,\n    },\n\n    '.prize-modal-content': {\n      color: '#1f2937',\n      fontSize: 18,\n      marginTop: 16,\n      textAlign: TextAlign.CENTER,\n    },\n\n    '.prize-amount': {\n      color: '#10b981',\n      fontSize: 28,\n      fontWeight: 600,\n      textAlign: TextAlign.CENTER,\n    },\n\n    '.jackpot-amount': {\n      color: '#ff6b35',\n      fontSize: 32,\n      fontWeight: 700,\n      textAlign: TextAlign.CENTER,\n    },\n\n    // Close button\n    '.close-button': {\n      backgroundColor: '#ef4444',\n      color: '#ffffff',\n      borderRadiusValue: 9999,\n      width: { value: 40, unit: SizeUnit.PIXEL },\n      height: { value: 40, unit: SizeUnit.PIXEL },\n      fontSize: 20,\n      fontWeight: 600,\n      boxShadow: '0 2px 8px rgba(239, 68, 68, 0.3)',\n    },\n\n    '.close-button:hover': {\n      backgroundColor: '#dc2626',\n      transform: 'scale(1.1)',\n      cursor: CursorType.POINTER,\n    },\n\n    // Prize badge classes\n    '.prize-badge': {\n      backgroundColor: '#10b981',\n      color: '#ffffff',\n      padding: 8,\n      borderRadiusValue: 20,\n      fontSize: 14,\n      fontWeight: 600,\n      textAlign: TextAlign.CENTER,\n    },\n\n    '.prize-badge.big-win': {\n      backgroundColor: '#fbbf24',\n      color: '#1f2937',\n      boxShadow: '0 0 20px rgba(251, 191, 36, 0.5)',\n    },\n\n    '.prize-badge.jackpot': {\n      backgroundColor: '#ff6b35',\n      color: '#ffffff',\n      boxShadow: '0 0 30px rgba(255, 107, 53, 0.7)',\n    },\n\n    // Responsive classes\n    '.mobile-wheel': {\n      width: { value: 600, unit: SizeUnit.PIXEL },\n      height: { value: 600, unit: SizeUnit.PIXEL },\n    },\n\n    '.tablet-wheel': {\n      width: { value: 700, unit: SizeUnit.PIXEL },\n      height: { value: 700, unit: SizeUnit.PIXEL },\n    },\n\n    '.desktop-wheel': {\n      width: { value: 800, unit: SizeUnit.PIXEL },\n      height: { value: 800, unit: SizeUnit.PIXEL },\n    },\n\n    // Button container classes\n    '.button-container': {\n      display: DisplayType.FLEX,\n      flexDirection: FlexDirection.ROW,\n      alignItems: AlignItems.CENTER,\n      justifyContent: JustifyContent.CENTER,\n      gap: 16,\n      marginTop: 32,\n      flexWrap: FlexWrap.WRAP,\n    },\n\n    // Control panel classes\n    '.control-panel': {\n      display: DisplayType.FLEX,\n      flexDirection: FlexDirection.COLUMN,\n      alignItems: AlignItems.CENTER,\n      justifyContent: JustifyContent.CENTER,\n      gap: 16,\n      padding: 24,\n      backgroundColor: 'rgba(42, 42, 62, 0.8)',\n      borderRadiusValue: 12,\n      backdropFilter: 'blur(10px)',\n      boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',\n    },\n\n    // Score display classes\n    '.score-display': {\n      display: DisplayType.FLEX,\n      flexDirection: FlexDirection.COLUMN,\n      alignItems: AlignItems.CENTER,\n      justifyContent: JustifyContent.CENTER,\n      gap: 8,\n      padding: 16,\n      backgroundColor: 'rgba(255, 107, 53, 0.1)',\n      borderRadiusValue: 8,\n      border: '2px solid rgba(255, 107, 53, 0.3)',\n      minWidth: 120,\n    },\n\n    // Loading state classes\n    '.loading-spinner': {\n      display: DisplayType.FLEX,\n      alignItems: AlignItems.CENTER,\n      justifyContent: JustifyContent.CENTER,\n      width: { value: 40, unit: SizeUnit.PIXEL },\n      height: { value: 40, unit: SizeUnit.PIXEL },\n      border: '4px solid rgba(255, 107, 53, 0.3)',\n      borderTop: '4px solid #ff6b35',\n      borderRadiusValue: 9999,\n      cssAnimation: 'spin 1s linear infinite',\n    },\n\n    // Hidden/visible utility classes\n    '.hidden': {\n      visibility: VisibilityType.HIDDEN,\n      opacity: 0,\n      transition: 'opacity 0.3s ease, visibility 0.3s ease',\n    },\n\n    '.visible': {\n      visibility: VisibilityType.VISIBLE,\n      opacity: 1,\n      transition: 'opacity 0.3s ease, visibility 0.3s ease',\n    },\n\n    // Text utility classes\n    '.text-ellipsis': {\n      whiteSpace: WhiteSpace.NOWRAP,\n      overflow: OverflowType.HIDDEN,\n      textOverflow: TextOverflow.ELLIPSIS,\n    },\n\n    '.text-break': {\n      wordBreak: WordBreak.BREAK_WORD,\n      overflowWrap: OverflowWrap.BREAK_WORD,\n    },\n  },\n\n  // ============================================================================\n  // CUSTOM PROPERTIES\n  // ============================================================================\n  custom: {\n    'wheel-segments': 12,\n    'wheel-colors': [\n      '#ff6b35',\n      '#3b82f6',\n      '#10b981',\n      '#f59e0b',\n      '#ef4444',\n      '#8b5cf6',\n      '#06b6d4',\n      '#84cc16',\n      '#f97316',\n      '#ec4899',\n      '#14b8a6',\n      '#f43f5e',\n    ],\n    'prize-values': [100, 200, 500, 1000, 2000, 5000, 10000, 25000, 50000, 100000, 250000, 1000000],\n    'animation-speeds': {\n      fast: 1000,\n      normal: 3000,\n      slow: 5000,\n    },\n    'sound-effects': {\n      spin: 'wheel_spin.mp3',\n      tick: 'wheel_tick.mp3',\n      stop: 'wheel_stop.mp3',\n      win: 'prize_popup.mp3',\n      'big-win': 'big_win.mp3',\n      jackpot: 'jackpot.mp3',\n    },\n  },\n\n  // ============================================================================\n  // METADATA\n  // ============================================================================\n  metadata: {\n    createdAt: new Date('2024-01-01'),\n    modifiedAt: new Date(),\n    author: 'Fortune Wheel Game Team',\n    version: '1.0.0',\n    tags: ['game', 'fortune-wheel', 'vibrant', 'engaging', 'casino-style'],\n    custom: {\n      'game-type': 'fortune-wheel',\n      'target-audience': 'casual-gamers',\n      'color-scheme': 'vibrant',\n      'animation-style': 'engaging',\n    },\n  },\n\n  // ============================================================================\n  // REQUIRED METHODS\n  // ============================================================================\n  getColor(path: string): string {\n    const colorMap: Record<string, string> = {\n      'primary.main': this.colors.primary.main,\n      'primary.light': this.colors.primary.light,\n      'primary.dark': this.colors.primary.dark,\n      'secondary.main': this.colors.secondary.main,\n      'background.primary': this.colors.background.primary,\n      'text.primary': this.colors.text.primary,\n      'status.success': this.colors.status.success,\n      'status.warning': this.colors.status.warning,\n      'status.error': this.colors.status.error,\n      'ui.border': this.colors.ui.border,\n      'ui.highlight': this.colors.ui.highlight,\n    };\n    return colorMap[path] || '#000000';\n  },\n\n  getSpacing(size: keyof ITheme['spacing']['scale']): number {\n    const value = this.spacing.scale[size];\n    return typeof value === 'number' ? value : 0;\n  },\n\n  getFontSize(size: keyof ITheme['typography']['fontSize']): number {\n    const value = this.typography.fontSize[size];\n    return typeof value === 'number' ? value : 16;\n  },\n\n  getBorderRadius(size: keyof ITheme['borderRadius']): number {\n    const value = this.borderRadius[size];\n    return typeof value === 'number' ? value : 0;\n  },\n\n  getShadow(size: keyof ITheme['shadows']): string {\n    const value = this.shadows[size];\n    return typeof value === 'string' ? value : 'none';\n  },\n\n  getAnimationDuration(size: keyof ITheme['animation']['duration']): number {\n    const value = this.animation.duration[size];\n    return typeof value === 'number' ? value : 300;\n  },\n\n  supportsBreakpoint(breakpoint: BreakpointName): boolean {\n    return breakpoint in this.breakpoints;\n  },\n\n  getOppositeTheme(): string | null {\n    return null; // No opposite theme for fortune wheel\n  },\n\n  clone(): ITheme {\n    return JSON.parse(JSON.stringify(this));\n  },\n\n  merge(other: Partial<ITheme>): ITheme {\n    return { ...this, ...other };\n  },\n};\n","/**\n * Levis 2025 R3 Wheel Scene\n *\n * A scene that follows the proper configuration-driven architecture.\n * Uses ConfigManager to coordinate all systems including asset loading.\n */\n\nimport { BaseScene } from '../abstract/base/BaseScene';\nimport { levis2025R3WheelScene1AssetConfig } from '../runtime/games/levis-2025-r3-wheel/scene-1/levis-2025-r3-wheel-scene-1.asset.config';\nimport { levis2025r3wheelResponsiveConfig } from '../runtime/scene/levis2025r3wheel/levis2025r3wheel.responsive.config';\nimport { levis2025r3wheelSceneLoaderConfig } from '../runtime/scene/levis2025r3wheel/levis2025r3wheel.scene_loader.config';\nimport { levis2025r3wheelLoggingConfig } from '../runtime/scene/levis2025r3wheel/levis2025r3wheel.logging.config';\nimport { fortuneWheelTheme } from '../runtime/games/levis-2025-r3-wheel/scene-1/fortune-wheel-theme.config';\n\nexport class Levis2025R3WheelScene extends BaseScene {\n  constructor() {\n    super('Levis2025R3WheelScene');\n  }\n\n  /**\n   * Register all scene configurations through ConfigManager\n   */\n  protected registerSceneConfigs(): void {\n    this.configManager.registerSceneConfigs(\n      'levis2025r3wheel',\n      levis2025r3wheelLoggingConfig, // Logging configuration\n      levis2025r3wheelResponsiveConfig, // Responsive layout configuration\n      levis2025r3wheelSceneLoaderConfig, // Scene structure configuration\n      levis2025R3WheelScene1AssetConfig, // Asset loading configuration\n      fortuneWheelTheme // Theme styling configuration\n    );\n  }\n\n  /**\n   * Get scene name for configuration loading\n   */\n  protected getSceneName(): string {\n    return 'levis2025r3wheel';\n  }\n\n  /**\n   * Scene preload - Assets are loaded by BaseScene using ConfigManager\n   * This method can be overridden for scene-specific asset loading if needed\n   */\n  preload(): void {\n    // BaseScene handles asset loading through ConfigManager\n    // Call parent implementation\n    super.preload();\n\n    this.logger.info(\n      'Levis2025R3WheelScene',\n      'preload',\n      'Asset loading handled by BaseScene through ConfigManager'\n    );\n  }\n\n  /**\n   * Scene create - BaseScene handles the main creation flow\n   * This method can be overridden for scene-specific creation logic\n   */\n  async create(): Promise<void> {\n    this.logger.info('Levis2025R3WheelScene', 'create', 'Starting scene creation');\n\n    try {\n      // BaseScene handles the main creation flow through ConfigManager\n      // Call parent implementation\n      await super.create();\n\n      // Add scene-specific creation logic here if needed\n      this.addSceneSpecificElements();\n\n      // Activate the theme for this scene\n      await this.activateSceneTheme();\n\n      this.logger.info('Levis2025R3WheelScene', 'create', 'Scene creation completed');\n    } catch (error) {\n      this.logger.error('Levis2025R3WheelScene', 'create', 'Failed to create scene', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Add scene-specific elements that aren't defined in configuration\n   */\n  private addSceneSpecificElements(): void {\n    try {\n      // Add some basic text\n      this.add\n        .text(this.scale.width / 2, 50, 'Levis 2025 R3 Wheel - Scene 1', {\n          fontSize: '32px',\n          color: '#ffffff',\n          fontFamily: 'Arial',\n        })\n        .setOrigin(0.5, 0);\n\n      // Add loading status text\n      this.add\n        .text(this.scale.width / 2, this.scale.height - 50, 'Scene Created with ConfigManager', {\n          fontSize: '16px',\n          color: '#ffffff',\n          fontFamily: 'Arial',\n        })\n        .setOrigin(0.5, 1);\n\n      this.logger.info(\n        'Levis2025R3WheelScene',\n        'addSceneSpecificElements',\n        'Scene-specific elements added'\n      );\n    } catch (error) {\n      this.logger.error(\n        'Levis2025R3WheelScene',\n        'addSceneSpecificElements',\n        'Failed to add scene-specific elements',\n        { error }\n      );\n    }\n  }\n\n  /**\n   * Activate the theme for this scene\n   */\n  private async activateSceneTheme(): Promise<void> {\n    try {\n      this.logger.info('Levis2025R3WheelScene', 'activateSceneTheme', 'Activating scene theme');\n\n      // Get the theme from the scene configs\n      const theme = this.sceneConfigs.theme;\n      if (theme && theme.id) {\n        // Activate the theme using the BaseScene method\n        await this.activateTheme(theme.id);\n\n        this.logger.info(\n          'Levis2025R3WheelScene',\n          'activateSceneTheme',\n          'Scene theme activated successfully',\n          {\n            themeId: theme.id,\n            themeName: theme.name,\n          }\n        );\n      } else {\n        this.logger.warn(\n          'Levis2025R3WheelScene',\n          'activateSceneTheme',\n          'No theme found in scene configs'\n        );\n      }\n    } catch (error) {\n      this.logger.error(\n        'Levis2025R3WheelScene',\n        'activateSceneTheme',\n        'Failed to activate scene theme',\n        { error }\n      );\n      // Don't throw error - theme activation failure shouldn't break the scene\n    }\n  }\n\n  /**\n   * Scene shutdown - BaseScene handles cleanup\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('Levis2025R3WheelScene', 'shutdown', 'Scene shutting down');\n\n    // Call parent shutdown\n    await super.shutdown();\n  }\n}\n\nexport default Levis2025R3WheelScene;\n","import { BaseGame, BaseGameConfig } from './BaseGame';\nimport { Levis2025R3WheelScene } from '../scenes/Levis2025R3WheelScene';\nimport { logger } from '../core';\n\nexport class Game {\n  private baseGame: BaseGame;\n\n  constructor() {\n    logger.debug('Game', 'constructor', 'Initializing minimal game with asset system');\n\n    // Create base game configuration\n    const baseGameConfig: BaseGameConfig = {\n      gameId: 'levis-2025-r3-wheel-game',\n      phaserConfig: {\n        backgroundColor: '#1a1a2e',\n        physics: {\n          default: 'arcade',\n          arcade: {\n            gravity: { x: 0, y: 0 },\n            debug: false,\n          },\n        },\n      },\n    };\n\n    // Create base game\n    this.baseGame = new BaseGame(baseGameConfig);\n\n    // Add the scene - the scene handles its own asset loading\n    const scene = new Levis2025R3WheelScene();\n    this.baseGame.addScene(scene);\n\n    logger.info('Game', 'constructor', 'Game initialized successfully', {\n      sceneKey: 'Levis2025R3WheelScene',\n      gameId: baseGameConfig.gameId,\n    });\n  }\n\n  /**\n   * Start the game\n   */\n  async start(): Promise<void> {\n    try {\n      logger.info('Game', 'start', 'Starting game');\n\n      // Start the scene - asset loading is handled by the scene\n      this.baseGame.startScene('Levis2025R3WheelScene');\n\n      logger.info('Game', 'start', 'Game started successfully');\n    } catch (error) {\n      logger.error('Game', 'start', 'Failed to start game', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * Get the base game instance\n   */\n  getBaseGame(): BaseGame {\n    return this.baseGame;\n  }\n\n  destroy(): void {\n    if (this.baseGame) {\n      logger.info('Game', 'destroy', 'Destroying game');\n      this.baseGame.destroy();\n      logger.debug('Game', 'destroy', 'Game destroyed successfully');\n    }\n  }\n}\n","import { Game } from './game/Game';\nimport { logger } from './core';\n\n// Initialize the game when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', async () => {\n  logger.info('Main', 'unknown', 'main', 'Initializing Phaser Game');\n\n  try {\n    const game = new Game();\n    await game.start();\n    logger.info('Main', 'unknown', 'main', 'Game started successfully');\n  } catch (error) {\n    logger.error('Main', 'unknown', 'Failed to start game', { error });\n  }\n});\n","import * as Phaser from 'phaser';\nimport type { IContainer } from '../../abstract/objects/IContainer';\nimport { Container } from './Container';\nimport { Logger } from '../../core/Logger';\n\n/**\n * BackgroundContainer Class\n * Root container that automatically handles background image loading and responsive sizing\n *\n * Key Features:\n * - Automatically loads and displays background images\n * - Maintains aspect ratio by default\n * - Responsive positioning and sizing for multiple devices\n * - Phaser container automatically follows background image dimensions\n * - Handles device orientation changes and window resizing\n *\n * Architecture:\n * - Inherits responsive behavior from Container (which extends Phaser.GameObjects.Container)\n * - Implements only background-specific logic\n * - Delegates responsive logic to parent Container class\n * - Uses Container's setStyle and applyStyleCascade for all styling\n */\nexport class BackgroundContainer extends Container {\n  // ===== STATIC FACTORY METHOD =====\n\n  /**\n   * Create a BackgroundContainer instance from configuration\n   * This method allows the BackgroundContainer class to create itself from config\n   */\n  public static createFromConfig(\n    config: any,\n    scene: Phaser.Scene,\n    parent?: Phaser.GameObjects.Container\n  ): BackgroundContainer {\n    const logger = Logger.getInstance();\n    logger.debug('BackgroundContainer', 'createFromConfig', 'createFromConfig called', {\n      objectId: config.id,\n      config: config,\n      sceneKey: scene.scene.key,\n      hasParent: !!parent,\n    });\n\n    try {\n      const container = new BackgroundContainer(\n        scene,\n        config.id,\n        config.x || 0,\n        config.y || 0,\n        parent ? (parent as any) : null\n      );\n\n      logger.debug(\n        'BackgroundContainer',\n        'createFromConfig',\n        'BackgroundContainer instance created',\n        {\n          objectId: config.id,\n          phaserObjectType: container.constructor.name,\n          position: { x: container.x, y: container.y },\n        }\n      );\n\n      // Apply configuration properties\n      if (config.properties) {\n        logger.debug('BackgroundContainer', 'createFromConfig', 'Applying properties from config', {\n          objectId: config.id,\n          properties: config.properties,\n        });\n\n        // Set interactive if specified\n        if (config.properties.interactive !== undefined) {\n          logger.debug('BackgroundContainer', 'unknown', 'Setting interactive', {\n            objectId: config.id,\n            interactive: config.properties.interactive,\n          });\n          container.setInteractive(config.properties.interactive);\n        }\n      }\n\n      // Don't set size here - let the parent container control sizing\n      // The BackgroundContainer will resize itself based on background image aspect ratio\n\n      // Set name\n      container.name = config.name || config.id;\n\n      logger.debug(\n        'BackgroundContainer',\n        'unknown',\n        'BackgroundContainer configured successfully',\n        {\n          objectId: config.id,\n          finalSize: { width: container.width, height: container.height },\n          finalPosition: { x: container.x, y: container.y },\n          finalName: container.name,\n        }\n      );\n\n      return container;\n    } catch (error) {\n      logger.error(\n        'BackgroundContainer',\n        'unknown',\n        'Error in createFromConfig for ${config.id}:',\n        error\n      );\n      throw error;\n    }\n  }\n\n  // ===== BACKGROUND IMAGE PROPERTIES =====\n\n  /** Background image key/texture */\n  private backgroundImageKey: string | null = null;\n\n  /** Background image object */\n  private backgroundImage: Phaser.GameObjects.Image | null = null;\n\n  /** Background image dimensions */\n  private backgroundDimensions: { width: number; height: number } | null = null;\n\n  /** Whether to maintain aspect ratio */\n  private maintainAspectRatio: boolean = true;\n\n  /** Background scaling mode - now simplified to work with Container's setStyle */\n  private scalingMode: 'fit' | 'fill' | 'stretch' = 'fit';\n\n  /** Background alignment */\n  private alignment: { x: 'left' | 'center' | 'right'; y: 'top' | 'center' | 'bottom' } = {\n    x: 'center',\n    y: 'center',\n  };\n\n  /** Background color fallback */\n  private backgroundColor: string = '#000000';\n\n  /** Original container dimensions for responsive sizing */\n  private originalWidth: number = 1920;\n  private originalHeight: number = 1080;\n\n  /** Whether background is loaded */\n  private isBackgroundLoaded: boolean = false;\n\n  /** Responsive background image keys - now handled by responsive configuration */\n  private responsiveBackgroundImages: Map<string, string> = new Map(); // breakpoint -> textureKey\n\n  /** Logger instance */\n  protected logger: Logger = Logger.getInstance();\n\n  constructor(\n    scene: Phaser.Scene,\n    id: string,\n    x: number = 0,\n    y: number = 0,\n    parent: IContainer | null = null\n  ) {\n    super(scene, id, x, y, parent);\n\n    this.logger.debug('BackgroundContainer', 'super', 'BackgroundContainer constructor called', {\n      id,\n      x,\n      y,\n      hasParent: !!parent,\n      sceneKey: scene.scene.key,\n    });\n\n    // Set container type to background (not root anymore)\n    this.setContainerType('background');\n\n    // Set default constraints for background container\n    this.setConstraints({\n      maxChildren: 1000,\n      autoSize: false, // Don't auto-size, follow background image aspect ratio\n      clipOverflow: false,\n      overflow: 'visible',\n      respectParentBounds: true, // Now respects parent bounds\n      maintainAspectRatio: true,\n    });\n\n    // Set up resize event listener\n    this.setupResizeListener();\n\n    // Apply responsive sizing after a short delay to ensure parent is ready\n    // This ensures the BackgroundContainer sizes itself to fill the parent container\n    setTimeout(() => {\n      if (this.parent) {\n        this.applyResponsiveSizing();\n      }\n    }, 100);\n  }\n\n  // ===== CONFIGURATION METHODS =====\n\n  /**\n   * Set original dimensions for responsive sizing\n   */\n  setOriginalDimensions(width: number, height: number): void {\n    this.originalWidth = width;\n    this.originalHeight = height;\n    this.logger.debug('BackgroundContainer', 'setOriginalDimensions', 'Original dimensions set', {\n      objectId: this.id,\n      originalWidth: this.originalWidth,\n      originalHeight: this.originalHeight,\n    });\n  }\n\n  // ===== BACKGROUND IMAGE MANAGEMENT =====\n\n  /**\n   * Load and set background image\n   * @param imageKey - Phaser texture key for the background image\n   * @param options - Background loading options\n   */\n  setBackgroundImage(\n    imageKey: string,\n    options: {\n      maintainAspectRatio?: boolean;\n      scalingMode?: 'fit' | 'fill' | 'stretch';\n      alignment?: { x: 'left' | 'center' | 'right'; y: 'top' | 'center' | 'bottom' };\n      backgroundColor?: string;\n    } = {}\n  ): void {\n    this.logger.debug('BackgroundContainer', 'setOriginalDimensions', 'setBackgroundImage called', {\n      objectId: this.id,\n      textureKey: imageKey,\n      hasTexture: this.scene.textures.exists(imageKey),\n    });\n\n    this.backgroundImageKey = imageKey;\n    this.maintainAspectRatio = options.maintainAspectRatio ?? true;\n    this.scalingMode = options.scalingMode ?? 'fit';\n    this.alignment = options.alignment ?? { x: 'center', y: 'center' };\n    this.backgroundColor = options.backgroundColor ?? '#000000';\n\n    // Load the background image\n    this.loadBackgroundImage(imageKey);\n  }\n\n  /**\n   * Check if responsive background images are configured\n   */\n  private hasResponsiveBackgroundImages(): boolean {\n    // Check if we have responsive background images configured\n    const hasResponsive = this.responsiveBackgroundImages.size > 0;\n    this.logger.debug(\n      'BackgroundContainer',\n      'hasResponsiveBackgroundImages',\n      'Checking responsive background images',\n      {\n        objectId: this.id,\n        responsiveBackgroundImages: Array.from(this.responsiveBackgroundImages.entries()),\n        hasResponsive,\n      }\n    );\n    return hasResponsive;\n  }\n\n  /**\n   * Set responsive background image based on current device type\n   * @param desktopImageKey - Phaser texture key for desktop background\n   * @param mobileImageKey - Phaser texture key for mobile background\n   * @param options - Background loading options\n   */\n  setResponsiveBackgroundImage(\n    desktopImageKey: string,\n    mobileImageKey: string,\n    options: {\n      maintainAspectRatio?: boolean;\n      scalingMode?: 'fit' | 'fill' | 'stretch';\n      alignment?: { x: 'left' | 'center' | 'right'; y: 'top' | 'center' | 'bottom' };\n      backgroundColor?: string;\n    } = {}\n  ): void {\n    // Store the responsive background image keys for backward compatibility\n    this.responsiveBackgroundImages.set('desktop', desktopImageKey);\n    this.responsiveBackgroundImages.set('mobile', mobileImageKey);\n\n    this.logger.debug(\n      'BackgroundContainer',\n      'hasResponsiveBackgroundImages',\n      'setResponsiveBackgroundImage called',\n      {\n        objectId: this.id,\n        desktopImageKey,\n        mobileImageKey,\n        currentWidth: this.scene.game.scale.width,\n      }\n    );\n\n    // Get the appropriate background image from responsive configuration\n    const currentWidth = this.scene.game.scale.width;\n\n    // Try to get background image from responsive config first\n    let selectedImageKey = this.getBackgroundImageFromResponsiveConfig(currentWidth);\n\n    // Fallback to legacy desktop/mobile logic if no responsive config\n    if (!selectedImageKey) {\n      const isDesktop = currentWidth >= 992; // lg breakpoint\n      selectedImageKey = isDesktop ? desktopImageKey : mobileImageKey;\n    }\n\n    this.logger.debug(\n      'BackgroundContainer',\n      'hasResponsiveBackgroundImages',\n      'Selected background image',\n      {\n        objectId: this.id,\n        selectedImageKey,\n        currentWidth,\n        hasResponsiveConfig: !!selectedImageKey,\n      }\n    );\n\n    // Set the selected background image\n    this.setBackgroundImage(selectedImageKey, options);\n  }\n\n  /**\n   * Load background image from texture\n   */\n  private loadBackgroundImage(imageKey: string): void {\n    if (!imageKey) return;\n\n    try {\n      // Check if texture exists\n      if (!this.scene.textures.exists(imageKey)) {\n        this.logger.warn(\n          'BackgroundContainer',\n          'loadBackgroundImage',\n          `Background texture \"${imageKey}\" not found`,\n          {\n            objectId: this.id,\n            availableTextures: Object.keys(this.scene.textures.list),\n          }\n        );\n        return;\n      }\n\n      // Remove existing background image\n      if (this.backgroundImage) {\n        this.logger.debug(\n          'BackgroundContainer',\n          'loadBackgroundImage',\n          'Removing existing background image',\n          {\n            objectId: this.id,\n          }\n        );\n        this.backgroundImage.destroy();\n        this.backgroundImage = null;\n      }\n\n      // Create new background image\n      this.backgroundImage = this.scene.add.image(0, 0, imageKey);\n\n      // Get background dimensions\n      this.backgroundDimensions = {\n        width: this.backgroundImage!.width,\n        height: this.backgroundImage!.height,\n      };\n\n      // Add to BackgroundContainer (not scene)\n      this.add(this.backgroundImage);\n\n      // Mark as loaded\n      this.isBackgroundLoaded = true;\n\n      // Ensure correct z-order\n      this.ensureBackgroundImageZOrder();\n\n      // Refresh z-order of all child elements\n      this.refreshChildZOrders();\n\n      // Apply responsive sizing based on parent container\n      this.applyResponsiveSizing();\n\n      this.logger.debug(\n        'BackgroundContainer',\n        'loadBackgroundImage',\n        'Background image loaded: ${imageKey}',\n        {\n          objectId: this.id,\n          imageSize: { width: this.backgroundImage!.width, height: this.backgroundImage!.height },\n        }\n      );\n    } catch (error) {\n      this.logger.error(\n        'BackgroundContainer',\n        'loadBackgroundImage',\n        'Failed to load background image:',\n        error\n      );\n      this.isBackgroundLoaded = false;\n    }\n  }\n\n  /**\n   * Remove background image\n   */\n  removeBackgroundImage(): void {\n    if (this.backgroundImage) {\n      this.logger.debug(\n        'BackgroundContainer',\n        'removeBackgroundImage',\n        'Removing background image',\n        {\n          objectId: this.id,\n        }\n      );\n      this.backgroundImage.destroy();\n      this.backgroundImage = null;\n    }\n\n    this.backgroundImageKey = null;\n    this.backgroundDimensions = null;\n    this.isBackgroundLoaded = false;\n\n    // Reset container size to default\n    this.resize(800, 600);\n  }\n\n  /**\n   * Set background color (fallback when no image)\n   */\n  setBackgroundColor(color: string): void {\n    this.backgroundColor = color;\n\n    // If no background image, create a colored rectangle with current dimensions\n    if (!this.isBackgroundLoaded) {\n      this.createBackgroundRectangle();\n    }\n  }\n\n  /**\n   * Create background rectangle when no image is loaded\n   */\n  private createBackgroundRectangle(width?: number, height?: number): void {\n    // Remove existing background graphics\n    this.list.forEach((child: any) => {\n      if (child instanceof Phaser.GameObjects.Graphics) {\n        child.destroy();\n      }\n    });\n\n    // Use provided dimensions or fall back to container dimensions\n    const rectWidth = width ?? this.width;\n    const rectHeight = height ?? this.height;\n\n    // Create colored rectangle\n    const graphics = this.scene.add.graphics();\n    graphics.fillStyle(Phaser.Display.Color.ValueToColor(this.backgroundColor).color);\n    graphics.fillRect(0, 0, rectWidth, rectHeight);\n\n    // Add to container\n    this.add(graphics);\n\n    this.logger.debug(\n      'BackgroundContainer',\n      'createBackgroundRectangle',\n      'Background rectangle created/updated',\n      {\n        objectId: this.id,\n        backgroundColor: this.backgroundColor,\n        rectangleSize: { width: rectWidth, height: rectHeight },\n        containerSize: { width: this.width, height: this.height },\n      }\n    );\n  }\n\n  // ===== SIMPLIFIED RESPONSIVE LOGIC =====\n\n  /**\n   * Get background image key from responsive configuration for a given width\n   * Now simplified to work with Container's responsive system\n   */\n  private getBackgroundImageFromResponsiveConfig(width: number): string | undefined {\n    try {\n      // Use Container's injected configs if available\n      if (this.injectedConfigs?.responsive) {\n        const objectId = this.id || 'background-container';\n\n        // Check responsive breakpoints first\n        if (this.injectedConfigs.responsive.responsiveSettings) {\n          const breakpoints = this.injectedConfigs.responsive.responsiveSettings;\n          for (const [, layouts] of Object.entries(breakpoints)) {\n            const typedLayouts = layouts as Array<{\n              id: string;\n              breakpointCondition: { minWidth: number; maxWidth?: number };\n              layoutProperties: any;\n            }>;\n\n            // Find the layout for this object\n            const objectLayout = typedLayouts.find(layout => layout.id === objectId);\n            if (objectLayout) {\n              const { minWidth, maxWidth } = objectLayout.breakpointCondition;\n              if (width >= minWidth && (maxWidth === undefined || width <= maxWidth)) {\n                return objectLayout.layoutProperties.backgroundImage;\n              }\n            }\n          }\n        }\n\n        // If no responsive breakpoint matches, check default\n        if (this.injectedConfigs.responsive.default) {\n          const defaultLayout = (\n            this.injectedConfigs.responsive.default as Array<{\n              id: string;\n              breakpointCondition: { minWidth: number; maxWidth?: number };\n              layoutProperties: any;\n            }>\n          ).find(layout => layout.id === objectId);\n\n          if (defaultLayout) {\n            return defaultLayout.layoutProperties.backgroundImage;\n          }\n        }\n      }\n\n      // Fallback to legacy responsive background images\n      if (this.responsiveBackgroundImages.size > 0) {\n        const isDesktop = width >= 992; // lg breakpoint\n        return isDesktop\n          ? this.responsiveBackgroundImages.get('desktop')\n          : this.responsiveBackgroundImages.get('mobile');\n      }\n    } catch (error) {\n      this.logger.warn(\n        'BackgroundContainer',\n        'getBackgroundImageFromResponsiveConfig',\n        'Failed to get background image from responsive config',\n        {\n          objectId: this.id,\n          width,\n          error: error instanceof Error ? error.message : String(error),\n        }\n      );\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Apply responsive sizing based on parent container dimensions\n   * Now simplified to work with Container's responsive system\n   */\n  private applyResponsiveSizing(): void {\n    if (!this.parent) return;\n\n    // Get parent container dimensions\n    const parentBounds = this.parent.getContainerBounds();\n    const parentWidth = parentBounds.width;\n    const parentHeight = parentBounds.height;\n\n    // Always resize BackgroundContainer to fit parent, regardless of background image status\n    this.resize(parentWidth, parentHeight);\n\n    // Propagate resize to children\n    this.propagateResizeToChildren(parentWidth, parentHeight);\n\n    this.logger.debug(\n      'BackgroundContainer',\n      'applyResponsiveSizing',\n      'Responsive sizing applied from parent',\n      {\n        objectId: this.id,\n        parentDimensions: { width: parentWidth, height: parentHeight },\n        finalSize: { width: this.width, height: this.height },\n        hasBackgroundImage: this.isBackgroundLoaded,\n      }\n    );\n  }\n\n  // ===== SIMPLIFIED SCALE STRATEGY LOGIC =====\n\n  /**\n   * Scale background image to fill container size\n   * Now simplified to work with Container's setStyle system\n   */\n  private scaleBackgroundImageToFit(): void {\n    if (!this.backgroundImage || !this.backgroundDimensions) return;\n\n    // Get current responsive behavior from Container's injected configs\n    const responsiveBehavior = this.getCurrentResponsiveBehaviorFromContainer();\n\n    // Apply scaling based on responsive scaleStrategy\n    switch (responsiveBehavior.scaleStrategy) {\n      case 'fit':\n        if (responsiveBehavior.maintainAspectRatio) {\n          // Fit image within container while maintaining aspect ratio\n          const imageAspectRatio =\n            this.backgroundDimensions.width / this.backgroundDimensions.height;\n          const containerAspectRatio = this.width / this.height;\n\n          let displayWidth: number;\n          let displayHeight: number;\n\n          if (containerAspectRatio > imageAspectRatio) {\n            // Container is wider, fit by height\n            displayHeight = this.height;\n            displayWidth = displayHeight * imageAspectRatio;\n          } else {\n            // Container is taller, fit by width\n            displayWidth = this.width;\n            displayHeight = displayWidth / imageAspectRatio;\n          }\n\n          this.backgroundImage.setDisplaySize(displayWidth, displayHeight);\n\n          // Center the image within the container\n          this.backgroundImage.setPosition(this.width / 2, this.height / 2);\n\n          this.logger.debug(\n            'BackgroundContainer',\n            'scaleBackgroundImageToFit',\n            'Background image fitted with aspect ratio',\n            {\n              objectId: this.id,\n              containerSize: { width: this.width, height: this.height },\n              imageDisplaySize: { width: displayWidth, height: displayHeight },\n              imagePosition: { x: this.width / 2, y: this.height / 2 },\n              scaleStrategy: 'fit',\n              maintainAspectRatio: true,\n            }\n          );\n        } else {\n          // Fit to container without maintaining aspect ratio\n          this.backgroundImage.setDisplaySize(this.width, this.height);\n          this.backgroundImage.setPosition(this.width / 2, this.height / 2);\n\n          this.logger.debug(\n            'BackgroundContainer',\n            'scaleBackgroundImageToFit',\n            'Background image fitted without aspect ratio',\n            {\n              objectId: this.id,\n              containerSize: { width: this.width, height: this.height },\n              imageDisplaySize: { width: this.width, height: this.height },\n              imagePosition: { x: this.width / 2, y: this.height / 2 },\n              scaleStrategy: 'fit',\n              maintainAspectRatio: false,\n            }\n          );\n        }\n        break;\n\n      case 'stretch':\n      default:\n        // Stretch image to fill container completely (may distort)\n        this.backgroundImage.setDisplaySize(this.width, this.height);\n        this.backgroundImage.setPosition(this.width / 2, this.height / 2);\n\n        this.logger.debug(\n          'BackgroundContainer',\n          'scaleBackgroundImageToFit',\n          'Background image stretched to fill container',\n          {\n            objectId: this.id,\n            containerSize: { width: this.width, height: this.height },\n            imageDisplaySize: { width: this.width, height: this.height },\n            imagePosition: { x: this.width / 2, y: this.height / 2 },\n            scaleStrategy: 'stretch',\n            note: 'Image stretched to fill container completely',\n          }\n        );\n        break;\n    }\n\n    // Always ensure lower z-order so UI elements appear above background\n    this.ensureBackgroundImageZOrder();\n  }\n\n  /**\n   * Get current responsive behavior from Container's injected configs\n   * Now simplified to work with Container's responsive system\n   */\n  private getCurrentResponsiveBehaviorFromContainer(): {\n    maintainAspectRatio: boolean;\n    scaleStrategy: 'fit' | 'stretch' | 'fill';\n    alignment: string;\n  } {\n    // Use Container's injected configs if available\n    if (this.injectedConfigs?.responsive) {\n      const objectId = this.id || 'background-container';\n\n      // Check responsive breakpoints first\n      if (\n        this.injectedConfigs.responsive.responsiveSettings &&\n        this.injectedConfigs.currentBreakpoint\n      ) {\n        const breakpointLayouts =\n          this.injectedConfigs.responsive.responsiveSettings[\n            this.injectedConfigs.currentBreakpoint\n          ];\n\n        if (breakpointLayouts) {\n          const breakpointLayout = breakpointLayouts.find((layout: any) => layout.id === objectId);\n\n          if (breakpointLayout?.layoutProperties) {\n            return {\n              maintainAspectRatio: breakpointLayout.layoutProperties.maintainAspectRatio ?? true,\n              scaleStrategy: breakpointLayout.layoutProperties.scaleStrategy ?? 'fit',\n              alignment: breakpointLayout.layoutProperties.alignment ?? 'center',\n            };\n          }\n        }\n      }\n\n      // If no responsive breakpoint matches, use default\n      if (this.injectedConfigs.responsive.default) {\n        const defaultLayout = (\n          this.injectedConfigs.responsive.default as Array<{\n            id: string;\n            breakpointCondition: { minWidth: number; maxWidth?: number };\n            layoutProperties: any;\n          }>\n        ).find(layout => layout.id === objectId);\n\n        if (defaultLayout) {\n          return {\n            maintainAspectRatio: defaultLayout.layoutProperties.maintainAspectRatio ?? true,\n            scaleStrategy: defaultLayout.layoutProperties.scaleStrategy ?? 'fit',\n            alignment: defaultLayout.layoutProperties.alignment ?? 'center',\n          };\n        }\n      }\n    }\n\n    // Fallback to local properties\n    return {\n      maintainAspectRatio: this.maintainAspectRatio,\n      scaleStrategy: this.scalingMode,\n      alignment: this.alignment.x + '-' + this.alignment.y,\n    };\n  }\n\n  // ===== DEVICE ORIENTATION HANDLING =====\n\n  // Note: Window resize and orientation change events are handled by the parent container/scene\n  // This container only responds to resize() calls from its parent\n\n  // ===== SETUP METHODS =====\n\n  /**\n   * Set up resize event listener\n   */\n  private setupResizeListener(): void {\n    // No direct event listeners - resize events come from parent container\n    // This maintains the solid architecture where containers only respond to resize() calls\n  }\n\n  /**\n   * Clean up event listeners\n   */\n  cleanup(): void {\n    // No event listeners to clean up\n  }\n\n  // ===== OVERRIDE METHODS =====\n\n  /**\n   * Override destroy to clean up event listeners\n   */\n  override destroy(): void {\n    this.cleanup();\n    super.destroy();\n  }\n\n  /**\n   * Override measureLayout to return background dimensions\n   */\n  measureLayout(): { width: number; height: number } {\n    if (this.isBackgroundLoaded && this.backgroundDimensions) {\n      return this.backgroundDimensions;\n    }\n\n    return {\n      width: this.width,\n      height: this.height,\n    };\n  }\n\n  // ===== UTILITY METHODS =====\n\n  /**\n   * Get background information\n   */\n  getBackgroundInfo(): {\n    isLoaded: boolean;\n    imageKey: string | null;\n    dimensions: { width: number; height: number } | null;\n    scalingMode: string;\n    alignment: { x: string; y: string };\n    maintainAspectRatio: boolean;\n  } {\n    return {\n      isLoaded: this.isBackgroundLoaded,\n      imageKey: this.backgroundImageKey,\n      dimensions: this.backgroundDimensions,\n      scalingMode: this.scalingMode,\n      alignment: this.alignment,\n      maintainAspectRatio: this.maintainAspectRatio,\n    };\n  }\n\n  /**\n   * Update background properties\n   */\n  updateBackgroundProperties(properties: {\n    scalingMode?: 'fit' | 'fill' | 'stretch';\n    alignment?: { x: 'left' | 'center' | 'right'; y: 'top' | 'center' | 'bottom' };\n    maintainAspectRatio?: boolean;\n  }): void {\n    if (properties.scalingMode) {\n      this.scalingMode = properties.scalingMode;\n    }\n\n    if (properties.alignment) {\n      this.alignment = properties.alignment;\n      this.logger.debug('BackgroundContainer', 'getBackgroundInfo', 'Alignment updated', {\n        objectId: this.id,\n        newAlignment: properties.alignment,\n        oldAlignment: this.alignment,\n      });\n    }\n\n    if (properties.maintainAspectRatio !== undefined) {\n      this.maintainAspectRatio = properties.maintainAspectRatio;\n    }\n\n    // Apply changes if background is loaded\n    if (this.isBackgroundLoaded) {\n      this.applyResponsiveSizing();\n    }\n  }\n\n  /**\n   * Set alignment for the background image\n   * @param alignment - New alignment configuration\n   */\n  setAlignment(alignment: {\n    x: 'left' | 'center' | 'right';\n    y: 'top' | 'center' | 'bottom';\n  }): void {\n    this.logger.debug('BackgroundContainer', 'setAlignment', 'Setting alignment', {\n      objectId: this.id,\n      oldAlignment: this.alignment,\n      newAlignment: alignment,\n    });\n\n    this.alignment = alignment;\n\n    // Apply the new alignment immediately if background is loaded\n    if (this.isBackgroundLoaded) {\n      this.applyResponsiveSizing();\n    }\n  }\n\n  /**\n   * Get current alignment\n   */\n  getAlignment(): { x: 'left' | 'center' | 'right'; y: 'top' | 'center' | 'bottom' } {\n    return { ...this.alignment };\n  }\n\n  /**\n   * Switch background image based on device type using responsive configuration\n   */\n  private switchBackgroundImageForDeviceType(width: number, _height: number): void {\n    if (this.responsiveBackgroundImages.size === 0) {\n      this.logger.debug(\n        'BackgroundContainer',\n        'switchBackgroundImageForDeviceType',\n        'No responsive background images configured',\n        {\n          objectId: this.id,\n          responsiveBackgroundImages: Array.from(this.responsiveBackgroundImages.entries()),\n        }\n      );\n      return;\n    }\n\n    // Get responsive configuration from Container's injected configs\n    const newImageKey = this.getBackgroundImageFromResponsiveConfig(width);\n\n    if (!newImageKey) {\n      this.logger.warn(\n        'BackgroundContainer',\n        'switchBackgroundImageForDeviceType',\n        'No background image found in responsive config',\n        {\n          objectId: this.id,\n          width,\n        }\n      );\n      return;\n    }\n\n    // Check if the texture exists\n    if (!this.scene.textures.exists(newImageKey)) {\n      this.logger.warn(\n        'BackgroundContainer',\n        'switchBackgroundImageForDeviceType',\n        'Background texture not found',\n        {\n          objectId: this.id,\n          textureKey: newImageKey,\n          availableTextures: Object.keys(this.scene.textures.list),\n        }\n      );\n      return;\n    }\n\n    // Only switch if the image key is different\n    if (newImageKey !== this.backgroundImageKey) {\n      this.logger.debug(\n        'BackgroundContainer',\n        'switchBackgroundImageForDeviceType',\n        'Switching background image',\n        {\n          objectId: this.id,\n          oldImageKey: this.backgroundImageKey,\n          newImageKey,\n          width,\n        }\n      );\n\n      // Update the background image key and reload\n      this.backgroundImageKey = newImageKey;\n      this.loadBackgroundImage(newImageKey);\n\n      // Ensure the new background image has the correct z-order\n      this.ensureBackgroundImageZOrder();\n\n      // Refresh z-order of all child elements\n      this.refreshChildZOrders();\n\n      // Force a re-render to ensure proper z-order\n      this.scene.events.emit('backgroundImageSwitched', this.id);\n    } else {\n      this.logger.debug(\n        'BackgroundContainer',\n        'switchBackgroundImageForDeviceType',\n        'Background image already correct for device type',\n        {\n          objectId: this.id,\n          currentImageKey: this.backgroundImageKey,\n          newImageKey,\n          width,\n        }\n      );\n    }\n  }\n\n  /**\n   * Debug background container state\n   */\n  debugBackgroundState(): void {\n    this.logger.debug(\n      'BackgroundContainer',\n      'debugBackgroundState',\n      'Background Container Debug:',\n      {\n        id: this.id,\n        backgroundInfo: this.getBackgroundInfo(),\n        containerBounds: { x: this.x, y: this.y, width: this.width, height: this.height },\n        phaserObjectBounds: {\n          x: this.x,\n          y: this.y,\n          width: this.width,\n          height: this.height,\n        },\n        children: this.children.length,\n        gameDimensions: {\n          width: this.scene.game.scale.width,\n          height: this.scene.game.scale.height,\n        },\n        currentAlignment: this.alignment,\n      }\n    );\n  }\n\n  /**\n   * Test different alignment configurations\n   * Useful for debugging and testing alignment behavior\n   */\n  testAlignments(): void {\n    const alignments = [\n      { x: 'left', y: 'top' },\n      { x: 'center', y: 'top' },\n      { x: 'right', y: 'top' },\n      { x: 'left', y: 'center' },\n      { x: 'center', y: 'center' },\n      { x: 'right', y: 'center' },\n      { x: 'left', y: 'bottom' },\n      { x: 'center', y: 'bottom' },\n      { x: 'right', y: 'bottom' },\n    ];\n\n    this.logger.debug(\n      'BackgroundContainer',\n      'testAlignments',\n      'Testing all alignment configurations',\n      {\n        objectId: this.id,\n        alignments,\n      }\n    );\n\n    // Test center alignment first (most common use case)\n    this.setAlignment({ x: 'center', y: 'center' });\n\n    // You can uncomment the following lines to cycle through all alignments\n    // let currentIndex = 0\n    // const interval = setInterval(() => {\n    //   this.setAlignment(alignments[currentIndex])\n    //   currentIndex = (currentIndex + 1) % alignments.length\n    // }, 2000) // Change alignment every 2 seconds\n  }\n\n  // ===== MISSING METHOD IMPLEMENTATIONS =====\n\n  /**\n   * Set background properties\n   */\n  setBackground(background: any): void {\n    // Implementation for setting background\n    if (background.color) {\n      this.setBackgroundColor(background.color);\n    }\n  }\n\n  /**\n   * Set container constraints\n   */\n  setConstraints(constraints: any): void {\n    // Implementation for setting constraints\n    if (constraints.maintainAspectRatio !== undefined) {\n      this.maintainAspectRatio = constraints.maintainAspectRatio;\n    }\n  }\n\n  /**\n   * Set container type\n   */\n  setContainerType(type: string): void {\n    // Implementation for setting container type\n    (this as any).containerType = type;\n  }\n\n  /**\n   * Ensure background image has correct z-order\n   */\n  private ensureBackgroundImageZOrder(): void {\n    if (this.backgroundImage) {\n      this.backgroundImage.setDepth(-1);\n      this.logger.debug(\n        'BackgroundContainer',\n        'ensureBackgroundImageZOrder',\n        'Background image z-order ensured',\n        {\n          objectId: this.id,\n          depth: -1,\n        }\n      );\n    }\n  }\n\n  /**\n   * Force refresh z-order of all child elements\n   * This ensures proper layering after background image changes\n   */\n  private refreshChildZOrders(): void {\n    this.logger.debug('BackgroundContainer', 'refreshChildZOrders', 'Refreshing child z-orders', {\n      objectId: this.id,\n      childCount: this.children.length,\n    });\n\n    // Try multiple paths to find scene configuration\n    let sceneConfig: any = null;\n    let configPath = 'unknown';\n\n    // Try different possible paths for scene configuration\n    if ((this.scene as any).sceneConfigs?.scene?.gameObjects) {\n      sceneConfig = (this.scene as any).sceneConfigs.scene;\n      configPath = 'sceneConfigs.scene';\n    } else if ((this.scene as any).sceneConfigs?.gameObjects) {\n      sceneConfig = (this.scene as any).sceneConfigs;\n      configPath = 'sceneConfigs';\n    } else if ((this.scene as any).configManager?.sceneLoader?.sceneConfig?.gameObjects) {\n      sceneConfig = (this.scene as any).configManager.sceneLoader.sceneConfig;\n      configPath = 'configManager.sceneLoader.sceneConfig';\n    } else if ((this.scene as any).configManager?.sceneConfig?.gameObjects) {\n      sceneConfig = (this.scene as any).configManager.sceneConfig;\n      configPath = 'configManager.sceneConfig';\n    }\n\n    if (!sceneConfig?.gameObjects) {\n      this.logger.debug(\n        'BackgroundContainer',\n        'sceneConfig',\n        'No scene config available for z-order refresh, using fallback',\n        {\n          objectId: this.id,\n          triedPaths: [\n            'sceneConfigs.scene',\n            'sceneConfigs',\n            'configManager.sceneLoader.sceneConfig',\n            'configManager.sceneConfig',\n          ],\n          availablePaths: Object.keys((this.scene as any) || {}),\n          hasSceneConfigs: !!(this.scene as any).sceneConfigs,\n          hasConfigManager: !!(this.scene as any).configManager,\n        }\n      );\n\n      // Use fallback z-order assignment\n      this.assignFallbackZOrders();\n      return;\n    }\n\n    // Find the background container config to get child z-orders\n    const backgroundConfig = sceneConfig.gameObjects.find((obj: any) => obj.id === this.id);\n    if (!backgroundConfig?.children) {\n      this.logger.debug(\n        'BackgroundContainer',\n        'sceneConfig',\n        'No background config found for z-order refresh, using fallback',\n        {\n          objectId: this.id,\n          configPath,\n          availableGameObjects: sceneConfig.gameObjects?.map((obj: any) => obj.id) || [],\n          backgroundConfig: backgroundConfig || 'not found',\n        }\n      );\n\n      // Use fallback z-order assignment\n      this.assignFallbackZOrders();\n      return;\n    }\n\n    // Iterate through all children and ensure they have proper z-order from config\n    this.children.forEach((child: any, index: number) => {\n      if (child && typeof child.setDepth === 'function') {\n        // Find the child config to get its z-order\n        const childConfig = backgroundConfig.children.find(\n          (config: any) =>\n            config.id === child.name || config.id === child.id || config.id === child.id\n        );\n\n        if (childConfig?.zOrder !== undefined) {\n          // Use z-order from scene configuration\n          child.setDepth(childConfig.zOrder);\n          this.logger.debug(\n            'BackgroundContainer',\n            'sceneConfig',\n            'Child z-order refreshed from config',\n            {\n              objectId: this.id,\n              childName: child.name || child.id || 'unnamed',\n              childIndex: index,\n              configZOrder: childConfig.zOrder,\n              configPath,\n            }\n          );\n        } else {\n          // Fallback to default z-order if not specified in config\n          const fallbackZOrder = index + 1;\n          child.setDepth(fallbackZOrder);\n          this.logger.debug('BackgroundContainer', 'sceneConfig', 'Child z-order set to fallback', {\n            objectId: this.id,\n            childName: child.name || child.id || 'unnamed',\n            childIndex: index,\n            fallbackZOrder: fallbackZOrder,\n            configPath,\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Assign fallback z-orders when no configuration is available\n   */\n  private assignFallbackZOrders(): void {\n    this.logger.debug(\n      'BackgroundContainer',\n      'assignFallbackZOrders',\n      'Assigning fallback z-orders',\n      {\n        objectId: this.id,\n        childCount: this.children.length,\n      }\n    );\n\n    // Assign sequential z-orders to children\n    this.children.forEach((child: any, index: number) => {\n      if (child && typeof child.setDepth === 'function') {\n        const fallbackZOrder = index + 1;\n        child.setDepth(fallbackZOrder);\n\n        this.logger.debug(\n          'BackgroundContainer',\n          'assignFallbackZOrders',\n          'Fallback z-order assigned',\n          {\n            objectId: this.id,\n            childName: child.name || child.id || 'unnamed',\n            childIndex: index,\n            fallbackZOrder: fallbackZOrder,\n          }\n        );\n      }\n    });\n  }\n\n  /**\n   * Set interactive state\n   */\n  setInteractive(interactive: boolean): this {\n    if (interactive) {\n      // Call Phaser's built-in setInteractive method without parameters\n      (this as any).setInteractive();\n    } else {\n      this.disableInteractive();\n    }\n    return this;\n  }\n\n  // ===== OVERRIDE CONTAINER METHODS =====\n\n  /**\n   * Override resizeSelf to implement custom background container resize logic\n   * This is part of the template method pattern from the parent Container class\n   * Now simplified to work with Container's setStyle system\n   */\n  protected override resizeSelf(width: number, height: number): void {\n    this.logger.debug('BackgroundContainer', 'setInteractive', 'resizeSelf called', {\n      objectId: this.id,\n      newDimensions: { width, height },\n      currentDimensions: { width: this.width, height: this.height },\n      hasBackgroundImage: !!this.backgroundImage,\n      hasParent: !!this.parent,\n    });\n\n    // Check if background image should be switched based on device type\n    if (this.backgroundImageKey && this.hasResponsiveBackgroundImages()) {\n      this.logger.debug(\n        'BackgroundContainer',\n        'setInteractive',\n        'Checking if background image should be switched',\n        {\n          objectId: this.id,\n          currentWidth: width,\n          hasBackgroundImageKey: !!this.backgroundImageKey,\n          hasResponsiveBackgroundImages: this.hasResponsiveBackgroundImages(),\n          responsiveBackgroundImages: Array.from(this.responsiveBackgroundImages.entries()),\n        }\n      );\n      this.switchBackgroundImageForDeviceType(width, height);\n    } else {\n      this.logger.debug(\n        'BackgroundContainer',\n        'setInteractive',\n        'Skipping background image switch check',\n        {\n          objectId: this.id,\n          hasBackgroundImageKey: !!this.backgroundImageKey,\n          hasResponsiveBackgroundImages: this.hasResponsiveBackgroundImages(),\n          responsiveBackgroundImages: Array.from(this.responsiveBackgroundImages.entries()),\n        }\n      );\n    }\n\n    if (this.isBackgroundLoaded && this.backgroundDimensions) {\n      // Get current responsive behavior from Container's injected configs\n      const responsiveBehavior = this.getCurrentResponsiveBehaviorFromContainer();\n      this.logger.debug(\n        'BackgroundContainer',\n        'setInteractive',\n        'Background image loaded, applying responsive behavior',\n        {\n          objectId: this.id,\n          responsiveBehavior,\n          scaleStrategy: responsiveBehavior.scaleStrategy,\n          maintainAspectRatio: responsiveBehavior.maintainAspectRatio,\n        }\n      );\n\n      let finalWidth: number;\n      let finalHeight: number;\n      let finalPosition: { x: number; y: number };\n\n      // Apply responsive logic based on Container's responsive config\n      switch (responsiveBehavior.scaleStrategy) {\n        case 'fit':\n          if (responsiveBehavior.maintainAspectRatio) {\n            // Fit within available space while maintaining aspect ratio\n            const imageAspectRatio =\n              this.backgroundDimensions.width / this.backgroundDimensions.height;\n            const containerAspectRatio = width / height;\n\n            if (containerAspectRatio > imageAspectRatio) {\n              // Container is wider, fit by height\n              finalHeight = height;\n              finalWidth = finalHeight * imageAspectRatio;\n            } else {\n              // Container is taller, fit by width\n              finalWidth = width;\n              finalHeight = finalWidth / imageAspectRatio;\n            }\n\n            // Center the BackgroundContainer within the available space\n            const centerX = width / 2;\n            const centerY = height / 2;\n            finalPosition = {\n              x: centerX - finalWidth / 2,\n              y: centerY - finalHeight / 2,\n            };\n          } else {\n            // Don't maintain aspect ratio, use available dimensions\n            finalWidth = width;\n            finalHeight = height;\n            finalPosition = { x: 0, y: 0 };\n          }\n          break;\n\n        case 'stretch':\n        default:\n          // Stretch to fill available space (may distort)\n          finalWidth = width;\n          finalHeight = height;\n          finalPosition = { x: 0, y: 0 };\n          break;\n      }\n\n      // Set BackgroundContainer size based on responsive calculations\n      this.setSize(finalWidth, finalHeight);\n      this.setPosition(finalPosition.x, finalPosition.y);\n\n      // Scale background image to fill this container\n      this.scaleBackgroundImageToFit();\n\n      this.logger.debug(\n        'BackgroundContainer',\n        'setInteractive',\n        'Background container resized with responsive behavior',\n        {\n          objectId: this.id,\n          responsiveBehavior,\n          finalSize: { width: finalWidth, height: finalHeight },\n          finalPosition,\n          backgroundDimensions: this.backgroundDimensions,\n        }\n      );\n    } else {\n      // No background image, use Container's responsive sizing\n      // The Container class will handle this through its setStyle method\n      this.logger.debug(\n        'BackgroundContainer',\n        'unknown',\n        'No background image, using Container responsive sizing',\n        {\n          objectId: this.id,\n          providedDimensions: { width, height },\n        }\n      );\n    }\n  }\n\n  /**\n   * Override resizeAfter to implement post-resize operations specific to background containers\n   * This is part of the template method pattern from the parent Container class\n   */\n  protected override resizeAfter(width: number, height: number): void {\n    this.logger.debug('BackgroundContainer', 'unknown', 'resizeAfter called', {\n      objectId: this.id,\n      newDimensions: { width, height },\n    });\n\n    // Ensure background image z-order is correct after resize\n    this.ensureBackgroundImageZOrder();\n\n    // Refresh z-orders of all children\n    this.refreshChildZOrders();\n\n    this.logger.debug('BackgroundContainer', 'unknown', 'Post-resize operations completed', {\n      objectId: this.id,\n    });\n  }\n}\n","import * as Phaser from 'phaser';\nimport type { IShape } from '../../abstract/objects/IShape';\nimport type { IContainer } from '../../abstract/objects/IContainer';\nimport type { IStyle } from '../../abstract/configs/IStyle';\nimport type { CommonIStyleProperties } from '../../abstract/configs/IStyleProperties';\nimport type { IRandomValueNumber } from '../../unit';\nimport { Logger } from '../../core/Logger';\nimport type { IGameObject } from '../../abstract/base/IGameObject';\n\n/**\n * Rectangle shape class\n * Creates and manages rectangular shapes with fill and stroke support\n * Extends Phaser.GameObjects.Rectangle and implements IShape and IStyle interfaces\n */\nexport class Rectangle extends Phaser.GameObjects.Rectangle implements IShape, IStyle {\n  readonly shapeType = 'rectangle';\n  private _id: string;\n  private _parent: IContainer | null;\n  private logger: Logger = Logger.getInstance();\n\n  /** Current style properties */\n  private currentStyle: CommonIStyleProperties = {\n    maintainAspectRatio: false,\n    scaleStrategy: 'stretch',\n    alignment: 'center',\n  };\n\n  /** Responsive layout properties for this object (IGameObject requirement) */\n  layoutProperties: CommonIStyleProperties = {\n    maintainAspectRatio: false,\n    scaleStrategy: 'stretch',\n    alignment: 'center',\n  };\n\n  constructor(\n    scene: Phaser.Scene,\n    id: string,\n    x: number = 0,\n    y: number = 0,\n    width: number = 100,\n    height: number = 100,\n    fillColor: number = 0xffffff,\n    parent: IContainer | null = null\n  ) {\n    super(scene, x, y, width, height, fillColor);\n\n    this._id = id;\n    this._parent = parent;\n    this.name = id;\n\n    // Set initial properties\n    this.setOrigin(0, 0); // Set origin to top-left for easier positioning\n\n    this.logger.debug('Rectangle', 'super', 'Rectangle created', {\n      id,\n      dimensions: { width, height },\n      fillColor,\n      position: { x, y },\n      depth: this.depth,\n      visible: this.visible,\n      active: this.active,\n      alpha: this.alpha,\n      scale: { x: this.scaleX, y: this.scaleY },\n    });\n  }\n\n  // ===== IStyle IMPLEMENTATION =====\n\n  /** Set the style properties for this rectangle */\n  setStyle(layoutProperties: CommonIStyleProperties): void {\n    this.logger.debug('Rectangle', 'setStyle', 'Setting style properties', {\n      id: this.id,\n      newStyle: layoutProperties,\n    });\n\n    // Store the new style\n    this.currentStyle = { ...layoutProperties };\n\n    // Apply position properties\n    this.applyPositionProperties(layoutProperties);\n\n    // Apply size properties\n    this.applySizeProperties(layoutProperties);\n\n    // Apply visual properties\n    this.applyVisualProperties(layoutProperties);\n\n    // Apply fill and stroke properties\n    this.applyFillAndStrokeProperties(layoutProperties);\n  }\n\n  /** Get the current style properties */\n  getStyle(): CommonIStyleProperties {\n    return { ...this.currentStyle };\n  }\n\n  /** Get the object ID for responsive config lookup */\n  getStyleId(): string {\n    return this.id;\n  }\n\n  // ===== STYLE APPLICATION METHODS =====\n\n  /** Apply position properties from style */\n  private applyPositionProperties(style: CommonIStyleProperties): void {\n    if (style.positionX !== undefined) {\n      if (typeof style.positionX === 'number') {\n        this.x = style.positionX;\n      } else if (style.positionX === 'center') {\n        // Center horizontally (will be applied when parent bounds are known)\n        this.x = 0; // Placeholder, will be calculated\n      }\n    }\n\n    if (style.positionY !== undefined) {\n      if (typeof style.positionY === 'number') {\n        this.y = style.positionY;\n      } else if (style.positionY === 'center') {\n        // Center vertically (will be applied when parent bounds are known)\n        this.y = 0; // Placeholder, will be calculated\n      }\n    }\n\n    if (style.positionZ !== undefined) {\n      this.setDepth(style.positionZ);\n    }\n  }\n\n  /** Apply size properties from style */\n  private applySizeProperties(style: CommonIStyleProperties): void {\n    if (style.width !== undefined) {\n      if (typeof style.width === 'number') {\n        this.width = style.width;\n      }\n      // 'fill' and 'auto' will be handled during resize\n    }\n\n    if (style.height !== undefined) {\n      if (typeof style.height === 'number') {\n        this.height = style.height;\n      }\n      // 'fill' and 'auto' will be handled during resize\n    }\n  }\n\n  /** Apply visual properties from style */\n  private applyVisualProperties(style: CommonIStyleProperties): void {\n    if (style.alpha !== undefined) {\n      if (typeof style.alpha === 'number') {\n        this.setAlpha(style.alpha);\n      } else if (typeof style.alpha === 'object' && 'min' in style.alpha && 'max' in style.alpha) {\n        // Handle RandomValueNumber\n        const randomValue = (style.alpha as IRandomValueNumber).getRandomValue();\n        this.setAlpha(randomValue);\n      }\n    }\n\n    if (style.rotation !== undefined) {\n      if (typeof style.rotation === 'number') {\n        this.setRotation(style.rotation);\n      } else if (\n        typeof style.rotation === 'object' &&\n        'min' in style.rotation &&\n        'max' in style.rotation\n      ) {\n        // Handle RandomValueNumber\n        const randomValue = (style.rotation as IRandomValueNumber).getRandomValue();\n        this.setRotation(randomValue);\n      }\n    }\n\n    if (style.visible !== undefined) {\n      this.setVisible(style.visible);\n    }\n\n    if (style.interactive !== undefined) {\n      if (style.interactive) {\n        this.setInteractive();\n      } else {\n        this.disableInteractive();\n      }\n    }\n  }\n\n  /** Apply fill and stroke properties from style */\n  private applyFillAndStrokeProperties(style: CommonIStyleProperties): void {\n    if (style.backgroundColor !== undefined) {\n      this.setFillStyle(style.backgroundColor as number);\n    }\n\n    if (style.borderColor !== undefined && style.borderWidth !== undefined) {\n      if (typeof style.borderWidth === 'number') {\n        this.setStrokeStyle(style.borderWidth, style.borderColor as number);\n      } else if (\n        typeof style.borderWidth === 'object' &&\n        'min' in style.borderWidth &&\n        'max' in style.borderWidth\n      ) {\n        // Handle RandomValueNumber\n        const randomWidth = (style.borderWidth as IRandomValueNumber).getRandomValue();\n        this.setStrokeStyle(randomWidth, style.borderColor as number);\n      }\n    }\n  }\n\n  // ===== IShape IMPLEMENTATION =====\n\n  get id(): string {\n    return this._id;\n  }\n\n  get parent(): IContainer | null {\n    return this._parent;\n  }\n\n  get phaserObject(): Phaser.GameObjects.Rectangle {\n    return this;\n  }\n\n  get isActive(): boolean {\n    return this.active;\n  }\n\n  get isVisible(): boolean {\n    return this.visible;\n  }\n\n  get isInteractive(): boolean {\n    return this.input?.enabled || false;\n  }\n\n  get isDestroyed(): boolean {\n    return (this as any).destroyed || false;\n  }\n\n  get position(): { x: number; y: number } {\n    return { x: this.x, y: this.y };\n  }\n\n  get size(): { width: number; height: number } {\n    return { width: this.width, height: this.height };\n  }\n\n  get interactive(): boolean {\n    return this.input?.enabled || false;\n  }\n\n  // Use Phaser's getBounds method directly\n  getBounds(): any {\n    return super.getBounds();\n  }\n\n  // ===== IShape REQUIRED PROPERTIES =====\n\n  get dimensions(): { width: number; height: number } {\n    return { width: this.width, height: this.height };\n  }\n\n  get strokeWidth(): number {\n    return 0; // Phaser doesn't expose stroke width directly\n  }\n\n  // ===== IShape METHOD IMPLEMENTATIONS =====\n\n  setFillColor(color: number): void {\n    this.setFillStyle(color);\n  }\n\n  setStroke(color: number, width: number): void {\n    this.setStrokeStyle(width, color);\n  }\n\n  removeStroke(): void {\n    this.setStrokeStyle(0, 0x000000);\n  }\n\n  resize(width: number, height: number): void {\n    this.logger.debug('Rectangle', 'resize', 'Resizing rectangle', {\n      id: this.id,\n      oldDimensions: this.dimensions,\n      newDimensions: { width, height },\n    });\n\n    // Set the new size\n    this.setSize(width, height);\n  }\n\n  // ===== IGameObject METHOD IMPLEMENTATIONS =====\n\n  show(): void {\n    this.setVisible(true);\n  }\n\n  hide(): void {\n    this.setVisible(false);\n  }\n\n  // Note: We don't override setPosition, setRotation, setAlpha, setInteractive, destroy\n  // because Phaser's Rectangle already has these methods with the correct signatures\n\n  // ===== ABSTRACT METHOD IMPLEMENTATIONS =====\n\n  initialize(): void {\n    this.logger.debug('Rectangle', 'initialize', 'Initializing rectangle', {\n      id: this.id,\n    });\n\n    // Set initial state\n    this.setActive(true);\n    this.setVisible(true);\n  }\n\n  update(_time: number, _delta: number): void {\n    // Rectangle doesn't need per-frame updates\n    // Override in subclasses if needed\n  }\n\n  activate(): void {\n    this.logger.debug('Rectangle', 'activate', 'Activating rectangle', {\n      id: this.id,\n    });\n\n    this.setActive(true);\n  }\n\n  deactivate(): void {\n    this.logger.debug('Rectangle', 'deactivate', 'Deactivating rectangle', {\n      id: this.id,\n    });\n\n    this.setActive(false);\n  }\n\n  clone(): IGameObject {\n    this.logger.debug('Rectangle', 'clone', 'Cloning rectangle', {\n      id: this.id,\n    });\n\n    return new Rectangle(\n      this.scene,\n      `${this.id}_clone`,\n      this.position.x,\n      this.position.y,\n      this.size.width,\n      this.size.height,\n      (this as any).fillColor || 0xffffff,\n      this.parent\n    );\n  }\n\n  /** Get the size of this game object */\n  getSize(): { width: number; height: number } {\n    return this.size;\n  }\n\n  /** Get the position of this game object */\n  getPosition(): { x: number; y: number } {\n    return this.position;\n  }\n\n  // ===== RECTANGLE-SPECIFIC METHODS =====\n\n  /**\n   * Get the current corner radius\n   */\n  getCornerRadius(): number {\n    return this.radius;\n  }\n\n  /**\n   * Handle responsive resize from scene\n   * This method is called by the scene's resize system\n   */\n  handleResponsiveResize(width: number, height: number): void {\n    this.logger.debug(\n      'Rectangle',\n      'handleResponsiveResize',\n      'Handling responsive resize from scene',\n      {\n        id: this.id,\n        newDimensions: { width, height },\n        currentDimensions: this.dimensions,\n      }\n    );\n\n    // Apply the new size\n    this.resize(width, height);\n  }\n\n  /**\n   * Log the current state of the Rectangle for debugging\n   */\n  logCurrentState(): void {\n    this.logger.debug('Rectangle', 'logCurrentState', 'Current Rectangle state', {\n      id: this.id,\n      dimensions: this.dimensions,\n      position: this.position,\n      depth: this.depth,\n      visible: this.visible,\n      active: this.active,\n      alpha: this.alpha,\n      scale: { x: this.scaleX, y: this.scaleY },\n      fillColor: this.fillColor,\n      strokeWidth: this.strokeWidth,\n      parentId: this.parent?.id || 'none',\n      sceneKey: this.scene.scene.key,\n    });\n  }\n\n  // ===== STATIC FACTORY METHOD =====\n\n  /**\n   * Create a Rectangle instance from configuration\n   */\n  public static createFromConfig(config: any, scene: Phaser.Scene, parent?: IContainer): Rectangle {\n    const logger = Logger.getInstance();\n    logger.debug('Rectangle', 'createFromConfig', 'createFromConfig called', {\n      objectId: config.id,\n      config: config,\n      sceneKey: scene.scene.key,\n      hasParent: !!parent,\n      parentInfo: parent\n        ? {\n            id: parent.id,\n            type: parent.constructor.name,\n            bounds: parent.getContainerBounds(),\n          }\n        : null,\n    });\n\n    try {\n      // Resolve dimensions (handle 'fill' values)\n      let width = config.width || 100;\n      let height = config.height || 100;\n\n      if (parent && (width === 'fill' || height === 'fill')) {\n        const parentBounds = parent.getContainerBounds();\n        if (width === 'fill') width = parentBounds.width;\n        if (height === 'fill') height = parentBounds.height;\n      }\n\n      logger.debug('Rectangle', 'createFromConfig', 'Dimensions resolved', {\n        objectId: config.id,\n        finalDimensions: { width, height },\n        hasParent: !!parent,\n      });\n\n      const rectangle = new Rectangle(\n        scene,\n        config.id,\n        config.x || 0,\n        config.y || 0,\n        width,\n        height,\n        config.fillColor || 0xffffff,\n        parent || null\n      );\n\n      // Apply additional properties if specified\n      if (config.properties) {\n        // Set stroke if specified\n        if (\n          config.properties.strokeColor !== undefined &&\n          config.properties.strokeWidth !== undefined\n        ) {\n          rectangle.setStroke(config.properties.strokeColor, config.properties.strokeWidth);\n        }\n\n        // Set interactive if specified\n        if (config.properties.interactive !== undefined) {\n          rectangle.setInteractive(config.properties.interactive);\n        }\n      }\n\n      // Log final state after all properties are applied\n      logger.debug(\n        'Rectangle',\n        'createFromConfig',\n        'Final Rectangle state after property application',\n        {\n          objectId: config.id,\n          finalDimensions: rectangle.dimensions,\n          finalPosition: rectangle.position,\n          finalDepth: rectangle.depth,\n          finalVisible: rectangle.visible,\n          finalActive: rectangle.active,\n          finalAlpha: rectangle.alpha,\n          finalScale: { x: rectangle.scaleX, y: rectangle.scaleY },\n          fillColor: rectangle.fillColor,\n          strokeWidth: rectangle.strokeWidth,\n        }\n      );\n\n      // Log the complete state using the instance method\n      rectangle.logCurrentState();\n\n      logger.debug('Rectangle', 'createFromConfig', 'Rectangle created successfully from config', {\n        objectId: config.id,\n        finalDimensions: rectangle.dimensions,\n        hasStroke: rectangle.strokeWidth > 0,\n        position: rectangle.position,\n        depth: rectangle.depth,\n        visible: rectangle.visible,\n        active: rectangle.active,\n        alpha: rectangle.alpha,\n        scale: { x: rectangle.scaleX, y: rectangle.scaleY },\n      });\n\n      return rectangle;\n    } catch (error) {\n      logger.error(\n        'Rectangle',\n        'logCurrentState',\n        'Error in createFromConfig for ${config.id}:',\n        error\n      );\n      throw error;\n    }\n  }\n}\n"],"file":"assets/common-DJaWdktT.js"}