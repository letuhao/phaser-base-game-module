---
description: Prohibit string literals in type definitions - use enums instead
globs:
alwaysApply: true
---

# String Literal Prohibition Rule

## ❌ FORBIDDEN - String Literals in Type Definitions
```typescript
// ❌ FORBIDDEN - String literals in type definitions
interface IConfig {
  type: 'linear' | 'radial';           // Use enum instead
  direction: 'in' | 'out' | 'both';    // Use enum instead
  format: 'json' | 'yaml' | 'xml';     // Use enum instead
  logLevel: 'debug' | 'info' | 'warn' | 'error'; // Use enum instead
}

// ❌ FORBIDDEN - String literals in function parameters
function processData(type: 'image' | 'audio' | 'video'): void {
  // Use enum instead
}
```

## ✅ CORRECT - Use Enums for String Values
```typescript
// ✅ CORRECT - Define enums for all string values
// src/system/enums/SystemEnums.ts
export enum GradientType {
  LINEAR = 'linear',
  RADIAL = 'radial'
}

export enum TransitionDirection {
  IN = 'in',
  OUT = 'out',
  BOTH = 'both'
}

export enum ExportFormat {
  JSON = 'json',
  YAML = 'yaml',
  XML = 'xml'
}

export enum LogLevel {
  DEBUG = 'debug',
  INFO = 'info',
  WARN = 'warn',
  ERROR = 'error'
}

export enum AssetType {
  IMAGE = 'image',
  AUDIO = 'audio',
  VIDEO = 'video'
}

// ✅ CORRECT - Use enums in interfaces
interface IConfig {
  type: GradientType;
  direction: TransitionDirection;
  format: ExportFormat;
  logLevel: LogLevel;
}

// ✅ CORRECT - Use enums in function parameters
function processData(type: AssetType): void {
  // Implementation
}
```

## Enum Organization
```typescript
// ✅ CORRECT - Enums in dedicated enum folders
// src/system/enums/SystemEnums.ts
export enum UnitType {
  SIZE = 'size',
  POSITION = 'position',
  SCALE = 'scale'
}

export enum SizeUnit {
  PIXEL = 'pixel',
  PARENT_WIDTH = 'parent-width',
  VIEWPORT_WIDTH = 'viewport-width',
  AUTO = 'auto'
}
```