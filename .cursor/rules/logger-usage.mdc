---
description: Always use Logger instead of console for all logging operations
globs:
alwaysApply: true
---

# Logger Usage Rule

## ✅ CORRECT - Use Logger
```typescript
import { logger } from '../core/Logger';

export class MyClass {
  public doSomething(): void {
    logger.debug('MyClass', 'doSomething', 'Starting operation', {
      param1: 'value1',
      param2: 'value2'
    });
    
    try {
      // ... operation logic
      logger.info('MyClass', 'doSomething', 'Operation completed successfully');
    } catch (error) {
      logger.error('MyClass', 'doSomething', 'Operation failed', { error });
    }
  }
}
```

## ❌ FORBIDDEN - Never use console
```typescript
// ❌ FORBIDDEN - Never use console directly
console.log('Debug info');
console.error('Error message');
console.warn('Warning message');

// ❌ FORBIDDEN - Even in tests (use logger instead)
console.log('Test output');
```

## Logger Parameters Format
```typescript
logger.method('ClassName', 'methodName', 'message', { data });
//         ↑           ↑           ↑        ↑
//    Class name   Method name   Message   Optional data object
```